
montre.elf:     file format elf32-littlenios2
montre.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00005ac4 memsz 0x00005ac4 flags r-x
    LOAD off    0x00006ae4 vaddr 0x00805ae4 paddr 0x0080762c align 2**12
         filesz 0x00001b48 memsz 0x00001b48 flags rw-
    LOAD off    0x00009174 vaddr 0x00809174 paddr 0x00809174 align 2**12
         filesz 0x00000000 memsz 0x000002f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005888  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  00805a40  00805a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b48  00805ae4  0080762c  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f8  00809174  00809174  00009174  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000862c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00008658  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000e1f  00000000  00000000  00008f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019944  00000000  00000000  00009d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005022  00000000  00000000  000236b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cb05  00000000  00000000  000286d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001078  00000000  00000000  000351dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017a2  00000000  00000000  00036254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004041  00000000  00000000  000379f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003ba38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003ba48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003e3fb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003e3fe  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003e401  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003e402  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003e403  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003e407  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003e40b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003e40f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003e41a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003e425  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  0003e430  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  0003e437  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004e53b  00000000  00000000  0003e454  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
00805a40 l    d  .rodata	00000000 .rodata
00805ae4 l    d  .rwdata	00000000 .rwdata
00809174 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00800610 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00805af0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00802094 l     F .text	00000058 std
008021a0 l     F .text	00000008 __fp_lock
008021a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
008031d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803238 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080333c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00803620 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803700 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00803860 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00803a90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00807620 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00803d48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008064a0 l     O .rwdata	00001060 jtag_uart_0
00807500 l     O .rwdata	0000002c SEG_CONTROLLER
0080752c l     O .rwdata	0000002c KEY
00807558 l     O .rwdata	0000002c LED_GREEN
00807584 l     O .rwdata	0000002c LED_RED
008075b0 l     O .rwdata	0000002c SWITCHES
00803e74 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008040ac l     F .text	0000022c altera_avalon_jtag_uart_irq
008042d8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00804954 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00804c74 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00804db8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00804f08 l     F .text	000000f8 alt_file_locked
0080518c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00805828 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
008059dc l     F .text	00000040 alt_sim_halt
00802f40 g     F .text	00000070 _isatty_r
008038c0 g     F .text	0000006c alt_main
0080075c g     F .text	000000a0 _puts_r
008091dc g     O .bss	00000100 alt_irq
00802fb0 g     F .text	00000078 _lseek_r
0080762c g       *ABS*	00000000 __flash_rwdata_start
0080946c g       *ABS*	00000000 __alt_heap_start
00802b7c g     F .text	00000068 __sseek
008020fc g     F .text	000000a4 __sinit
008075f0 g     O .rwdata	00000001 StartStop
008021fc g     F .text	0000009c __sfmoreglue
0080394c g     F .text	00000020 __malloc_unlock
008015e4 g     F .text	000000e0 memmove
008021ec g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00809180 g     O .bss	00000004 edge_capture_timer
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802ecc g     F .text	00000074 _fstat_r
00809198 g     O .bss	00000004 errno
008091a4 g     O .bss	00000004 alt_argv
0080f5dc g       *ABS*	00000000 _gp
00806320 g     O .rwdata	00000180 alt_fd_list
008053b0 g     F .text	00000094 alt_find_dev
00801544 g     F .text	000000a0 memcpy
008021e0 g     F .text	0000000c _cleanup_r
00804e90 g     F .text	00000078 alt_io_redirect
00805a40 g       *ABS*	00000000 __DTOR_END__
008007fc g     F .text	00000014 puts
008044f0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080074c g     F .text	00000008 __udivsi3
0080355c g     F .text	000000c4 isatty
00800258 g     F .text	00000050 init_timer
0080918c g     O .bss	00000004 __malloc_top_pad
00800884 g     F .text	0000049c __sfvwrite_r
00801cb8 g     F .text	00000070 _sbrk_r
00805ae4 g     O .rwdata	0000000a seven_seg
00803028 g     F .text	00000078 _read_r
00807614 g     O .rwdata	00000004 alt_max_fd
00802da8 g     F .text	00000110 _fclose_r
00802060 g     F .text	00000034 fflush
00809190 g     O .bss	00000004 __malloc_max_sbrked_mem
008075e4 g     O .rwdata	00000004 key_ptr
0080339c g     F .text	000001c0 alt_irq_register
0080376c g     F .text	000000f4 lseek
008075f8 g     O .rwdata	00000004 _global_impure_ptr
008016c4 g     F .text	000005f4 _realloc_r
0080946c g       *ABS*	00000000 __bss_end
00805284 g     F .text	0000010c alt_tick
008021c8 g     F .text	00000018 __fp_lock_all
008051ec g     F .text	00000098 alt_alarm_stop
0080919c g     O .bss	00000004 alt_irq_active
00800000 g       *ABS*	00000000 __alt_mem_SDRAM_CONTROLER
008000ec g     F .exceptions	000000cc alt_irq_handler
008062f8 g     O .rwdata	00000028 alt_dev_null
008075e0 g     O .rwdata	00000004 timer_ptr
00804ba4 g     F .text	0000001c alt_dcache_flush_all
0080762c g       *ABS*	00000000 __ram_rwdata_end
0080760c g     O .rwdata	00000008 alt_dev_list
00803c24 g     F .text	00000124 write
00805ae4 g       *ABS*	00000000 __ram_rodata_end
00803264 g     F .text	000000d8 fstat
008075ec g     O .rwdata	00000004 h_clk
00800754 g     F .text	00000008 __umodsi3
0080946c g       *ABS*	00000000 end
008075f1 g     O .rwdata	00000001 mode
00803ff4 g     F .text	000000b8 altera_avalon_jtag_uart_init
00805a3c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008049c8 g     F .text	00000088 alt_avalon_timer_sc_init
00809184 g     O .bss	00000004 edge_capture_key
00804714 g     F .text	00000240 altera_avalon_jtag_uart_write
008020ec g     F .text	00000004 __sfp_lock_acquire
00801460 g     F .text	000000e4 memchr
008024b4 g     F .text	00000314 _free_r
0080582c g     F .text	000001b0 __call_exitprocs
00807600 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000003c _start
008091ac g     O .bss	00000004 _alt_tick_rate
008091b0 g     O .bss	00000004 _alt_nticks
0080396c g     F .text	00000124 read
00803ddc g     F .text	00000098 alt_sys_init
008056f4 g     F .text	00000134 __register_exitproc
00804388 g     F .text	00000074 altera_avalon_jtag_uart_close
008030a0 g     F .text	00000038 __mulsi3
00805ae4 g       *ABS*	00000000 __ram_rwdata_start
00805a40 g       *ABS*	00000000 __ram_rodata_start
008091b4 g     O .bss	00000028 __malloc_current_mallinfo
00803eac g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00805564 g     F .text	000000d0 alt_get_fd
008075e8 g     O .rwdata	00000004 m_clk
00802d38 g     F .text	00000070 _close_r
00805680 g     F .text	00000074 memcmp
00803f5c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080946c g       *ABS*	00000000 __alt_stack_base
00803fa4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00801d28 g     F .text	0000013c __swsetup_r
00802298 g     F .text	000000f0 __sfp
00805ef0 g     O .rwdata	00000408 __malloc_av_
008020f8 g     F .text	00000004 __sinit_lock_release
00800538 g     F .text	000000d8 handle_key_interrupt
00802c60 g     F .text	00000060 __sread
00805444 g     F .text	00000120 alt_find_file
00804bc0 g     F .text	000000b4 alt_dev_llist_insert
0080392c g     F .text	00000020 __malloc_lock
00803b68 g     F .text	000000bc sbrk
00801e64 g     F .text	000001fc _fflush_r
00809174 g       *ABS*	00000000 __bss_start
00802adc g     F .text	00000098 memset
008001f4 g     F .text	00000064 main
008091a8 g     O .bss	00000004 alt_envp
00809194 g     O .bss	00000004 __malloc_max_total_mem
00803f04 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008002a8 g     F .text	00000240 handle_timer_interrupts
00802b74 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802eb8 g     F .text	00000014 fclose
008092dc g     O .bss	00000190 _atexit0
00800d20 g     F .text	00000740 _malloc_r
008004e8 g     F .text	00000050 init_key
00807618 g     O .rwdata	00000004 alt_errno
00802890 g     F .text	000000b8 _fwalk
00809178 g     O .bss	00000004 s_clk
0080068c g     F .text	00000060 __divsi3
00802388 g     F .text	0000012c _malloc_trim_r
00805a40 g       *ABS*	00000000 __CTOR_END__
00805a40 g       *ABS*	00000000 __flash_rodata_start
00805a40 g       *ABS*	00000000 __DTOR_LIST__
00809188 g     O .bss	00000004 press_key
00803da8 g     F .text	00000034 alt_irq_init
00803af0 g     F .text	00000078 alt_release_fd
00805634 g     F .text	00000014 atexit
00802cc0 g     F .text	00000078 _write_r
008075f4 g     O .rwdata	00000004 _impure_ptr
008091a0 g     O .bss	00000004 alt_argc
00809174 g     O .bss	00000004 s
00804d38 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008021b0 g     F .text	00000018 __fp_unlock_all
00807604 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080762c g       *ABS*	00000000 _edata
0080946c g       *ABS*	00000000 _end
008001b8 g       *ABS*	00000000 __ram_exceptions_end
008043fc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00802be4 g     F .text	0000007c __swrite
008075fc g     O .rwdata	00000004 __malloc_trim_threshold
00805390 g     F .text	00000020 altera_nios2_qsys_irq_init
00805648 g     F .text	00000038 exit
008027c8 g     F .text	000000c8 _fwalk_reent
008006ec g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008020f0 g     F .text	00000004 __sfp_lock_release
00805a1c g     F .text	00000020 _exit
00804a50 g     F .text	00000154 alt_alarm_start
0080917c g     O .bss	00000004 m
00802948 g     F .text	00000194 __smakebuf_r
00800810 g     F .text	00000074 strlen
00805000 g     F .text	0000018c open
00804d9c g     F .text	0000001c alt_icache_flush_all
0080761c g     O .rwdata	00000004 alt_priority_mask
008075dc g     O .rwdata	00000004 seg_ptr
00807624 g     O .rwdata	00000008 alt_alarm_list
00804cd4 g     F .text	00000064 _do_ctors
008030d8 g     F .text	00000100 close
00803680 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
008020f4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406e14 	ori	at,at,440
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18e47704 	addi	r3,r3,-28196
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18e47704 	addi	r3,r3,-28196
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001c0:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001c4:	d6bd7714 	ori	gp,gp,62940
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c8:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001cc:	10a45d14 	ori	r2,r2,37236

    movhi r3, %hi(__bss_end)
  8001d0:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001d4:	18e51b14 	ori	r3,r3,37996

    beq r2, r3, 1f
  8001d8:	10c00326 	beq	r2,r3,8001e8 <_start+0x30>

0:
    stw zero, (r2)
  8001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e4:	10fffd36 	bltu	r2,r3,8001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e8:	08036800 	call	803680 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001ec:	08038c00 	call	8038c0 <alt_main>

008001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f0:	003fff06 	br	8001f0 <alt_after_alt_main>

008001f4 <main>:
void init_key();
void handle_key_interrupt(void* context , alt_u32 id);


int main()
{
  8001f4:	defffe04 	addi	sp,sp,-8
  8001f8:	dfc00115 	stw	ra,4(sp)
  8001fc:	df000015 	stw	fp,0(sp)
  800200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  800204:	01002034 	movhi	r4,128
  800208:	21169004 	addi	r4,r4,23104
  80020c:	08007fc0 	call	8007fc <puts>
  *seg_ptr = 0x3F;
  800210:	d0e00017 	ldw	r3,-32768(gp)
  800214:	00800fc4 	movi	r2,63
  800218:	18800005 	stb	r2,0(r3)
  *(seg_ptr + 1) = 0x06;
  80021c:	d0a00017 	ldw	r2,-32768(gp)
  800220:	10c00044 	addi	r3,r2,1
  800224:	00800184 	movi	r2,6
  800228:	18800005 	stb	r2,0(r3)
  *(seg_ptr + 2) = 0x5B;
  80022c:	d0a00017 	ldw	r2,-32768(gp)
  800230:	10c00084 	addi	r3,r2,2
  800234:	008016c4 	movi	r2,91
  800238:	18800005 	stb	r2,0(r3)
  *(seg_ptr + 3) = 0x6F;
  80023c:	d0a00017 	ldw	r2,-32768(gp)
  800240:	10c000c4 	addi	r3,r2,3
  800244:	00801bc4 	movi	r2,111
  800248:	18800005 	stb	r2,0(r3)
  init_timer();
  80024c:	08002580 	call	800258 <init_timer>
  init_key();
  800250:	08004e80 	call	8004e8 <init_key>
  while(1);
  800254:	003fff06 	br	800254 <main+0x60>

00800258 <init_timer>:
}

void init_timer(){
  800258:	defffd04 	addi	sp,sp,-12
  80025c:	dfc00215 	stw	ra,8(sp)
  800260:	df000115 	stw	fp,4(sp)
  800264:	df000104 	addi	fp,sp,4
	void *edge_capture_timer_ptr = (void*)&edge_capture_timer ;;
  800268:	d0a6e904 	addi	r2,gp,-25692
  80026c:	e0bfff15 	stw	r2,-4(fp)
	*(timer_ptr +1 )=0x07; //ITO = 1 ,CONT = 1 ,START = 1 , STOP = 0
  800270:	d0a00117 	ldw	r2,-32764(gp)
  800274:	10c00084 	addi	r3,r2,2
  800278:	008001c4 	movi	r2,7
  80027c:	1880000d 	sth	r2,0(r3)
	alt_irq_register(TIMER_0_IRQ, edge_capture_timer_ptr  ,handle_timer_interrupts);
  800280:	0009883a 	mov	r4,zero
  800284:	e17fff17 	ldw	r5,-4(fp)
  800288:	01802034 	movhi	r6,128
  80028c:	3180aa04 	addi	r6,r6,680
  800290:	080339c0 	call	80339c <alt_irq_register>
}
  800294:	e037883a 	mov	sp,fp
  800298:	dfc00117 	ldw	ra,4(sp)
  80029c:	df000017 	ldw	fp,0(sp)
  8002a0:	dec00204 	addi	sp,sp,8
  8002a4:	f800283a 	ret

008002a8 <handle_timer_interrupts>:
void handle_timer_interrupts(void * context , alt_u32 id){
  8002a8:	defffb04 	addi	sp,sp,-20
  8002ac:	dfc00415 	stw	ra,16(sp)
  8002b0:	df000315 	stw	fp,12(sp)
  8002b4:	dc000215 	stw	r16,8(sp)
  8002b8:	df000204 	addi	fp,sp,8
  8002bc:	e13ffe15 	stw	r4,-8(fp)
  8002c0:	e17fff15 	stw	r5,-4(fp)
	(*timer_ptr)= 0;
  8002c4:	d0a00117 	ldw	r2,-32764(gp)
  8002c8:	1000000d 	sth	zero,0(r2)
	if (mode == 1){ // testing if the mode is clk (m=1)
  8002cc:	d0a00543 	ldbu	r2,-32747(gp)
  8002d0:	10803fcc 	andi	r2,r2,255
  8002d4:	10800058 	cmpnei	r2,r2,1
  8002d8:	10002c1e 	bne	r2,zero,80038c <handle_timer_interrupts+0xe4>
		*(seg_ptr) = seven_seg[(m_clk%10)];
  8002dc:	d4200017 	ldw	r16,-32768(gp)
  8002e0:	d1200317 	ldw	r4,-32756(gp)
  8002e4:	01400284 	movi	r5,10
  8002e8:	08007540 	call	800754 <__umodsi3>
  8002ec:	1007883a 	mov	r3,r2
  8002f0:	00802034 	movhi	r2,128
  8002f4:	1096b904 	addi	r2,r2,23268
  8002f8:	10c5883a 	add	r2,r2,r3
  8002fc:	10800003 	ldbu	r2,0(r2)
  800300:	80800005 	stb	r2,0(r16)
		*(seg_ptr + 1) = seven_seg[(m_clk/10)];
  800304:	d0a00017 	ldw	r2,-32768(gp)
  800308:	14000044 	addi	r16,r2,1
  80030c:	d1200317 	ldw	r4,-32756(gp)
  800310:	01400284 	movi	r5,10
  800314:	080074c0 	call	80074c <__udivsi3>
  800318:	1007883a 	mov	r3,r2
  80031c:	00802034 	movhi	r2,128
  800320:	1096b904 	addi	r2,r2,23268
  800324:	10c5883a 	add	r2,r2,r3
  800328:	10800003 	ldbu	r2,0(r2)
  80032c:	80800005 	stb	r2,0(r16)
		*(seg_ptr + 2) = seven_seg[(h_clk%10)];
  800330:	d0a00017 	ldw	r2,-32768(gp)
  800334:	14000084 	addi	r16,r2,2
  800338:	d1200417 	ldw	r4,-32752(gp)
  80033c:	01400284 	movi	r5,10
  800340:	08007540 	call	800754 <__umodsi3>
  800344:	1007883a 	mov	r3,r2
  800348:	00802034 	movhi	r2,128
  80034c:	1096b904 	addi	r2,r2,23268
  800350:	10c5883a 	add	r2,r2,r3
  800354:	10800003 	ldbu	r2,0(r2)
  800358:	80800005 	stb	r2,0(r16)
		*(seg_ptr + 3) = seven_seg[(h_clk/10)];
  80035c:	d0a00017 	ldw	r2,-32768(gp)
  800360:	140000c4 	addi	r16,r2,3
  800364:	d1200417 	ldw	r4,-32752(gp)
  800368:	01400284 	movi	r5,10
  80036c:	080074c0 	call	80074c <__udivsi3>
  800370:	1007883a 	mov	r3,r2
  800374:	00802034 	movhi	r2,128
  800378:	1096b904 	addi	r2,r2,23268
  80037c:	10c5883a 	add	r2,r2,r3
  800380:	10800003 	ldbu	r2,0(r2)
  800384:	80800005 	stb	r2,0(r16)
  800388:	00002b06 	br	800438 <handle_timer_interrupts+0x190>
	}
	else {
	*(seg_ptr) = seven_seg[(s%10)];
  80038c:	d4200017 	ldw	r16,-32768(gp)
  800390:	d126e617 	ldw	r4,-25704(gp)
  800394:	01400284 	movi	r5,10
  800398:	08007540 	call	800754 <__umodsi3>
  80039c:	1007883a 	mov	r3,r2
  8003a0:	00802034 	movhi	r2,128
  8003a4:	1096b904 	addi	r2,r2,23268
  8003a8:	10c5883a 	add	r2,r2,r3
  8003ac:	10800003 	ldbu	r2,0(r2)
  8003b0:	80800005 	stb	r2,0(r16)
	*(seg_ptr + 1) = seven_seg[(s/10)];
  8003b4:	d0a00017 	ldw	r2,-32768(gp)
  8003b8:	14000044 	addi	r16,r2,1
  8003bc:	d126e617 	ldw	r4,-25704(gp)
  8003c0:	01400284 	movi	r5,10
  8003c4:	080074c0 	call	80074c <__udivsi3>
  8003c8:	1007883a 	mov	r3,r2
  8003cc:	00802034 	movhi	r2,128
  8003d0:	1096b904 	addi	r2,r2,23268
  8003d4:	10c5883a 	add	r2,r2,r3
  8003d8:	10800003 	ldbu	r2,0(r2)
  8003dc:	80800005 	stb	r2,0(r16)
	*(seg_ptr + 2) = seven_seg[(m%10)];
  8003e0:	d0a00017 	ldw	r2,-32768(gp)
  8003e4:	14000084 	addi	r16,r2,2
  8003e8:	d126e817 	ldw	r4,-25696(gp)
  8003ec:	01400284 	movi	r5,10
  8003f0:	08007540 	call	800754 <__umodsi3>
  8003f4:	1007883a 	mov	r3,r2
  8003f8:	00802034 	movhi	r2,128
  8003fc:	1096b904 	addi	r2,r2,23268
  800400:	10c5883a 	add	r2,r2,r3
  800404:	10800003 	ldbu	r2,0(r2)
  800408:	80800005 	stb	r2,0(r16)
	*(seg_ptr + 3) = seven_seg[(m/10)];
  80040c:	d0a00017 	ldw	r2,-32768(gp)
  800410:	140000c4 	addi	r16,r2,3
  800414:	d126e817 	ldw	r4,-25696(gp)
  800418:	01400284 	movi	r5,10
  80041c:	080074c0 	call	80074c <__udivsi3>
  800420:	1007883a 	mov	r3,r2
  800424:	00802034 	movhi	r2,128
  800428:	1096b904 	addi	r2,r2,23268
  80042c:	10c5883a 	add	r2,r2,r3
  800430:	10800003 	ldbu	r2,0(r2)
  800434:	80800005 	stb	r2,0(r16)
	}
	if (StartStop == 1){
  800438:	d0a00503 	ldbu	r2,-32748(gp)
  80043c:	10803fcc 	andi	r2,r2,255
  800440:	10800058 	cmpnei	r2,r2,1
  800444:	10000d1e 	bne	r2,zero,80047c <handle_timer_interrupts+0x1d4>
		s = (s+1)%60;
  800448:	d0a6e617 	ldw	r2,-25704(gp)
  80044c:	11000044 	addi	r4,r2,1
  800450:	01400f04 	movi	r5,60
  800454:	08007540 	call	800754 <__umodsi3>
  800458:	d0a6e615 	stw	r2,-25704(gp)
		if (s == 0) m =(m+1)%60;
  80045c:	d0a6e617 	ldw	r2,-25704(gp)
  800460:	1004c03a 	cmpne	r2,r2,zero
  800464:	1000051e 	bne	r2,zero,80047c <handle_timer_interrupts+0x1d4>
  800468:	d0a6e817 	ldw	r2,-25696(gp)
  80046c:	11000044 	addi	r4,r2,1
  800470:	01400f04 	movi	r5,60
  800474:	08007540 	call	800754 <__umodsi3>
  800478:	d0a6e815 	stw	r2,-25696(gp)
	}
	s_clk = (s_clk +1)%60 ;
  80047c:	d0a6e717 	ldw	r2,-25700(gp)
  800480:	11000044 	addi	r4,r2,1
  800484:	01400f04 	movi	r5,60
  800488:	08007540 	call	800754 <__umodsi3>
  80048c:	d0a6e715 	stw	r2,-25700(gp)
	if (s_clk == 0) m_clk = (m_clk +1)%60;
  800490:	d0a6e717 	ldw	r2,-25700(gp)
  800494:	1004c03a 	cmpne	r2,r2,zero
  800498:	1000051e 	bne	r2,zero,8004b0 <handle_timer_interrupts+0x208>
  80049c:	d0a00317 	ldw	r2,-32756(gp)
  8004a0:	11000044 	addi	r4,r2,1
  8004a4:	01400f04 	movi	r5,60
  8004a8:	08007540 	call	800754 <__umodsi3>
  8004ac:	d0a00315 	stw	r2,-32756(gp)
	if (m_clk == 0) h_clk = (h_clk +1)%24;
  8004b0:	d0a00317 	ldw	r2,-32756(gp)
  8004b4:	1004c03a 	cmpne	r2,r2,zero
  8004b8:	1000051e 	bne	r2,zero,8004d0 <handle_timer_interrupts+0x228>
  8004bc:	d0a00417 	ldw	r2,-32752(gp)
  8004c0:	11000044 	addi	r4,r2,1
  8004c4:	01400604 	movi	r5,24
  8004c8:	08007540 	call	800754 <__umodsi3>
  8004cc:	d0a00415 	stw	r2,-32752(gp)

}
  8004d0:	e037883a 	mov	sp,fp
  8004d4:	dfc00217 	ldw	ra,8(sp)
  8004d8:	df000117 	ldw	fp,4(sp)
  8004dc:	dc000017 	ldw	r16,0(sp)
  8004e0:	dec00304 	addi	sp,sp,12
  8004e4:	f800283a 	ret

008004e8 <init_key>:
void init_key(){
  8004e8:	defffd04 	addi	sp,sp,-12
  8004ec:	dfc00215 	stw	ra,8(sp)
  8004f0:	df000115 	stw	fp,4(sp)
  8004f4:	df000104 	addi	fp,sp,4
	void  *edge_capture_key_ptr = (void*)&edge_capture_key;
  8004f8:	d0a6ea04 	addi	r2,gp,-25688
  8004fc:	e0bfff15 	stw	r2,-4(fp)
	*(key_ptr + 2) = 0xF;
  800500:	d0a00217 	ldw	r2,-32760(gp)
  800504:	10c00204 	addi	r3,r2,8
  800508:	008003c4 	movi	r2,15
  80050c:	18800015 	stw	r2,0(r3)
	alt_irq_register(KEY_IRQ,edge_capture_key_ptr,handle_key_interrupt);
  800510:	01000044 	movi	r4,1
  800514:	e17fff17 	ldw	r5,-4(fp)
  800518:	01802034 	movhi	r6,128
  80051c:	31814e04 	addi	r6,r6,1336
  800520:	080339c0 	call	80339c <alt_irq_register>
}
  800524:	e037883a 	mov	sp,fp
  800528:	dfc00117 	ldw	ra,4(sp)
  80052c:	df000017 	ldw	fp,0(sp)
  800530:	dec00204 	addi	sp,sp,8
  800534:	f800283a 	ret

00800538 <handle_key_interrupt>:
void handle_key_interrupt(void* context , alt_u32 id){
  800538:	defffd04 	addi	sp,sp,-12
  80053c:	df000215 	stw	fp,8(sp)
  800540:	df000204 	addi	fp,sp,8
  800544:	e13ffe15 	stw	r4,-8(fp)
  800548:	e17fff15 	stw	r5,-4(fp)
	press_key = *(key_ptr +3);
  80054c:	d0a00217 	ldw	r2,-32760(gp)
  800550:	10800304 	addi	r2,r2,12
  800554:	10800017 	ldw	r2,0(r2)
  800558:	d0a6eb15 	stw	r2,-25684(gp)
	if(press_key & 0x8){ //testing for key 3 if it is pressed
  80055c:	d0a6eb17 	ldw	r2,-25684(gp)
  800560:	1080020c 	andi	r2,r2,8
  800564:	1005003a 	cmpeq	r2,r2,zero
  800568:	1000071e 	bne	r2,zero,800588 <handle_key_interrupt+0x50>
		s = 0 ;
  80056c:	d026e615 	stw	zero,-25704(gp)
		m = 0;
  800570:	d026e815 	stw	zero,-25696(gp)
        StartStop = 0;
  800574:	d0200505 	stb	zero,-32748(gp)
		*(key_ptr + 3) = 0;
  800578:	d0a00217 	ldw	r2,-32760(gp)
  80057c:	10800304 	addi	r2,r2,12
  800580:	10000015 	stw	zero,0(r2)
		return;
  800584:	00001e06 	br	800600 <handle_key_interrupt+0xc8>
	}
	if(press_key & 0x4){ //testing for key 2 if it is pressed
  800588:	d0a6eb17 	ldw	r2,-25684(gp)
  80058c:	1080010c 	andi	r2,r2,4
  800590:	1005003a 	cmpeq	r2,r2,zero
  800594:	1000071e 	bne	r2,zero,8005b4 <handle_key_interrupt+0x7c>
		StartStop ^= 1;
  800598:	d0a00503 	ldbu	r2,-32748(gp)
  80059c:	1080005c 	xori	r2,r2,1
  8005a0:	d0a00505 	stb	r2,-32748(gp)
		*(key_ptr + 3) = 0;
  8005a4:	d0a00217 	ldw	r2,-32760(gp)
  8005a8:	10800304 	addi	r2,r2,12
  8005ac:	10000015 	stw	zero,0(r2)
		return;
  8005b0:	00001306 	br	800600 <handle_key_interrupt+0xc8>
	}
	if(press_key & 0x2){ //testing for key 1 if it is pressed
  8005b4:	d0a6eb17 	ldw	r2,-25684(gp)
  8005b8:	1080008c 	andi	r2,r2,2
  8005bc:	1005003a 	cmpeq	r2,r2,zero
  8005c0:	1000071e 	bne	r2,zero,8005e0 <handle_key_interrupt+0xa8>
		mode ^= 1;
  8005c4:	d0a00543 	ldbu	r2,-32747(gp)
  8005c8:	1080005c 	xori	r2,r2,1
  8005cc:	d0a00545 	stb	r2,-32747(gp)
		*(key_ptr + 3) = 0;
  8005d0:	d0a00217 	ldw	r2,-32760(gp)
  8005d4:	10800304 	addi	r2,r2,12
  8005d8:	10000015 	stw	zero,0(r2)
		return;
  8005dc:	00000806 	br	800600 <handle_key_interrupt+0xc8>
	}
	if(press_key & 0x1){ //testing for key 0 if it is pressed
  8005e0:	d0a6eb17 	ldw	r2,-25684(gp)
  8005e4:	1080004c 	andi	r2,r2,1
  8005e8:	10803fcc 	andi	r2,r2,255
  8005ec:	1005003a 	cmpeq	r2,r2,zero
  8005f0:	1000031e 	bne	r2,zero,800600 <handle_key_interrupt+0xc8>

		*(key_ptr + 3) = 0;
  8005f4:	d0a00217 	ldw	r2,-32760(gp)
  8005f8:	10800304 	addi	r2,r2,12
  8005fc:	10000015 	stw	zero,0(r2)
		return;
	}
}
  800600:	e037883a 	mov	sp,fp
  800604:	df000017 	ldw	fp,0(sp)
  800608:	dec00104 	addi	sp,sp,4
  80060c:	f800283a 	ret

00800610 <udivmodsi4>:
  800610:	29001b2e 	bgeu	r5,r4,800680 <udivmodsi4+0x70>
  800614:	28001a16 	blt	r5,zero,800680 <udivmodsi4+0x70>
  800618:	00800044 	movi	r2,1
  80061c:	0007883a 	mov	r3,zero
  800620:	01c007c4 	movi	r7,31
  800624:	00000306 	br	800634 <udivmodsi4+0x24>
  800628:	19c01326 	beq	r3,r7,800678 <udivmodsi4+0x68>
  80062c:	18c00044 	addi	r3,r3,1
  800630:	28000416 	blt	r5,zero,800644 <udivmodsi4+0x34>
  800634:	294b883a 	add	r5,r5,r5
  800638:	1085883a 	add	r2,r2,r2
  80063c:	293ffa36 	bltu	r5,r4,800628 <udivmodsi4+0x18>
  800640:	10000d26 	beq	r2,zero,800678 <udivmodsi4+0x68>
  800644:	0007883a 	mov	r3,zero
  800648:	21400236 	bltu	r4,r5,800654 <udivmodsi4+0x44>
  80064c:	2149c83a 	sub	r4,r4,r5
  800650:	1886b03a 	or	r3,r3,r2
  800654:	1004d07a 	srli	r2,r2,1
  800658:	280ad07a 	srli	r5,r5,1
  80065c:	103ffa1e 	bne	r2,zero,800648 <udivmodsi4+0x38>
  800660:	30000226 	beq	r6,zero,80066c <udivmodsi4+0x5c>
  800664:	2005883a 	mov	r2,r4
  800668:	f800283a 	ret
  80066c:	1809883a 	mov	r4,r3
  800670:	2005883a 	mov	r2,r4
  800674:	f800283a 	ret
  800678:	0007883a 	mov	r3,zero
  80067c:	003ff806 	br	800660 <udivmodsi4+0x50>
  800680:	00800044 	movi	r2,1
  800684:	0007883a 	mov	r3,zero
  800688:	003fef06 	br	800648 <udivmodsi4+0x38>

0080068c <__divsi3>:
  80068c:	defffe04 	addi	sp,sp,-8
  800690:	dc000015 	stw	r16,0(sp)
  800694:	dfc00115 	stw	ra,4(sp)
  800698:	0021883a 	mov	r16,zero
  80069c:	20000c16 	blt	r4,zero,8006d0 <__divsi3+0x44>
  8006a0:	000d883a 	mov	r6,zero
  8006a4:	28000e16 	blt	r5,zero,8006e0 <__divsi3+0x54>
  8006a8:	08006100 	call	800610 <udivmodsi4>
  8006ac:	1007883a 	mov	r3,r2
  8006b0:	8005003a 	cmpeq	r2,r16,zero
  8006b4:	1000011e 	bne	r2,zero,8006bc <__divsi3+0x30>
  8006b8:	00c7c83a 	sub	r3,zero,r3
  8006bc:	1805883a 	mov	r2,r3
  8006c0:	dfc00117 	ldw	ra,4(sp)
  8006c4:	dc000017 	ldw	r16,0(sp)
  8006c8:	dec00204 	addi	sp,sp,8
  8006cc:	f800283a 	ret
  8006d0:	0109c83a 	sub	r4,zero,r4
  8006d4:	04000044 	movi	r16,1
  8006d8:	000d883a 	mov	r6,zero
  8006dc:	283ff20e 	bge	r5,zero,8006a8 <__divsi3+0x1c>
  8006e0:	014bc83a 	sub	r5,zero,r5
  8006e4:	8021003a 	cmpeq	r16,r16,zero
  8006e8:	003fef06 	br	8006a8 <__divsi3+0x1c>

008006ec <__modsi3>:
  8006ec:	deffff04 	addi	sp,sp,-4
  8006f0:	dfc00015 	stw	ra,0(sp)
  8006f4:	01800044 	movi	r6,1
  8006f8:	2807883a 	mov	r3,r5
  8006fc:	20000416 	blt	r4,zero,800710 <__modsi3+0x24>
  800700:	28000c16 	blt	r5,zero,800734 <__modsi3+0x48>
  800704:	dfc00017 	ldw	ra,0(sp)
  800708:	dec00104 	addi	sp,sp,4
  80070c:	08006101 	jmpi	800610 <udivmodsi4>
  800710:	0109c83a 	sub	r4,zero,r4
  800714:	28000b16 	blt	r5,zero,800744 <__modsi3+0x58>
  800718:	180b883a 	mov	r5,r3
  80071c:	01800044 	movi	r6,1
  800720:	08006100 	call	800610 <udivmodsi4>
  800724:	0085c83a 	sub	r2,zero,r2
  800728:	dfc00017 	ldw	ra,0(sp)
  80072c:	dec00104 	addi	sp,sp,4
  800730:	f800283a 	ret
  800734:	014bc83a 	sub	r5,zero,r5
  800738:	dfc00017 	ldw	ra,0(sp)
  80073c:	dec00104 	addi	sp,sp,4
  800740:	08006101 	jmpi	800610 <udivmodsi4>
  800744:	0147c83a 	sub	r3,zero,r5
  800748:	003ff306 	br	800718 <__modsi3+0x2c>

0080074c <__udivsi3>:
  80074c:	000d883a 	mov	r6,zero
  800750:	08006101 	jmpi	800610 <udivmodsi4>

00800754 <__umodsi3>:
  800754:	01800044 	movi	r6,1
  800758:	08006101 	jmpi	800610 <udivmodsi4>

0080075c <_puts_r>:
  80075c:	defff604 	addi	sp,sp,-40
  800760:	dc400715 	stw	r17,28(sp)
  800764:	2023883a 	mov	r17,r4
  800768:	2809883a 	mov	r4,r5
  80076c:	dfc00915 	stw	ra,36(sp)
  800770:	dcc00815 	stw	r19,32(sp)
  800774:	2827883a 	mov	r19,r5
  800778:	08008100 	call	800810 <strlen>
  80077c:	89400217 	ldw	r5,8(r17)
  800780:	00c02034 	movhi	r3,128
  800784:	18d69504 	addi	r3,r3,23124
  800788:	01c00044 	movi	r7,1
  80078c:	12000044 	addi	r8,r2,1
  800790:	d8c00515 	stw	r3,20(sp)
  800794:	d9c00615 	stw	r7,24(sp)
  800798:	d8c00304 	addi	r3,sp,12
  80079c:	01c00084 	movi	r7,2
  8007a0:	8809883a 	mov	r4,r17
  8007a4:	d80d883a 	mov	r6,sp
  8007a8:	d8c00015 	stw	r3,0(sp)
  8007ac:	dcc00315 	stw	r19,12(sp)
  8007b0:	da000215 	stw	r8,8(sp)
  8007b4:	d9c00115 	stw	r7,4(sp)
  8007b8:	d8800415 	stw	r2,16(sp)
  8007bc:	08008840 	call	800884 <__sfvwrite_r>
  8007c0:	00ffffc4 	movi	r3,-1
  8007c4:	10000626 	beq	r2,zero,8007e0 <_puts_r+0x84>
  8007c8:	1805883a 	mov	r2,r3
  8007cc:	dfc00917 	ldw	ra,36(sp)
  8007d0:	dcc00817 	ldw	r19,32(sp)
  8007d4:	dc400717 	ldw	r17,28(sp)
  8007d8:	dec00a04 	addi	sp,sp,40
  8007dc:	f800283a 	ret
  8007e0:	00c00284 	movi	r3,10
  8007e4:	1805883a 	mov	r2,r3
  8007e8:	dfc00917 	ldw	ra,36(sp)
  8007ec:	dcc00817 	ldw	r19,32(sp)
  8007f0:	dc400717 	ldw	r17,28(sp)
  8007f4:	dec00a04 	addi	sp,sp,40
  8007f8:	f800283a 	ret

008007fc <puts>:
  8007fc:	00802034 	movhi	r2,128
  800800:	109d7d04 	addi	r2,r2,30196
  800804:	200b883a 	mov	r5,r4
  800808:	11000017 	ldw	r4,0(r2)
  80080c:	080075c1 	jmpi	80075c <_puts_r>

00800810 <strlen>:
  800810:	208000cc 	andi	r2,r4,3
  800814:	2011883a 	mov	r8,r4
  800818:	1000161e 	bne	r2,zero,800874 <strlen+0x64>
  80081c:	20c00017 	ldw	r3,0(r4)
  800820:	017fbff4 	movhi	r5,65279
  800824:	297fbfc4 	addi	r5,r5,-257
  800828:	01e02074 	movhi	r7,32897
  80082c:	39e02004 	addi	r7,r7,-32640
  800830:	1945883a 	add	r2,r3,r5
  800834:	11c4703a 	and	r2,r2,r7
  800838:	00c6303a 	nor	r3,zero,r3
  80083c:	1886703a 	and	r3,r3,r2
  800840:	18000c1e 	bne	r3,zero,800874 <strlen+0x64>
  800844:	280d883a 	mov	r6,r5
  800848:	380b883a 	mov	r5,r7
  80084c:	21000104 	addi	r4,r4,4
  800850:	20800017 	ldw	r2,0(r4)
  800854:	1187883a 	add	r3,r2,r6
  800858:	1946703a 	and	r3,r3,r5
  80085c:	0084303a 	nor	r2,zero,r2
  800860:	10c4703a 	and	r2,r2,r3
  800864:	103ff926 	beq	r2,zero,80084c <strlen+0x3c>
  800868:	20800007 	ldb	r2,0(r4)
  80086c:	10000326 	beq	r2,zero,80087c <strlen+0x6c>
  800870:	21000044 	addi	r4,r4,1
  800874:	20800007 	ldb	r2,0(r4)
  800878:	103ffd1e 	bne	r2,zero,800870 <strlen+0x60>
  80087c:	2205c83a 	sub	r2,r4,r8
  800880:	f800283a 	ret

00800884 <__sfvwrite_r>:
  800884:	30800217 	ldw	r2,8(r6)
  800888:	defff504 	addi	sp,sp,-44
  80088c:	df000915 	stw	fp,36(sp)
  800890:	dd800715 	stw	r22,28(sp)
  800894:	dc800315 	stw	r18,12(sp)
  800898:	dfc00a15 	stw	ra,40(sp)
  80089c:	ddc00815 	stw	r23,32(sp)
  8008a0:	dd400615 	stw	r21,24(sp)
  8008a4:	dd000515 	stw	r20,20(sp)
  8008a8:	dcc00415 	stw	r19,16(sp)
  8008ac:	dc400215 	stw	r17,8(sp)
  8008b0:	dc000115 	stw	r16,4(sp)
  8008b4:	302d883a 	mov	r22,r6
  8008b8:	2039883a 	mov	fp,r4
  8008bc:	2825883a 	mov	r18,r5
  8008c0:	10001c26 	beq	r2,zero,800934 <__sfvwrite_r+0xb0>
  8008c4:	29c0030b 	ldhu	r7,12(r5)
  8008c8:	3880020c 	andi	r2,r7,8
  8008cc:	10002726 	beq	r2,zero,80096c <__sfvwrite_r+0xe8>
  8008d0:	28800417 	ldw	r2,16(r5)
  8008d4:	10002526 	beq	r2,zero,80096c <__sfvwrite_r+0xe8>
  8008d8:	3880008c 	andi	r2,r7,2
  8008dc:	b5400017 	ldw	r21,0(r22)
  8008e0:	10002826 	beq	r2,zero,800984 <__sfvwrite_r+0x100>
  8008e4:	0021883a 	mov	r16,zero
  8008e8:	0023883a 	mov	r17,zero
  8008ec:	880d883a 	mov	r6,r17
  8008f0:	e009883a 	mov	r4,fp
  8008f4:	00810004 	movi	r2,1024
  8008f8:	80006e26 	beq	r16,zero,800ab4 <__sfvwrite_r+0x230>
  8008fc:	800f883a 	mov	r7,r16
  800900:	91400717 	ldw	r5,28(r18)
  800904:	1400012e 	bgeu	r2,r16,80090c <__sfvwrite_r+0x88>
  800908:	100f883a 	mov	r7,r2
  80090c:	90c00917 	ldw	r3,36(r18)
  800910:	183ee83a 	callr	r3
  800914:	1007883a 	mov	r3,r2
  800918:	80a1c83a 	sub	r16,r16,r2
  80091c:	88a3883a 	add	r17,r17,r2
  800920:	00806d0e 	bge	zero,r2,800ad8 <__sfvwrite_r+0x254>
  800924:	b0800217 	ldw	r2,8(r22)
  800928:	10c5c83a 	sub	r2,r2,r3
  80092c:	b0800215 	stw	r2,8(r22)
  800930:	103fee1e 	bne	r2,zero,8008ec <__sfvwrite_r+0x68>
  800934:	0009883a 	mov	r4,zero
  800938:	2005883a 	mov	r2,r4
  80093c:	dfc00a17 	ldw	ra,40(sp)
  800940:	df000917 	ldw	fp,36(sp)
  800944:	ddc00817 	ldw	r23,32(sp)
  800948:	dd800717 	ldw	r22,28(sp)
  80094c:	dd400617 	ldw	r21,24(sp)
  800950:	dd000517 	ldw	r20,20(sp)
  800954:	dcc00417 	ldw	r19,16(sp)
  800958:	dc800317 	ldw	r18,12(sp)
  80095c:	dc400217 	ldw	r17,8(sp)
  800960:	dc000117 	ldw	r16,4(sp)
  800964:	dec00b04 	addi	sp,sp,44
  800968:	f800283a 	ret
  80096c:	0801d280 	call	801d28 <__swsetup_r>
  800970:	1000e41e 	bne	r2,zero,800d04 <__sfvwrite_r+0x480>
  800974:	91c0030b 	ldhu	r7,12(r18)
  800978:	b5400017 	ldw	r21,0(r22)
  80097c:	3880008c 	andi	r2,r7,2
  800980:	103fd81e 	bne	r2,zero,8008e4 <__sfvwrite_r+0x60>
  800984:	3880004c 	andi	r2,r7,1
  800988:	1005003a 	cmpeq	r2,r2,zero
  80098c:	10005726 	beq	r2,zero,800aec <__sfvwrite_r+0x268>
  800990:	0029883a 	mov	r20,zero
  800994:	002f883a 	mov	r23,zero
  800998:	a0004226 	beq	r20,zero,800aa4 <__sfvwrite_r+0x220>
  80099c:	3880800c 	andi	r2,r7,512
  8009a0:	94000217 	ldw	r16,8(r18)
  8009a4:	10008b26 	beq	r2,zero,800bd4 <__sfvwrite_r+0x350>
  8009a8:	800d883a 	mov	r6,r16
  8009ac:	a400a536 	bltu	r20,r16,800c44 <__sfvwrite_r+0x3c0>
  8009b0:	3881200c 	andi	r2,r7,1152
  8009b4:	10002726 	beq	r2,zero,800a54 <__sfvwrite_r+0x1d0>
  8009b8:	90800517 	ldw	r2,20(r18)
  8009bc:	92000417 	ldw	r8,16(r18)
  8009c0:	91400017 	ldw	r5,0(r18)
  8009c4:	1087883a 	add	r3,r2,r2
  8009c8:	1887883a 	add	r3,r3,r2
  8009cc:	1808d7fa 	srli	r4,r3,31
  8009d0:	2a21c83a 	sub	r16,r5,r8
  8009d4:	80800044 	addi	r2,r16,1
  8009d8:	20c9883a 	add	r4,r4,r3
  8009dc:	2027d07a 	srai	r19,r4,1
  8009e0:	a085883a 	add	r2,r20,r2
  8009e4:	980d883a 	mov	r6,r19
  8009e8:	9880022e 	bgeu	r19,r2,8009f4 <__sfvwrite_r+0x170>
  8009ec:	1027883a 	mov	r19,r2
  8009f0:	100d883a 	mov	r6,r2
  8009f4:	3881000c 	andi	r2,r7,1024
  8009f8:	1000b826 	beq	r2,zero,800cdc <__sfvwrite_r+0x458>
  8009fc:	300b883a 	mov	r5,r6
  800a00:	e009883a 	mov	r4,fp
  800a04:	0800d200 	call	800d20 <_malloc_r>
  800a08:	10003126 	beq	r2,zero,800ad0 <__sfvwrite_r+0x24c>
  800a0c:	91400417 	ldw	r5,16(r18)
  800a10:	1009883a 	mov	r4,r2
  800a14:	800d883a 	mov	r6,r16
  800a18:	1023883a 	mov	r17,r2
  800a1c:	08015440 	call	801544 <memcpy>
  800a20:	90c0030b 	ldhu	r3,12(r18)
  800a24:	00beffc4 	movi	r2,-1025
  800a28:	1886703a 	and	r3,r3,r2
  800a2c:	18c02014 	ori	r3,r3,128
  800a30:	90c0030d 	sth	r3,12(r18)
  800a34:	9c07c83a 	sub	r3,r19,r16
  800a38:	8c05883a 	add	r2,r17,r16
  800a3c:	a00d883a 	mov	r6,r20
  800a40:	a021883a 	mov	r16,r20
  800a44:	90800015 	stw	r2,0(r18)
  800a48:	90c00215 	stw	r3,8(r18)
  800a4c:	94400415 	stw	r17,16(r18)
  800a50:	94c00515 	stw	r19,20(r18)
  800a54:	91000017 	ldw	r4,0(r18)
  800a58:	b80b883a 	mov	r5,r23
  800a5c:	a023883a 	mov	r17,r20
  800a60:	08015e40 	call	8015e4 <memmove>
  800a64:	90c00217 	ldw	r3,8(r18)
  800a68:	90800017 	ldw	r2,0(r18)
  800a6c:	a027883a 	mov	r19,r20
  800a70:	1c07c83a 	sub	r3,r3,r16
  800a74:	1405883a 	add	r2,r2,r16
  800a78:	90c00215 	stw	r3,8(r18)
  800a7c:	a021883a 	mov	r16,r20
  800a80:	90800015 	stw	r2,0(r18)
  800a84:	b0800217 	ldw	r2,8(r22)
  800a88:	1405c83a 	sub	r2,r2,r16
  800a8c:	b0800215 	stw	r2,8(r22)
  800a90:	103fa826 	beq	r2,zero,800934 <__sfvwrite_r+0xb0>
  800a94:	a469c83a 	sub	r20,r20,r17
  800a98:	91c0030b 	ldhu	r7,12(r18)
  800a9c:	bcef883a 	add	r23,r23,r19
  800aa0:	a03fbe1e 	bne	r20,zero,80099c <__sfvwrite_r+0x118>
  800aa4:	adc00017 	ldw	r23,0(r21)
  800aa8:	ad000117 	ldw	r20,4(r21)
  800aac:	ad400204 	addi	r21,r21,8
  800ab0:	003fb906 	br	800998 <__sfvwrite_r+0x114>
  800ab4:	ac400017 	ldw	r17,0(r21)
  800ab8:	ac000117 	ldw	r16,4(r21)
  800abc:	ad400204 	addi	r21,r21,8
  800ac0:	003f8a06 	br	8008ec <__sfvwrite_r+0x68>
  800ac4:	91400417 	ldw	r5,16(r18)
  800ac8:	e009883a 	mov	r4,fp
  800acc:	08024b40 	call	8024b4 <_free_r>
  800ad0:	00800304 	movi	r2,12
  800ad4:	e0800015 	stw	r2,0(fp)
  800ad8:	9080030b 	ldhu	r2,12(r18)
  800adc:	013fffc4 	movi	r4,-1
  800ae0:	10801014 	ori	r2,r2,64
  800ae4:	9080030d 	sth	r2,12(r18)
  800ae8:	003f9306 	br	800938 <__sfvwrite_r+0xb4>
  800aec:	0027883a 	mov	r19,zero
  800af0:	002f883a 	mov	r23,zero
  800af4:	d8000015 	stw	zero,0(sp)
  800af8:	0029883a 	mov	r20,zero
  800afc:	98001e26 	beq	r19,zero,800b78 <__sfvwrite_r+0x2f4>
  800b00:	d8c00017 	ldw	r3,0(sp)
  800b04:	1804c03a 	cmpne	r2,r3,zero
  800b08:	10005e26 	beq	r2,zero,800c84 <__sfvwrite_r+0x400>
  800b0c:	9821883a 	mov	r16,r19
  800b10:	a4c0012e 	bgeu	r20,r19,800b18 <__sfvwrite_r+0x294>
  800b14:	a021883a 	mov	r16,r20
  800b18:	91000017 	ldw	r4,0(r18)
  800b1c:	90800417 	ldw	r2,16(r18)
  800b20:	91800217 	ldw	r6,8(r18)
  800b24:	91c00517 	ldw	r7,20(r18)
  800b28:	1100022e 	bgeu	r2,r4,800b34 <__sfvwrite_r+0x2b0>
  800b2c:	31e3883a 	add	r17,r6,r7
  800b30:	8c001616 	blt	r17,r16,800b8c <__sfvwrite_r+0x308>
  800b34:	81c03816 	blt	r16,r7,800c18 <__sfvwrite_r+0x394>
  800b38:	90c00917 	ldw	r3,36(r18)
  800b3c:	91400717 	ldw	r5,28(r18)
  800b40:	e009883a 	mov	r4,fp
  800b44:	b80d883a 	mov	r6,r23
  800b48:	183ee83a 	callr	r3
  800b4c:	1023883a 	mov	r17,r2
  800b50:	00bfe10e 	bge	zero,r2,800ad8 <__sfvwrite_r+0x254>
  800b54:	a469c83a 	sub	r20,r20,r17
  800b58:	a0001826 	beq	r20,zero,800bbc <__sfvwrite_r+0x338>
  800b5c:	b0800217 	ldw	r2,8(r22)
  800b60:	1445c83a 	sub	r2,r2,r17
  800b64:	b0800215 	stw	r2,8(r22)
  800b68:	103f7226 	beq	r2,zero,800934 <__sfvwrite_r+0xb0>
  800b6c:	9c67c83a 	sub	r19,r19,r17
  800b70:	bc6f883a 	add	r23,r23,r17
  800b74:	983fe21e 	bne	r19,zero,800b00 <__sfvwrite_r+0x27c>
  800b78:	adc00017 	ldw	r23,0(r21)
  800b7c:	acc00117 	ldw	r19,4(r21)
  800b80:	ad400204 	addi	r21,r21,8
  800b84:	d8000015 	stw	zero,0(sp)
  800b88:	003fdc06 	br	800afc <__sfvwrite_r+0x278>
  800b8c:	b80b883a 	mov	r5,r23
  800b90:	880d883a 	mov	r6,r17
  800b94:	08015e40 	call	8015e4 <memmove>
  800b98:	90c00017 	ldw	r3,0(r18)
  800b9c:	e009883a 	mov	r4,fp
  800ba0:	900b883a 	mov	r5,r18
  800ba4:	1c47883a 	add	r3,r3,r17
  800ba8:	90c00015 	stw	r3,0(r18)
  800bac:	0801e640 	call	801e64 <_fflush_r>
  800bb0:	103fc91e 	bne	r2,zero,800ad8 <__sfvwrite_r+0x254>
  800bb4:	a469c83a 	sub	r20,r20,r17
  800bb8:	a03fe81e 	bne	r20,zero,800b5c <__sfvwrite_r+0x2d8>
  800bbc:	e009883a 	mov	r4,fp
  800bc0:	900b883a 	mov	r5,r18
  800bc4:	0801e640 	call	801e64 <_fflush_r>
  800bc8:	103fc31e 	bne	r2,zero,800ad8 <__sfvwrite_r+0x254>
  800bcc:	d8000015 	stw	zero,0(sp)
  800bd0:	003fe206 	br	800b5c <__sfvwrite_r+0x2d8>
  800bd4:	91000017 	ldw	r4,0(r18)
  800bd8:	90800417 	ldw	r2,16(r18)
  800bdc:	1100022e 	bgeu	r2,r4,800be8 <__sfvwrite_r+0x364>
  800be0:	8023883a 	mov	r17,r16
  800be4:	85003136 	bltu	r16,r20,800cac <__sfvwrite_r+0x428>
  800be8:	91c00517 	ldw	r7,20(r18)
  800bec:	a1c01836 	bltu	r20,r7,800c50 <__sfvwrite_r+0x3cc>
  800bf0:	90c00917 	ldw	r3,36(r18)
  800bf4:	91400717 	ldw	r5,28(r18)
  800bf8:	e009883a 	mov	r4,fp
  800bfc:	b80d883a 	mov	r6,r23
  800c00:	183ee83a 	callr	r3
  800c04:	1021883a 	mov	r16,r2
  800c08:	00bfb30e 	bge	zero,r2,800ad8 <__sfvwrite_r+0x254>
  800c0c:	1023883a 	mov	r17,r2
  800c10:	1027883a 	mov	r19,r2
  800c14:	003f9b06 	br	800a84 <__sfvwrite_r+0x200>
  800c18:	b80b883a 	mov	r5,r23
  800c1c:	800d883a 	mov	r6,r16
  800c20:	08015e40 	call	8015e4 <memmove>
  800c24:	90c00217 	ldw	r3,8(r18)
  800c28:	90800017 	ldw	r2,0(r18)
  800c2c:	8023883a 	mov	r17,r16
  800c30:	1c07c83a 	sub	r3,r3,r16
  800c34:	1405883a 	add	r2,r2,r16
  800c38:	90c00215 	stw	r3,8(r18)
  800c3c:	90800015 	stw	r2,0(r18)
  800c40:	003fc406 	br	800b54 <__sfvwrite_r+0x2d0>
  800c44:	a00d883a 	mov	r6,r20
  800c48:	a021883a 	mov	r16,r20
  800c4c:	003f8106 	br	800a54 <__sfvwrite_r+0x1d0>
  800c50:	b80b883a 	mov	r5,r23
  800c54:	a00d883a 	mov	r6,r20
  800c58:	08015e40 	call	8015e4 <memmove>
  800c5c:	90c00217 	ldw	r3,8(r18)
  800c60:	90800017 	ldw	r2,0(r18)
  800c64:	a021883a 	mov	r16,r20
  800c68:	1d07c83a 	sub	r3,r3,r20
  800c6c:	1505883a 	add	r2,r2,r20
  800c70:	a023883a 	mov	r17,r20
  800c74:	a027883a 	mov	r19,r20
  800c78:	90c00215 	stw	r3,8(r18)
  800c7c:	90800015 	stw	r2,0(r18)
  800c80:	003f8006 	br	800a84 <__sfvwrite_r+0x200>
  800c84:	b809883a 	mov	r4,r23
  800c88:	01400284 	movi	r5,10
  800c8c:	980d883a 	mov	r6,r19
  800c90:	08014600 	call	801460 <memchr>
  800c94:	10001726 	beq	r2,zero,800cf4 <__sfvwrite_r+0x470>
  800c98:	15c5c83a 	sub	r2,r2,r23
  800c9c:	15000044 	addi	r20,r2,1
  800ca0:	00800044 	movi	r2,1
  800ca4:	d8800015 	stw	r2,0(sp)
  800ca8:	003f9806 	br	800b0c <__sfvwrite_r+0x288>
  800cac:	b80b883a 	mov	r5,r23
  800cb0:	800d883a 	mov	r6,r16
  800cb4:	08015e40 	call	8015e4 <memmove>
  800cb8:	90c00017 	ldw	r3,0(r18)
  800cbc:	e009883a 	mov	r4,fp
  800cc0:	900b883a 	mov	r5,r18
  800cc4:	1c07883a 	add	r3,r3,r16
  800cc8:	90c00015 	stw	r3,0(r18)
  800ccc:	8027883a 	mov	r19,r16
  800cd0:	0801e640 	call	801e64 <_fflush_r>
  800cd4:	103f6b26 	beq	r2,zero,800a84 <__sfvwrite_r+0x200>
  800cd8:	003f7f06 	br	800ad8 <__sfvwrite_r+0x254>
  800cdc:	400b883a 	mov	r5,r8
  800ce0:	e009883a 	mov	r4,fp
  800ce4:	08016c40 	call	8016c4 <_realloc_r>
  800ce8:	103f7626 	beq	r2,zero,800ac4 <__sfvwrite_r+0x240>
  800cec:	1023883a 	mov	r17,r2
  800cf0:	003f5006 	br	800a34 <__sfvwrite_r+0x1b0>
  800cf4:	00c00044 	movi	r3,1
  800cf8:	9d000044 	addi	r20,r19,1
  800cfc:	d8c00015 	stw	r3,0(sp)
  800d00:	003f8206 	br	800b0c <__sfvwrite_r+0x288>
  800d04:	9080030b 	ldhu	r2,12(r18)
  800d08:	00c00244 	movi	r3,9
  800d0c:	013fffc4 	movi	r4,-1
  800d10:	10801014 	ori	r2,r2,64
  800d14:	9080030d 	sth	r2,12(r18)
  800d18:	e0c00015 	stw	r3,0(fp)
  800d1c:	003f0606 	br	800938 <__sfvwrite_r+0xb4>

00800d20 <_malloc_r>:
  800d20:	defff604 	addi	sp,sp,-40
  800d24:	28c002c4 	addi	r3,r5,11
  800d28:	00800584 	movi	r2,22
  800d2c:	dc800215 	stw	r18,8(sp)
  800d30:	dfc00915 	stw	ra,36(sp)
  800d34:	df000815 	stw	fp,32(sp)
  800d38:	ddc00715 	stw	r23,28(sp)
  800d3c:	dd800615 	stw	r22,24(sp)
  800d40:	dd400515 	stw	r21,20(sp)
  800d44:	dd000415 	stw	r20,16(sp)
  800d48:	dcc00315 	stw	r19,12(sp)
  800d4c:	dc400115 	stw	r17,4(sp)
  800d50:	dc000015 	stw	r16,0(sp)
  800d54:	2025883a 	mov	r18,r4
  800d58:	10c01236 	bltu	r2,r3,800da4 <_malloc_r+0x84>
  800d5c:	04400404 	movi	r17,16
  800d60:	8940142e 	bgeu	r17,r5,800db4 <_malloc_r+0x94>
  800d64:	00800304 	movi	r2,12
  800d68:	0007883a 	mov	r3,zero
  800d6c:	90800015 	stw	r2,0(r18)
  800d70:	1805883a 	mov	r2,r3
  800d74:	dfc00917 	ldw	ra,36(sp)
  800d78:	df000817 	ldw	fp,32(sp)
  800d7c:	ddc00717 	ldw	r23,28(sp)
  800d80:	dd800617 	ldw	r22,24(sp)
  800d84:	dd400517 	ldw	r21,20(sp)
  800d88:	dd000417 	ldw	r20,16(sp)
  800d8c:	dcc00317 	ldw	r19,12(sp)
  800d90:	dc800217 	ldw	r18,8(sp)
  800d94:	dc400117 	ldw	r17,4(sp)
  800d98:	dc000017 	ldw	r16,0(sp)
  800d9c:	dec00a04 	addi	sp,sp,40
  800da0:	f800283a 	ret
  800da4:	00bffe04 	movi	r2,-8
  800da8:	18a2703a 	and	r17,r3,r2
  800dac:	883fed16 	blt	r17,zero,800d64 <_malloc_r+0x44>
  800db0:	897fec36 	bltu	r17,r5,800d64 <_malloc_r+0x44>
  800db4:	9009883a 	mov	r4,r18
  800db8:	080392c0 	call	80392c <__malloc_lock>
  800dbc:	00807dc4 	movi	r2,503
  800dc0:	14402b2e 	bgeu	r2,r17,800e70 <_malloc_r+0x150>
  800dc4:	8806d27a 	srli	r3,r17,9
  800dc8:	18003f1e 	bne	r3,zero,800ec8 <_malloc_r+0x1a8>
  800dcc:	880cd0fa 	srli	r6,r17,3
  800dd0:	300490fa 	slli	r2,r6,3
  800dd4:	02c02034 	movhi	r11,128
  800dd8:	5ad7bc04 	addi	r11,r11,24304
  800ddc:	12cb883a 	add	r5,r2,r11
  800de0:	2c000317 	ldw	r16,12(r5)
  800de4:	580f883a 	mov	r7,r11
  800de8:	2c00041e 	bne	r5,r16,800dfc <_malloc_r+0xdc>
  800dec:	00000a06 	br	800e18 <_malloc_r+0xf8>
  800df0:	1800860e 	bge	r3,zero,80100c <_malloc_r+0x2ec>
  800df4:	84000317 	ldw	r16,12(r16)
  800df8:	2c000726 	beq	r5,r16,800e18 <_malloc_r+0xf8>
  800dfc:	80800117 	ldw	r2,4(r16)
  800e00:	00ffff04 	movi	r3,-4
  800e04:	10c8703a 	and	r4,r2,r3
  800e08:	2447c83a 	sub	r3,r4,r17
  800e0c:	008003c4 	movi	r2,15
  800e10:	10fff70e 	bge	r2,r3,800df0 <_malloc_r+0xd0>
  800e14:	31bfffc4 	addi	r6,r6,-1
  800e18:	32400044 	addi	r9,r6,1
  800e1c:	02802034 	movhi	r10,128
  800e20:	5297be04 	addi	r10,r10,24312
  800e24:	54000217 	ldw	r16,8(r10)
  800e28:	8280a026 	beq	r16,r10,8010ac <_malloc_r+0x38c>
  800e2c:	80800117 	ldw	r2,4(r16)
  800e30:	00ffff04 	movi	r3,-4
  800e34:	10ca703a 	and	r5,r2,r3
  800e38:	2c4dc83a 	sub	r6,r5,r17
  800e3c:	008003c4 	movi	r2,15
  800e40:	11808316 	blt	r2,r6,801050 <_malloc_r+0x330>
  800e44:	52800315 	stw	r10,12(r10)
  800e48:	52800215 	stw	r10,8(r10)
  800e4c:	30002916 	blt	r6,zero,800ef4 <_malloc_r+0x1d4>
  800e50:	8147883a 	add	r3,r16,r5
  800e54:	18800117 	ldw	r2,4(r3)
  800e58:	9009883a 	mov	r4,r18
  800e5c:	10800054 	ori	r2,r2,1
  800e60:	18800115 	stw	r2,4(r3)
  800e64:	080394c0 	call	80394c <__malloc_unlock>
  800e68:	80c00204 	addi	r3,r16,8
  800e6c:	003fc006 	br	800d70 <_malloc_r+0x50>
  800e70:	02c02034 	movhi	r11,128
  800e74:	5ad7bc04 	addi	r11,r11,24304
  800e78:	8ac5883a 	add	r2,r17,r11
  800e7c:	14000317 	ldw	r16,12(r2)
  800e80:	580f883a 	mov	r7,r11
  800e84:	8806d0fa 	srli	r3,r17,3
  800e88:	14006c26 	beq	r2,r16,80103c <_malloc_r+0x31c>
  800e8c:	80c00117 	ldw	r3,4(r16)
  800e90:	00bfff04 	movi	r2,-4
  800e94:	81800317 	ldw	r6,12(r16)
  800e98:	1886703a 	and	r3,r3,r2
  800e9c:	80c7883a 	add	r3,r16,r3
  800ea0:	18800117 	ldw	r2,4(r3)
  800ea4:	81400217 	ldw	r5,8(r16)
  800ea8:	9009883a 	mov	r4,r18
  800eac:	10800054 	ori	r2,r2,1
  800eb0:	18800115 	stw	r2,4(r3)
  800eb4:	31400215 	stw	r5,8(r6)
  800eb8:	29800315 	stw	r6,12(r5)
  800ebc:	080394c0 	call	80394c <__malloc_unlock>
  800ec0:	80c00204 	addi	r3,r16,8
  800ec4:	003faa06 	br	800d70 <_malloc_r+0x50>
  800ec8:	00800104 	movi	r2,4
  800ecc:	10c0052e 	bgeu	r2,r3,800ee4 <_malloc_r+0x1c4>
  800ed0:	00800504 	movi	r2,20
  800ed4:	10c07836 	bltu	r2,r3,8010b8 <_malloc_r+0x398>
  800ed8:	198016c4 	addi	r6,r3,91
  800edc:	300490fa 	slli	r2,r6,3
  800ee0:	003fbc06 	br	800dd4 <_malloc_r+0xb4>
  800ee4:	8804d1ba 	srli	r2,r17,6
  800ee8:	11800e04 	addi	r6,r2,56
  800eec:	300490fa 	slli	r2,r6,3
  800ef0:	003fb806 	br	800dd4 <_malloc_r+0xb4>
  800ef4:	00807fc4 	movi	r2,511
  800ef8:	1140bb36 	bltu	r2,r5,8011e8 <_malloc_r+0x4c8>
  800efc:	2806d0fa 	srli	r3,r5,3
  800f00:	573ffe04 	addi	fp,r10,-8
  800f04:	00800044 	movi	r2,1
  800f08:	180890fa 	slli	r4,r3,3
  800f0c:	1807d0ba 	srai	r3,r3,2
  800f10:	e1c00117 	ldw	r7,4(fp)
  800f14:	5909883a 	add	r4,r11,r4
  800f18:	21400217 	ldw	r5,8(r4)
  800f1c:	10c4983a 	sll	r2,r2,r3
  800f20:	81000315 	stw	r4,12(r16)
  800f24:	81400215 	stw	r5,8(r16)
  800f28:	388eb03a 	or	r7,r7,r2
  800f2c:	2c000315 	stw	r16,12(r5)
  800f30:	24000215 	stw	r16,8(r4)
  800f34:	e1c00115 	stw	r7,4(fp)
  800f38:	4807883a 	mov	r3,r9
  800f3c:	4800cd16 	blt	r9,zero,801274 <_malloc_r+0x554>
  800f40:	1807d0ba 	srai	r3,r3,2
  800f44:	00800044 	movi	r2,1
  800f48:	10c8983a 	sll	r4,r2,r3
  800f4c:	39004436 	bltu	r7,r4,801060 <_malloc_r+0x340>
  800f50:	21c4703a 	and	r2,r4,r7
  800f54:	10000a1e 	bne	r2,zero,800f80 <_malloc_r+0x260>
  800f58:	2109883a 	add	r4,r4,r4
  800f5c:	00bfff04 	movi	r2,-4
  800f60:	4884703a 	and	r2,r9,r2
  800f64:	3906703a 	and	r3,r7,r4
  800f68:	12400104 	addi	r9,r2,4
  800f6c:	1800041e 	bne	r3,zero,800f80 <_malloc_r+0x260>
  800f70:	2109883a 	add	r4,r4,r4
  800f74:	3904703a 	and	r2,r7,r4
  800f78:	4a400104 	addi	r9,r9,4
  800f7c:	103ffc26 	beq	r2,zero,800f70 <_malloc_r+0x250>
  800f80:	480490fa 	slli	r2,r9,3
  800f84:	4819883a 	mov	r12,r9
  800f88:	023fff04 	movi	r8,-4
  800f8c:	589b883a 	add	r13,r11,r2
  800f90:	6807883a 	mov	r3,r13
  800f94:	014003c4 	movi	r5,15
  800f98:	1c000317 	ldw	r16,12(r3)
  800f9c:	1c00041e 	bne	r3,r16,800fb0 <_malloc_r+0x290>
  800fa0:	0000a706 	br	801240 <_malloc_r+0x520>
  800fa4:	3000ab0e 	bge	r6,zero,801254 <_malloc_r+0x534>
  800fa8:	84000317 	ldw	r16,12(r16)
  800fac:	1c00a426 	beq	r3,r16,801240 <_malloc_r+0x520>
  800fb0:	80800117 	ldw	r2,4(r16)
  800fb4:	1204703a 	and	r2,r2,r8
  800fb8:	144dc83a 	sub	r6,r2,r17
  800fbc:	29bff90e 	bge	r5,r6,800fa4 <_malloc_r+0x284>
  800fc0:	81000317 	ldw	r4,12(r16)
  800fc4:	80c00217 	ldw	r3,8(r16)
  800fc8:	89400054 	ori	r5,r17,1
  800fcc:	8445883a 	add	r2,r16,r17
  800fd0:	20c00215 	stw	r3,8(r4)
  800fd4:	19000315 	stw	r4,12(r3)
  800fd8:	81400115 	stw	r5,4(r16)
  800fdc:	1187883a 	add	r3,r2,r6
  800fe0:	31000054 	ori	r4,r6,1
  800fe4:	50800315 	stw	r2,12(r10)
  800fe8:	50800215 	stw	r2,8(r10)
  800fec:	19800015 	stw	r6,0(r3)
  800ff0:	11000115 	stw	r4,4(r2)
  800ff4:	12800215 	stw	r10,8(r2)
  800ff8:	12800315 	stw	r10,12(r2)
  800ffc:	9009883a 	mov	r4,r18
  801000:	080394c0 	call	80394c <__malloc_unlock>
  801004:	80c00204 	addi	r3,r16,8
  801008:	003f5906 	br	800d70 <_malloc_r+0x50>
  80100c:	8109883a 	add	r4,r16,r4
  801010:	20800117 	ldw	r2,4(r4)
  801014:	80c00217 	ldw	r3,8(r16)
  801018:	81400317 	ldw	r5,12(r16)
  80101c:	10800054 	ori	r2,r2,1
  801020:	20800115 	stw	r2,4(r4)
  801024:	28c00215 	stw	r3,8(r5)
  801028:	19400315 	stw	r5,12(r3)
  80102c:	9009883a 	mov	r4,r18
  801030:	080394c0 	call	80394c <__malloc_unlock>
  801034:	80c00204 	addi	r3,r16,8
  801038:	003f4d06 	br	800d70 <_malloc_r+0x50>
  80103c:	80800204 	addi	r2,r16,8
  801040:	14000317 	ldw	r16,12(r2)
  801044:	143f911e 	bne	r2,r16,800e8c <_malloc_r+0x16c>
  801048:	1a400084 	addi	r9,r3,2
  80104c:	003f7306 	br	800e1c <_malloc_r+0xfc>
  801050:	88c00054 	ori	r3,r17,1
  801054:	8445883a 	add	r2,r16,r17
  801058:	80c00115 	stw	r3,4(r16)
  80105c:	003fdf06 	br	800fdc <_malloc_r+0x2bc>
  801060:	e4000217 	ldw	r16,8(fp)
  801064:	00bfff04 	movi	r2,-4
  801068:	80c00117 	ldw	r3,4(r16)
  80106c:	802d883a 	mov	r22,r16
  801070:	18aa703a 	and	r21,r3,r2
  801074:	ac401636 	bltu	r21,r17,8010d0 <_malloc_r+0x3b0>
  801078:	ac49c83a 	sub	r4,r21,r17
  80107c:	008003c4 	movi	r2,15
  801080:	1100130e 	bge	r2,r4,8010d0 <_malloc_r+0x3b0>
  801084:	88800054 	ori	r2,r17,1
  801088:	8447883a 	add	r3,r16,r17
  80108c:	80800115 	stw	r2,4(r16)
  801090:	20800054 	ori	r2,r4,1
  801094:	18800115 	stw	r2,4(r3)
  801098:	e0c00215 	stw	r3,8(fp)
  80109c:	9009883a 	mov	r4,r18
  8010a0:	080394c0 	call	80394c <__malloc_unlock>
  8010a4:	80c00204 	addi	r3,r16,8
  8010a8:	003f3106 	br	800d70 <_malloc_r+0x50>
  8010ac:	39c00117 	ldw	r7,4(r7)
  8010b0:	573ffe04 	addi	fp,r10,-8
  8010b4:	003fa006 	br	800f38 <_malloc_r+0x218>
  8010b8:	00801504 	movi	r2,84
  8010bc:	10c06736 	bltu	r2,r3,80125c <_malloc_r+0x53c>
  8010c0:	8804d33a 	srli	r2,r17,12
  8010c4:	11801b84 	addi	r6,r2,110
  8010c8:	300490fa 	slli	r2,r6,3
  8010cc:	003f4106 	br	800dd4 <_malloc_r+0xb4>
  8010d0:	d0a6ec17 	ldw	r2,-25680(gp)
  8010d4:	d0e00917 	ldw	r3,-32732(gp)
  8010d8:	053fffc4 	movi	r20,-1
  8010dc:	10800404 	addi	r2,r2,16
  8010e0:	88a7883a 	add	r19,r17,r2
  8010e4:	1d000326 	beq	r3,r20,8010f4 <_malloc_r+0x3d4>
  8010e8:	98c3ffc4 	addi	r3,r19,4095
  8010ec:	00bc0004 	movi	r2,-4096
  8010f0:	18a6703a 	and	r19,r3,r2
  8010f4:	9009883a 	mov	r4,r18
  8010f8:	980b883a 	mov	r5,r19
  8010fc:	0801cb80 	call	801cb8 <_sbrk_r>
  801100:	1009883a 	mov	r4,r2
  801104:	15000426 	beq	r2,r20,801118 <_malloc_r+0x3f8>
  801108:	854b883a 	add	r5,r16,r21
  80110c:	1029883a 	mov	r20,r2
  801110:	11405a2e 	bgeu	r2,r5,80127c <_malloc_r+0x55c>
  801114:	87000c26 	beq	r16,fp,801148 <_malloc_r+0x428>
  801118:	e4000217 	ldw	r16,8(fp)
  80111c:	80c00117 	ldw	r3,4(r16)
  801120:	00bfff04 	movi	r2,-4
  801124:	1884703a 	and	r2,r3,r2
  801128:	14400336 	bltu	r2,r17,801138 <_malloc_r+0x418>
  80112c:	1449c83a 	sub	r4,r2,r17
  801130:	008003c4 	movi	r2,15
  801134:	113fd316 	blt	r2,r4,801084 <_malloc_r+0x364>
  801138:	9009883a 	mov	r4,r18
  80113c:	080394c0 	call	80394c <__malloc_unlock>
  801140:	0007883a 	mov	r3,zero
  801144:	003f0a06 	br	800d70 <_malloc_r+0x50>
  801148:	05c02074 	movhi	r23,129
  80114c:	bde46d04 	addi	r23,r23,-28236
  801150:	b8800017 	ldw	r2,0(r23)
  801154:	988d883a 	add	r6,r19,r2
  801158:	b9800015 	stw	r6,0(r23)
  80115c:	d0e00917 	ldw	r3,-32732(gp)
  801160:	00bfffc4 	movi	r2,-1
  801164:	18808e26 	beq	r3,r2,8013a0 <_malloc_r+0x680>
  801168:	2145c83a 	sub	r2,r4,r5
  80116c:	3085883a 	add	r2,r6,r2
  801170:	b8800015 	stw	r2,0(r23)
  801174:	20c001cc 	andi	r3,r4,7
  801178:	18005f1e 	bne	r3,zero,8012f8 <_malloc_r+0x5d8>
  80117c:	000b883a 	mov	r5,zero
  801180:	a4c5883a 	add	r2,r20,r19
  801184:	1083ffcc 	andi	r2,r2,4095
  801188:	00c40004 	movi	r3,4096
  80118c:	1887c83a 	sub	r3,r3,r2
  801190:	28e7883a 	add	r19,r5,r3
  801194:	9009883a 	mov	r4,r18
  801198:	980b883a 	mov	r5,r19
  80119c:	0801cb80 	call	801cb8 <_sbrk_r>
  8011a0:	1007883a 	mov	r3,r2
  8011a4:	00bfffc4 	movi	r2,-1
  8011a8:	18807a26 	beq	r3,r2,801394 <_malloc_r+0x674>
  8011ac:	1d05c83a 	sub	r2,r3,r20
  8011b0:	9885883a 	add	r2,r19,r2
  8011b4:	10c00054 	ori	r3,r2,1
  8011b8:	b8800017 	ldw	r2,0(r23)
  8011bc:	a021883a 	mov	r16,r20
  8011c0:	a0c00115 	stw	r3,4(r20)
  8011c4:	9885883a 	add	r2,r19,r2
  8011c8:	b8800015 	stw	r2,0(r23)
  8011cc:	e5000215 	stw	r20,8(fp)
  8011d0:	b7003626 	beq	r22,fp,8012ac <_malloc_r+0x58c>
  8011d4:	018003c4 	movi	r6,15
  8011d8:	35404b36 	bltu	r6,r21,801308 <_malloc_r+0x5e8>
  8011dc:	00800044 	movi	r2,1
  8011e0:	a0800115 	stw	r2,4(r20)
  8011e4:	003fcd06 	br	80111c <_malloc_r+0x3fc>
  8011e8:	2808d27a 	srli	r4,r5,9
  8011ec:	2000371e 	bne	r4,zero,8012cc <_malloc_r+0x5ac>
  8011f0:	2808d0fa 	srli	r4,r5,3
  8011f4:	200690fa 	slli	r3,r4,3
  8011f8:	1ad1883a 	add	r8,r3,r11
  8011fc:	41800217 	ldw	r6,8(r8)
  801200:	41805b26 	beq	r8,r6,801370 <_malloc_r+0x650>
  801204:	30800117 	ldw	r2,4(r6)
  801208:	00ffff04 	movi	r3,-4
  80120c:	10c4703a 	and	r2,r2,r3
  801210:	2880022e 	bgeu	r5,r2,80121c <_malloc_r+0x4fc>
  801214:	31800217 	ldw	r6,8(r6)
  801218:	41bffa1e 	bne	r8,r6,801204 <_malloc_r+0x4e4>
  80121c:	32000317 	ldw	r8,12(r6)
  801220:	39c00117 	ldw	r7,4(r7)
  801224:	82000315 	stw	r8,12(r16)
  801228:	81800215 	stw	r6,8(r16)
  80122c:	07002034 	movhi	fp,128
  801230:	e717bc04 	addi	fp,fp,24304
  801234:	34000315 	stw	r16,12(r6)
  801238:	44000215 	stw	r16,8(r8)
  80123c:	003f3e06 	br	800f38 <_malloc_r+0x218>
  801240:	63000044 	addi	r12,r12,1
  801244:	608000cc 	andi	r2,r12,3
  801248:	10005d26 	beq	r2,zero,8013c0 <_malloc_r+0x6a0>
  80124c:	18c00204 	addi	r3,r3,8
  801250:	003f5106 	br	800f98 <_malloc_r+0x278>
  801254:	8089883a 	add	r4,r16,r2
  801258:	003f6d06 	br	801010 <_malloc_r+0x2f0>
  80125c:	00805504 	movi	r2,340
  801260:	10c02036 	bltu	r2,r3,8012e4 <_malloc_r+0x5c4>
  801264:	8804d3fa 	srli	r2,r17,15
  801268:	11801dc4 	addi	r6,r2,119
  80126c:	300490fa 	slli	r2,r6,3
  801270:	003ed806 	br	800dd4 <_malloc_r+0xb4>
  801274:	48c000c4 	addi	r3,r9,3
  801278:	003f3106 	br	800f40 <_malloc_r+0x220>
  80127c:	05c02074 	movhi	r23,129
  801280:	bde46d04 	addi	r23,r23,-28236
  801284:	b8800017 	ldw	r2,0(r23)
  801288:	988d883a 	add	r6,r19,r2
  80128c:	b9800015 	stw	r6,0(r23)
  801290:	293fb21e 	bne	r5,r4,80115c <_malloc_r+0x43c>
  801294:	2083ffcc 	andi	r2,r4,4095
  801298:	103fb01e 	bne	r2,zero,80115c <_malloc_r+0x43c>
  80129c:	e4000217 	ldw	r16,8(fp)
  8012a0:	9d45883a 	add	r2,r19,r21
  8012a4:	10800054 	ori	r2,r2,1
  8012a8:	80800115 	stw	r2,4(r16)
  8012ac:	b8c00017 	ldw	r3,0(r23)
  8012b0:	d0a6ed17 	ldw	r2,-25676(gp)
  8012b4:	10c0012e 	bgeu	r2,r3,8012bc <_malloc_r+0x59c>
  8012b8:	d0e6ed15 	stw	r3,-25676(gp)
  8012bc:	d0a6ee17 	ldw	r2,-25672(gp)
  8012c0:	10ff962e 	bgeu	r2,r3,80111c <_malloc_r+0x3fc>
  8012c4:	d0e6ee15 	stw	r3,-25672(gp)
  8012c8:	003f9406 	br	80111c <_malloc_r+0x3fc>
  8012cc:	00800104 	movi	r2,4
  8012d0:	11001e36 	bltu	r2,r4,80134c <_malloc_r+0x62c>
  8012d4:	2804d1ba 	srli	r2,r5,6
  8012d8:	11000e04 	addi	r4,r2,56
  8012dc:	200690fa 	slli	r3,r4,3
  8012e0:	003fc506 	br	8011f8 <_malloc_r+0x4d8>
  8012e4:	00815504 	movi	r2,1364
  8012e8:	10c01d2e 	bgeu	r2,r3,801360 <_malloc_r+0x640>
  8012ec:	01801f84 	movi	r6,126
  8012f0:	0080fc04 	movi	r2,1008
  8012f4:	003eb706 	br	800dd4 <_malloc_r+0xb4>
  8012f8:	00800204 	movi	r2,8
  8012fc:	10cbc83a 	sub	r5,r2,r3
  801300:	2169883a 	add	r20,r4,r5
  801304:	003f9e06 	br	801180 <_malloc_r+0x460>
  801308:	00bffe04 	movi	r2,-8
  80130c:	a93ffd04 	addi	r4,r21,-12
  801310:	2088703a 	and	r4,r4,r2
  801314:	b10b883a 	add	r5,r22,r4
  801318:	00c00144 	movi	r3,5
  80131c:	28c00215 	stw	r3,8(r5)
  801320:	28c00115 	stw	r3,4(r5)
  801324:	b0800117 	ldw	r2,4(r22)
  801328:	1080004c 	andi	r2,r2,1
  80132c:	2084b03a 	or	r2,r4,r2
  801330:	b0800115 	stw	r2,4(r22)
  801334:	313fdd2e 	bgeu	r6,r4,8012ac <_malloc_r+0x58c>
  801338:	b1400204 	addi	r5,r22,8
  80133c:	9009883a 	mov	r4,r18
  801340:	08024b40 	call	8024b4 <_free_r>
  801344:	e4000217 	ldw	r16,8(fp)
  801348:	003fd806 	br	8012ac <_malloc_r+0x58c>
  80134c:	00800504 	movi	r2,20
  801350:	11001536 	bltu	r2,r4,8013a8 <_malloc_r+0x688>
  801354:	210016c4 	addi	r4,r4,91
  801358:	200690fa 	slli	r3,r4,3
  80135c:	003fa606 	br	8011f8 <_malloc_r+0x4d8>
  801360:	8804d4ba 	srli	r2,r17,18
  801364:	11801f04 	addi	r6,r2,124
  801368:	300490fa 	slli	r2,r6,3
  80136c:	003e9906 	br	800dd4 <_malloc_r+0xb4>
  801370:	2009d0ba 	srai	r4,r4,2
  801374:	01402034 	movhi	r5,128
  801378:	2957bc04 	addi	r5,r5,24304
  80137c:	00c00044 	movi	r3,1
  801380:	28800117 	ldw	r2,4(r5)
  801384:	1906983a 	sll	r3,r3,r4
  801388:	10c4b03a 	or	r2,r2,r3
  80138c:	28800115 	stw	r2,4(r5)
  801390:	003fa306 	br	801220 <_malloc_r+0x500>
  801394:	0027883a 	mov	r19,zero
  801398:	00c00044 	movi	r3,1
  80139c:	003f8606 	br	8011b8 <_malloc_r+0x498>
  8013a0:	d1200915 	stw	r4,-32732(gp)
  8013a4:	003f7306 	br	801174 <_malloc_r+0x454>
  8013a8:	00801504 	movi	r2,84
  8013ac:	11001936 	bltu	r2,r4,801414 <_malloc_r+0x6f4>
  8013b0:	2804d33a 	srli	r2,r5,12
  8013b4:	11001b84 	addi	r4,r2,110
  8013b8:	200690fa 	slli	r3,r4,3
  8013bc:	003f8e06 	br	8011f8 <_malloc_r+0x4d8>
  8013c0:	480b883a 	mov	r5,r9
  8013c4:	6807883a 	mov	r3,r13
  8013c8:	288000cc 	andi	r2,r5,3
  8013cc:	18fffe04 	addi	r3,r3,-8
  8013d0:	297fffc4 	addi	r5,r5,-1
  8013d4:	10001526 	beq	r2,zero,80142c <_malloc_r+0x70c>
  8013d8:	18800217 	ldw	r2,8(r3)
  8013dc:	10fffa26 	beq	r2,r3,8013c8 <_malloc_r+0x6a8>
  8013e0:	2109883a 	add	r4,r4,r4
  8013e4:	393f1e36 	bltu	r7,r4,801060 <_malloc_r+0x340>
  8013e8:	203f1d26 	beq	r4,zero,801060 <_malloc_r+0x340>
  8013ec:	21c4703a 	and	r2,r4,r7
  8013f0:	10000226 	beq	r2,zero,8013fc <_malloc_r+0x6dc>
  8013f4:	6013883a 	mov	r9,r12
  8013f8:	003ee106 	br	800f80 <_malloc_r+0x260>
  8013fc:	2109883a 	add	r4,r4,r4
  801400:	3904703a 	and	r2,r7,r4
  801404:	63000104 	addi	r12,r12,4
  801408:	103ffc26 	beq	r2,zero,8013fc <_malloc_r+0x6dc>
  80140c:	6013883a 	mov	r9,r12
  801410:	003edb06 	br	800f80 <_malloc_r+0x260>
  801414:	00805504 	movi	r2,340
  801418:	11000836 	bltu	r2,r4,80143c <_malloc_r+0x71c>
  80141c:	2804d3fa 	srli	r2,r5,15
  801420:	11001dc4 	addi	r4,r2,119
  801424:	200690fa 	slli	r3,r4,3
  801428:	003f7306 	br	8011f8 <_malloc_r+0x4d8>
  80142c:	0104303a 	nor	r2,zero,r4
  801430:	388e703a 	and	r7,r7,r2
  801434:	e1c00115 	stw	r7,4(fp)
  801438:	003fe906 	br	8013e0 <_malloc_r+0x6c0>
  80143c:	00815504 	movi	r2,1364
  801440:	1100032e 	bgeu	r2,r4,801450 <_malloc_r+0x730>
  801444:	01001f84 	movi	r4,126
  801448:	00c0fc04 	movi	r3,1008
  80144c:	003f6a06 	br	8011f8 <_malloc_r+0x4d8>
  801450:	2804d4ba 	srli	r2,r5,18
  801454:	11001f04 	addi	r4,r2,124
  801458:	200690fa 	slli	r3,r4,3
  80145c:	003f6606 	br	8011f8 <_malloc_r+0x4d8>

00801460 <memchr>:
  801460:	008000c4 	movi	r2,3
  801464:	29403fcc 	andi	r5,r5,255
  801468:	2007883a 	mov	r3,r4
  80146c:	1180022e 	bgeu	r2,r6,801478 <memchr+0x18>
  801470:	2084703a 	and	r2,r4,r2
  801474:	10000b26 	beq	r2,zero,8014a4 <memchr+0x44>
  801478:	313fffc4 	addi	r4,r6,-1
  80147c:	3000051e 	bne	r6,zero,801494 <memchr+0x34>
  801480:	00002c06 	br	801534 <memchr+0xd4>
  801484:	213fffc4 	addi	r4,r4,-1
  801488:	00bfffc4 	movi	r2,-1
  80148c:	18c00044 	addi	r3,r3,1
  801490:	20802826 	beq	r4,r2,801534 <memchr+0xd4>
  801494:	18800003 	ldbu	r2,0(r3)
  801498:	28bffa1e 	bne	r5,r2,801484 <memchr+0x24>
  80149c:	1805883a 	mov	r2,r3
  8014a0:	f800283a 	ret
  8014a4:	0011883a 	mov	r8,zero
  8014a8:	0007883a 	mov	r3,zero
  8014ac:	01c00104 	movi	r7,4
  8014b0:	4004923a 	slli	r2,r8,8
  8014b4:	18c00044 	addi	r3,r3,1
  8014b8:	1151883a 	add	r8,r2,r5
  8014bc:	19fffc1e 	bne	r3,r7,8014b0 <memchr+0x50>
  8014c0:	02bfbff4 	movhi	r10,65279
  8014c4:	52bfbfc4 	addi	r10,r10,-257
  8014c8:	02602074 	movhi	r9,32897
  8014cc:	4a602004 	addi	r9,r9,-32640
  8014d0:	02c000c4 	movi	r11,3
  8014d4:	20800017 	ldw	r2,0(r4)
  8014d8:	31bfff04 	addi	r6,r6,-4
  8014dc:	200f883a 	mov	r7,r4
  8014e0:	1204f03a 	xor	r2,r2,r8
  8014e4:	1287883a 	add	r3,r2,r10
  8014e8:	1a46703a 	and	r3,r3,r9
  8014ec:	0084303a 	nor	r2,zero,r2
  8014f0:	10c4703a 	and	r2,r2,r3
  8014f4:	10000b26 	beq	r2,zero,801524 <memchr+0xc4>
  8014f8:	20800003 	ldbu	r2,0(r4)
  8014fc:	28800f26 	beq	r5,r2,80153c <memchr+0xdc>
  801500:	20800043 	ldbu	r2,1(r4)
  801504:	21c00044 	addi	r7,r4,1
  801508:	28800c26 	beq	r5,r2,80153c <memchr+0xdc>
  80150c:	20800083 	ldbu	r2,2(r4)
  801510:	21c00084 	addi	r7,r4,2
  801514:	28800926 	beq	r5,r2,80153c <memchr+0xdc>
  801518:	208000c3 	ldbu	r2,3(r4)
  80151c:	21c000c4 	addi	r7,r4,3
  801520:	28800626 	beq	r5,r2,80153c <memchr+0xdc>
  801524:	21000104 	addi	r4,r4,4
  801528:	59bfea36 	bltu	r11,r6,8014d4 <memchr+0x74>
  80152c:	2007883a 	mov	r3,r4
  801530:	003fd106 	br	801478 <memchr+0x18>
  801534:	0005883a 	mov	r2,zero
  801538:	f800283a 	ret
  80153c:	3805883a 	mov	r2,r7
  801540:	f800283a 	ret

00801544 <memcpy>:
  801544:	01c003c4 	movi	r7,15
  801548:	2007883a 	mov	r3,r4
  80154c:	3980032e 	bgeu	r7,r6,80155c <memcpy+0x18>
  801550:	2904b03a 	or	r2,r5,r4
  801554:	108000cc 	andi	r2,r2,3
  801558:	10000926 	beq	r2,zero,801580 <memcpy+0x3c>
  80155c:	30000626 	beq	r6,zero,801578 <memcpy+0x34>
  801560:	30cd883a 	add	r6,r6,r3
  801564:	28800003 	ldbu	r2,0(r5)
  801568:	29400044 	addi	r5,r5,1
  80156c:	18800005 	stb	r2,0(r3)
  801570:	18c00044 	addi	r3,r3,1
  801574:	30fffb1e 	bne	r6,r3,801564 <memcpy+0x20>
  801578:	2005883a 	mov	r2,r4
  80157c:	f800283a 	ret
  801580:	3811883a 	mov	r8,r7
  801584:	200f883a 	mov	r7,r4
  801588:	28c00017 	ldw	r3,0(r5)
  80158c:	31bffc04 	addi	r6,r6,-16
  801590:	38c00015 	stw	r3,0(r7)
  801594:	28800117 	ldw	r2,4(r5)
  801598:	38800115 	stw	r2,4(r7)
  80159c:	28c00217 	ldw	r3,8(r5)
  8015a0:	38c00215 	stw	r3,8(r7)
  8015a4:	28800317 	ldw	r2,12(r5)
  8015a8:	29400404 	addi	r5,r5,16
  8015ac:	38800315 	stw	r2,12(r7)
  8015b0:	39c00404 	addi	r7,r7,16
  8015b4:	41bff436 	bltu	r8,r6,801588 <memcpy+0x44>
  8015b8:	008000c4 	movi	r2,3
  8015bc:	1180072e 	bgeu	r2,r6,8015dc <memcpy+0x98>
  8015c0:	1007883a 	mov	r3,r2
  8015c4:	28800017 	ldw	r2,0(r5)
  8015c8:	31bfff04 	addi	r6,r6,-4
  8015cc:	29400104 	addi	r5,r5,4
  8015d0:	38800015 	stw	r2,0(r7)
  8015d4:	39c00104 	addi	r7,r7,4
  8015d8:	19bffa36 	bltu	r3,r6,8015c4 <memcpy+0x80>
  8015dc:	3807883a 	mov	r3,r7
  8015e0:	003fde06 	br	80155c <memcpy+0x18>

008015e4 <memmove>:
  8015e4:	2807883a 	mov	r3,r5
  8015e8:	2011883a 	mov	r8,r4
  8015ec:	29000c2e 	bgeu	r5,r4,801620 <memmove+0x3c>
  8015f0:	298f883a 	add	r7,r5,r6
  8015f4:	21c00a2e 	bgeu	r4,r7,801620 <memmove+0x3c>
  8015f8:	30000726 	beq	r6,zero,801618 <memmove+0x34>
  8015fc:	2187883a 	add	r3,r4,r6
  801600:	198dc83a 	sub	r6,r3,r6
  801604:	39ffffc4 	addi	r7,r7,-1
  801608:	38800003 	ldbu	r2,0(r7)
  80160c:	18ffffc4 	addi	r3,r3,-1
  801610:	18800005 	stb	r2,0(r3)
  801614:	19bffb1e 	bne	r3,r6,801604 <memmove+0x20>
  801618:	2005883a 	mov	r2,r4
  80161c:	f800283a 	ret
  801620:	01c003c4 	movi	r7,15
  801624:	39800a36 	bltu	r7,r6,801650 <memmove+0x6c>
  801628:	303ffb26 	beq	r6,zero,801618 <memmove+0x34>
  80162c:	400f883a 	mov	r7,r8
  801630:	320d883a 	add	r6,r6,r8
  801634:	28800003 	ldbu	r2,0(r5)
  801638:	29400044 	addi	r5,r5,1
  80163c:	38800005 	stb	r2,0(r7)
  801640:	39c00044 	addi	r7,r7,1
  801644:	39bffb1e 	bne	r7,r6,801634 <memmove+0x50>
  801648:	2005883a 	mov	r2,r4
  80164c:	f800283a 	ret
  801650:	1904b03a 	or	r2,r3,r4
  801654:	108000cc 	andi	r2,r2,3
  801658:	103ff31e 	bne	r2,zero,801628 <memmove+0x44>
  80165c:	3811883a 	mov	r8,r7
  801660:	180b883a 	mov	r5,r3
  801664:	200f883a 	mov	r7,r4
  801668:	28c00017 	ldw	r3,0(r5)
  80166c:	31bffc04 	addi	r6,r6,-16
  801670:	38c00015 	stw	r3,0(r7)
  801674:	28800117 	ldw	r2,4(r5)
  801678:	38800115 	stw	r2,4(r7)
  80167c:	28c00217 	ldw	r3,8(r5)
  801680:	38c00215 	stw	r3,8(r7)
  801684:	28800317 	ldw	r2,12(r5)
  801688:	29400404 	addi	r5,r5,16
  80168c:	38800315 	stw	r2,12(r7)
  801690:	39c00404 	addi	r7,r7,16
  801694:	41bff436 	bltu	r8,r6,801668 <memmove+0x84>
  801698:	008000c4 	movi	r2,3
  80169c:	1180072e 	bgeu	r2,r6,8016bc <memmove+0xd8>
  8016a0:	1007883a 	mov	r3,r2
  8016a4:	28800017 	ldw	r2,0(r5)
  8016a8:	31bfff04 	addi	r6,r6,-4
  8016ac:	29400104 	addi	r5,r5,4
  8016b0:	38800015 	stw	r2,0(r7)
  8016b4:	39c00104 	addi	r7,r7,4
  8016b8:	19bffa36 	bltu	r3,r6,8016a4 <memmove+0xc0>
  8016bc:	3811883a 	mov	r8,r7
  8016c0:	003fd906 	br	801628 <memmove+0x44>

008016c4 <_realloc_r>:
  8016c4:	defff404 	addi	sp,sp,-48
  8016c8:	dd800815 	stw	r22,32(sp)
  8016cc:	dc800415 	stw	r18,16(sp)
  8016d0:	dc400315 	stw	r17,12(sp)
  8016d4:	dfc00b15 	stw	ra,44(sp)
  8016d8:	df000a15 	stw	fp,40(sp)
  8016dc:	ddc00915 	stw	r23,36(sp)
  8016e0:	dd400715 	stw	r21,28(sp)
  8016e4:	dd000615 	stw	r20,24(sp)
  8016e8:	dcc00515 	stw	r19,20(sp)
  8016ec:	dc000215 	stw	r16,8(sp)
  8016f0:	2825883a 	mov	r18,r5
  8016f4:	3023883a 	mov	r17,r6
  8016f8:	202d883a 	mov	r22,r4
  8016fc:	2800c926 	beq	r5,zero,801a24 <_realloc_r+0x360>
  801700:	080392c0 	call	80392c <__malloc_lock>
  801704:	943ffe04 	addi	r16,r18,-8
  801708:	88c002c4 	addi	r3,r17,11
  80170c:	00800584 	movi	r2,22
  801710:	82000117 	ldw	r8,4(r16)
  801714:	10c01b2e 	bgeu	r2,r3,801784 <_realloc_r+0xc0>
  801718:	00bffe04 	movi	r2,-8
  80171c:	188e703a 	and	r7,r3,r2
  801720:	3839883a 	mov	fp,r7
  801724:	38001a16 	blt	r7,zero,801790 <_realloc_r+0xcc>
  801728:	e4401936 	bltu	fp,r17,801790 <_realloc_r+0xcc>
  80172c:	013fff04 	movi	r4,-4
  801730:	4126703a 	and	r19,r8,r4
  801734:	99c02616 	blt	r19,r7,8017d0 <_realloc_r+0x10c>
  801738:	802b883a 	mov	r21,r16
  80173c:	9829883a 	mov	r20,r19
  801740:	84000204 	addi	r16,r16,8
  801744:	a80f883a 	mov	r7,r21
  801748:	a70dc83a 	sub	r6,r20,fp
  80174c:	008003c4 	movi	r2,15
  801750:	1180c136 	bltu	r2,r6,801a58 <_realloc_r+0x394>
  801754:	38800117 	ldw	r2,4(r7)
  801758:	a549883a 	add	r4,r20,r21
  80175c:	1080004c 	andi	r2,r2,1
  801760:	a084b03a 	or	r2,r20,r2
  801764:	38800115 	stw	r2,4(r7)
  801768:	20c00117 	ldw	r3,4(r4)
  80176c:	18c00054 	ori	r3,r3,1
  801770:	20c00115 	stw	r3,4(r4)
  801774:	b009883a 	mov	r4,r22
  801778:	080394c0 	call	80394c <__malloc_unlock>
  80177c:	8023883a 	mov	r17,r16
  801780:	00000606 	br	80179c <_realloc_r+0xd8>
  801784:	01c00404 	movi	r7,16
  801788:	3839883a 	mov	fp,r7
  80178c:	e47fe72e 	bgeu	fp,r17,80172c <_realloc_r+0x68>
  801790:	00800304 	movi	r2,12
  801794:	0023883a 	mov	r17,zero
  801798:	b0800015 	stw	r2,0(r22)
  80179c:	8805883a 	mov	r2,r17
  8017a0:	dfc00b17 	ldw	ra,44(sp)
  8017a4:	df000a17 	ldw	fp,40(sp)
  8017a8:	ddc00917 	ldw	r23,36(sp)
  8017ac:	dd800817 	ldw	r22,32(sp)
  8017b0:	dd400717 	ldw	r21,28(sp)
  8017b4:	dd000617 	ldw	r20,24(sp)
  8017b8:	dcc00517 	ldw	r19,20(sp)
  8017bc:	dc800417 	ldw	r18,16(sp)
  8017c0:	dc400317 	ldw	r17,12(sp)
  8017c4:	dc000217 	ldw	r16,8(sp)
  8017c8:	dec00c04 	addi	sp,sp,48
  8017cc:	f800283a 	ret
  8017d0:	00802034 	movhi	r2,128
  8017d4:	1097bc04 	addi	r2,r2,24304
  8017d8:	12400217 	ldw	r9,8(r2)
  8017dc:	84cd883a 	add	r6,r16,r19
  8017e0:	802b883a 	mov	r21,r16
  8017e4:	3240b926 	beq	r6,r9,801acc <_realloc_r+0x408>
  8017e8:	31400117 	ldw	r5,4(r6)
  8017ec:	00bfff84 	movi	r2,-2
  8017f0:	2884703a 	and	r2,r5,r2
  8017f4:	1185883a 	add	r2,r2,r6
  8017f8:	10c00117 	ldw	r3,4(r2)
  8017fc:	18c0004c 	andi	r3,r3,1
  801800:	1807003a 	cmpeq	r3,r3,zero
  801804:	1800a326 	beq	r3,zero,801a94 <_realloc_r+0x3d0>
  801808:	2908703a 	and	r4,r5,r4
  80180c:	9929883a 	add	r20,r19,r4
  801810:	a1c0a30e 	bge	r20,r7,801aa0 <_realloc_r+0x3dc>
  801814:	4080004c 	andi	r2,r8,1
  801818:	1000551e 	bne	r2,zero,801970 <_realloc_r+0x2ac>
  80181c:	80800017 	ldw	r2,0(r16)
  801820:	80afc83a 	sub	r23,r16,r2
  801824:	b8c00117 	ldw	r3,4(r23)
  801828:	00bfff04 	movi	r2,-4
  80182c:	1884703a 	and	r2,r3,r2
  801830:	30002e26 	beq	r6,zero,8018ec <_realloc_r+0x228>
  801834:	3240b926 	beq	r6,r9,801b1c <_realloc_r+0x458>
  801838:	98a9883a 	add	r20,r19,r2
  80183c:	2509883a 	add	r4,r4,r20
  801840:	d9000015 	stw	r4,0(sp)
  801844:	21c02a16 	blt	r4,r7,8018f0 <_realloc_r+0x22c>
  801848:	30800317 	ldw	r2,12(r6)
  80184c:	30c00217 	ldw	r3,8(r6)
  801850:	01400904 	movi	r5,36
  801854:	99bfff04 	addi	r6,r19,-4
  801858:	18800315 	stw	r2,12(r3)
  80185c:	10c00215 	stw	r3,8(r2)
  801860:	b9000317 	ldw	r4,12(r23)
  801864:	b8800217 	ldw	r2,8(r23)
  801868:	b82b883a 	mov	r21,r23
  80186c:	bc000204 	addi	r16,r23,8
  801870:	20800215 	stw	r2,8(r4)
  801874:	11000315 	stw	r4,12(r2)
  801878:	2980e436 	bltu	r5,r6,801c0c <_realloc_r+0x548>
  80187c:	008004c4 	movi	r2,19
  801880:	9009883a 	mov	r4,r18
  801884:	8011883a 	mov	r8,r16
  801888:	11800f2e 	bgeu	r2,r6,8018c8 <_realloc_r+0x204>
  80188c:	90800017 	ldw	r2,0(r18)
  801890:	ba000404 	addi	r8,r23,16
  801894:	91000204 	addi	r4,r18,8
  801898:	b8800215 	stw	r2,8(r23)
  80189c:	90c00117 	ldw	r3,4(r18)
  8018a0:	008006c4 	movi	r2,27
  8018a4:	b8c00315 	stw	r3,12(r23)
  8018a8:	1180072e 	bgeu	r2,r6,8018c8 <_realloc_r+0x204>
  8018ac:	90c00217 	ldw	r3,8(r18)
  8018b0:	ba000604 	addi	r8,r23,24
  8018b4:	91000404 	addi	r4,r18,16
  8018b8:	b8c00415 	stw	r3,16(r23)
  8018bc:	90800317 	ldw	r2,12(r18)
  8018c0:	b8800515 	stw	r2,20(r23)
  8018c4:	3140e726 	beq	r6,r5,801c64 <_realloc_r+0x5a0>
  8018c8:	20800017 	ldw	r2,0(r4)
  8018cc:	dd000017 	ldw	r20,0(sp)
  8018d0:	b80f883a 	mov	r7,r23
  8018d4:	40800015 	stw	r2,0(r8)
  8018d8:	20c00117 	ldw	r3,4(r4)
  8018dc:	40c00115 	stw	r3,4(r8)
  8018e0:	20800217 	ldw	r2,8(r4)
  8018e4:	40800215 	stw	r2,8(r8)
  8018e8:	003f9706 	br	801748 <_realloc_r+0x84>
  8018ec:	98a9883a 	add	r20,r19,r2
  8018f0:	a1c01f16 	blt	r20,r7,801970 <_realloc_r+0x2ac>
  8018f4:	b8c00317 	ldw	r3,12(r23)
  8018f8:	b8800217 	ldw	r2,8(r23)
  8018fc:	99bfff04 	addi	r6,r19,-4
  801900:	01400904 	movi	r5,36
  801904:	b82b883a 	mov	r21,r23
  801908:	18800215 	stw	r2,8(r3)
  80190c:	10c00315 	stw	r3,12(r2)
  801910:	bc000204 	addi	r16,r23,8
  801914:	2980c336 	bltu	r5,r6,801c24 <_realloc_r+0x560>
  801918:	008004c4 	movi	r2,19
  80191c:	9009883a 	mov	r4,r18
  801920:	8011883a 	mov	r8,r16
  801924:	11800f2e 	bgeu	r2,r6,801964 <_realloc_r+0x2a0>
  801928:	90800017 	ldw	r2,0(r18)
  80192c:	ba000404 	addi	r8,r23,16
  801930:	91000204 	addi	r4,r18,8
  801934:	b8800215 	stw	r2,8(r23)
  801938:	90c00117 	ldw	r3,4(r18)
  80193c:	008006c4 	movi	r2,27
  801940:	b8c00315 	stw	r3,12(r23)
  801944:	1180072e 	bgeu	r2,r6,801964 <_realloc_r+0x2a0>
  801948:	90c00217 	ldw	r3,8(r18)
  80194c:	ba000604 	addi	r8,r23,24
  801950:	91000404 	addi	r4,r18,16
  801954:	b8c00415 	stw	r3,16(r23)
  801958:	90800317 	ldw	r2,12(r18)
  80195c:	b8800515 	stw	r2,20(r23)
  801960:	3140c726 	beq	r6,r5,801c80 <_realloc_r+0x5bc>
  801964:	20800017 	ldw	r2,0(r4)
  801968:	b80f883a 	mov	r7,r23
  80196c:	003fd906 	br	8018d4 <_realloc_r+0x210>
  801970:	880b883a 	mov	r5,r17
  801974:	b009883a 	mov	r4,r22
  801978:	0800d200 	call	800d20 <_malloc_r>
  80197c:	1023883a 	mov	r17,r2
  801980:	10002526 	beq	r2,zero,801a18 <_realloc_r+0x354>
  801984:	80800117 	ldw	r2,4(r16)
  801988:	00ffff84 	movi	r3,-2
  80198c:	893ffe04 	addi	r4,r17,-8
  801990:	10c4703a 	and	r2,r2,r3
  801994:	8085883a 	add	r2,r16,r2
  801998:	20809526 	beq	r4,r2,801bf0 <_realloc_r+0x52c>
  80199c:	99bfff04 	addi	r6,r19,-4
  8019a0:	01c00904 	movi	r7,36
  8019a4:	39804536 	bltu	r7,r6,801abc <_realloc_r+0x3f8>
  8019a8:	008004c4 	movi	r2,19
  8019ac:	9009883a 	mov	r4,r18
  8019b0:	880b883a 	mov	r5,r17
  8019b4:	11800f2e 	bgeu	r2,r6,8019f4 <_realloc_r+0x330>
  8019b8:	90800017 	ldw	r2,0(r18)
  8019bc:	89400204 	addi	r5,r17,8
  8019c0:	91000204 	addi	r4,r18,8
  8019c4:	88800015 	stw	r2,0(r17)
  8019c8:	90c00117 	ldw	r3,4(r18)
  8019cc:	008006c4 	movi	r2,27
  8019d0:	88c00115 	stw	r3,4(r17)
  8019d4:	1180072e 	bgeu	r2,r6,8019f4 <_realloc_r+0x330>
  8019d8:	90c00217 	ldw	r3,8(r18)
  8019dc:	89400404 	addi	r5,r17,16
  8019e0:	91000404 	addi	r4,r18,16
  8019e4:	88c00215 	stw	r3,8(r17)
  8019e8:	90800317 	ldw	r2,12(r18)
  8019ec:	88800315 	stw	r2,12(r17)
  8019f0:	31c09126 	beq	r6,r7,801c38 <_realloc_r+0x574>
  8019f4:	20800017 	ldw	r2,0(r4)
  8019f8:	28800015 	stw	r2,0(r5)
  8019fc:	20c00117 	ldw	r3,4(r4)
  801a00:	28c00115 	stw	r3,4(r5)
  801a04:	20800217 	ldw	r2,8(r4)
  801a08:	28800215 	stw	r2,8(r5)
  801a0c:	900b883a 	mov	r5,r18
  801a10:	b009883a 	mov	r4,r22
  801a14:	08024b40 	call	8024b4 <_free_r>
  801a18:	b009883a 	mov	r4,r22
  801a1c:	080394c0 	call	80394c <__malloc_unlock>
  801a20:	003f5e06 	br	80179c <_realloc_r+0xd8>
  801a24:	300b883a 	mov	r5,r6
  801a28:	dfc00b17 	ldw	ra,44(sp)
  801a2c:	df000a17 	ldw	fp,40(sp)
  801a30:	ddc00917 	ldw	r23,36(sp)
  801a34:	dd800817 	ldw	r22,32(sp)
  801a38:	dd400717 	ldw	r21,28(sp)
  801a3c:	dd000617 	ldw	r20,24(sp)
  801a40:	dcc00517 	ldw	r19,20(sp)
  801a44:	dc800417 	ldw	r18,16(sp)
  801a48:	dc400317 	ldw	r17,12(sp)
  801a4c:	dc000217 	ldw	r16,8(sp)
  801a50:	dec00c04 	addi	sp,sp,48
  801a54:	0800d201 	jmpi	800d20 <_malloc_r>
  801a58:	38800117 	ldw	r2,4(r7)
  801a5c:	e54b883a 	add	r5,fp,r21
  801a60:	31000054 	ori	r4,r6,1
  801a64:	1080004c 	andi	r2,r2,1
  801a68:	1704b03a 	or	r2,r2,fp
  801a6c:	38800115 	stw	r2,4(r7)
  801a70:	29000115 	stw	r4,4(r5)
  801a74:	2987883a 	add	r3,r5,r6
  801a78:	18800117 	ldw	r2,4(r3)
  801a7c:	29400204 	addi	r5,r5,8
  801a80:	b009883a 	mov	r4,r22
  801a84:	10800054 	ori	r2,r2,1
  801a88:	18800115 	stw	r2,4(r3)
  801a8c:	08024b40 	call	8024b4 <_free_r>
  801a90:	003f3806 	br	801774 <_realloc_r+0xb0>
  801a94:	000d883a 	mov	r6,zero
  801a98:	0009883a 	mov	r4,zero
  801a9c:	003f5d06 	br	801814 <_realloc_r+0x150>
  801aa0:	30c00217 	ldw	r3,8(r6)
  801aa4:	30800317 	ldw	r2,12(r6)
  801aa8:	800f883a 	mov	r7,r16
  801aac:	84000204 	addi	r16,r16,8
  801ab0:	10c00215 	stw	r3,8(r2)
  801ab4:	18800315 	stw	r2,12(r3)
  801ab8:	003f2306 	br	801748 <_realloc_r+0x84>
  801abc:	8809883a 	mov	r4,r17
  801ac0:	900b883a 	mov	r5,r18
  801ac4:	08015e40 	call	8015e4 <memmove>
  801ac8:	003fd006 	br	801a0c <_realloc_r+0x348>
  801acc:	30800117 	ldw	r2,4(r6)
  801ad0:	e0c00404 	addi	r3,fp,16
  801ad4:	1108703a 	and	r4,r2,r4
  801ad8:	9905883a 	add	r2,r19,r4
  801adc:	10ff4d16 	blt	r2,r3,801814 <_realloc_r+0x150>
  801ae0:	1705c83a 	sub	r2,r2,fp
  801ae4:	870b883a 	add	r5,r16,fp
  801ae8:	10800054 	ori	r2,r2,1
  801aec:	28800115 	stw	r2,4(r5)
  801af0:	80c00117 	ldw	r3,4(r16)
  801af4:	00802034 	movhi	r2,128
  801af8:	1097bc04 	addi	r2,r2,24304
  801afc:	b009883a 	mov	r4,r22
  801b00:	18c0004c 	andi	r3,r3,1
  801b04:	e0c6b03a 	or	r3,fp,r3
  801b08:	11400215 	stw	r5,8(r2)
  801b0c:	80c00115 	stw	r3,4(r16)
  801b10:	080394c0 	call	80394c <__malloc_unlock>
  801b14:	84400204 	addi	r17,r16,8
  801b18:	003f2006 	br	80179c <_realloc_r+0xd8>
  801b1c:	98a9883a 	add	r20,r19,r2
  801b20:	2509883a 	add	r4,r4,r20
  801b24:	e0800404 	addi	r2,fp,16
  801b28:	d9000115 	stw	r4,4(sp)
  801b2c:	20bf7016 	blt	r4,r2,8018f0 <_realloc_r+0x22c>
  801b30:	b8c00317 	ldw	r3,12(r23)
  801b34:	b8800217 	ldw	r2,8(r23)
  801b38:	99bfff04 	addi	r6,r19,-4
  801b3c:	01400904 	movi	r5,36
  801b40:	18800215 	stw	r2,8(r3)
  801b44:	10c00315 	stw	r3,12(r2)
  801b48:	bc400204 	addi	r17,r23,8
  801b4c:	29804136 	bltu	r5,r6,801c54 <_realloc_r+0x590>
  801b50:	008004c4 	movi	r2,19
  801b54:	9009883a 	mov	r4,r18
  801b58:	880f883a 	mov	r7,r17
  801b5c:	11800f2e 	bgeu	r2,r6,801b9c <_realloc_r+0x4d8>
  801b60:	90800017 	ldw	r2,0(r18)
  801b64:	b9c00404 	addi	r7,r23,16
  801b68:	91000204 	addi	r4,r18,8
  801b6c:	b8800215 	stw	r2,8(r23)
  801b70:	90c00117 	ldw	r3,4(r18)
  801b74:	008006c4 	movi	r2,27
  801b78:	b8c00315 	stw	r3,12(r23)
  801b7c:	1180072e 	bgeu	r2,r6,801b9c <_realloc_r+0x4d8>
  801b80:	90c00217 	ldw	r3,8(r18)
  801b84:	b9c00604 	addi	r7,r23,24
  801b88:	91000404 	addi	r4,r18,16
  801b8c:	b8c00415 	stw	r3,16(r23)
  801b90:	90800317 	ldw	r2,12(r18)
  801b94:	b8800515 	stw	r2,20(r23)
  801b98:	31404026 	beq	r6,r5,801c9c <_realloc_r+0x5d8>
  801b9c:	20800017 	ldw	r2,0(r4)
  801ba0:	38800015 	stw	r2,0(r7)
  801ba4:	20c00117 	ldw	r3,4(r4)
  801ba8:	38c00115 	stw	r3,4(r7)
  801bac:	20800217 	ldw	r2,8(r4)
  801bb0:	38800215 	stw	r2,8(r7)
  801bb4:	d8c00117 	ldw	r3,4(sp)
  801bb8:	bf0b883a 	add	r5,r23,fp
  801bbc:	b009883a 	mov	r4,r22
  801bc0:	1f05c83a 	sub	r2,r3,fp
  801bc4:	10800054 	ori	r2,r2,1
  801bc8:	28800115 	stw	r2,4(r5)
  801bcc:	b8c00117 	ldw	r3,4(r23)
  801bd0:	00802034 	movhi	r2,128
  801bd4:	1097bc04 	addi	r2,r2,24304
  801bd8:	11400215 	stw	r5,8(r2)
  801bdc:	18c0004c 	andi	r3,r3,1
  801be0:	e0c6b03a 	or	r3,fp,r3
  801be4:	b8c00115 	stw	r3,4(r23)
  801be8:	080394c0 	call	80394c <__malloc_unlock>
  801bec:	003eeb06 	br	80179c <_realloc_r+0xd8>
  801bf0:	20800117 	ldw	r2,4(r4)
  801bf4:	00ffff04 	movi	r3,-4
  801bf8:	800f883a 	mov	r7,r16
  801bfc:	10c4703a 	and	r2,r2,r3
  801c00:	98a9883a 	add	r20,r19,r2
  801c04:	84000204 	addi	r16,r16,8
  801c08:	003ecf06 	br	801748 <_realloc_r+0x84>
  801c0c:	900b883a 	mov	r5,r18
  801c10:	8009883a 	mov	r4,r16
  801c14:	08015e40 	call	8015e4 <memmove>
  801c18:	dd000017 	ldw	r20,0(sp)
  801c1c:	b80f883a 	mov	r7,r23
  801c20:	003ec906 	br	801748 <_realloc_r+0x84>
  801c24:	900b883a 	mov	r5,r18
  801c28:	8009883a 	mov	r4,r16
  801c2c:	08015e40 	call	8015e4 <memmove>
  801c30:	b80f883a 	mov	r7,r23
  801c34:	003ec406 	br	801748 <_realloc_r+0x84>
  801c38:	90c00417 	ldw	r3,16(r18)
  801c3c:	89400604 	addi	r5,r17,24
  801c40:	91000604 	addi	r4,r18,24
  801c44:	88c00415 	stw	r3,16(r17)
  801c48:	90800517 	ldw	r2,20(r18)
  801c4c:	88800515 	stw	r2,20(r17)
  801c50:	003f6806 	br	8019f4 <_realloc_r+0x330>
  801c54:	900b883a 	mov	r5,r18
  801c58:	8809883a 	mov	r4,r17
  801c5c:	08015e40 	call	8015e4 <memmove>
  801c60:	003fd406 	br	801bb4 <_realloc_r+0x4f0>
  801c64:	90c00417 	ldw	r3,16(r18)
  801c68:	91000604 	addi	r4,r18,24
  801c6c:	ba000804 	addi	r8,r23,32
  801c70:	b8c00615 	stw	r3,24(r23)
  801c74:	90800517 	ldw	r2,20(r18)
  801c78:	b8800715 	stw	r2,28(r23)
  801c7c:	003f1206 	br	8018c8 <_realloc_r+0x204>
  801c80:	90c00417 	ldw	r3,16(r18)
  801c84:	91000604 	addi	r4,r18,24
  801c88:	ba000804 	addi	r8,r23,32
  801c8c:	b8c00615 	stw	r3,24(r23)
  801c90:	90800517 	ldw	r2,20(r18)
  801c94:	b8800715 	stw	r2,28(r23)
  801c98:	003f3206 	br	801964 <_realloc_r+0x2a0>
  801c9c:	90c00417 	ldw	r3,16(r18)
  801ca0:	91000604 	addi	r4,r18,24
  801ca4:	b9c00804 	addi	r7,r23,32
  801ca8:	b8c00615 	stw	r3,24(r23)
  801cac:	90800517 	ldw	r2,20(r18)
  801cb0:	b8800715 	stw	r2,28(r23)
  801cb4:	003fb906 	br	801b9c <_realloc_r+0x4d8>

00801cb8 <_sbrk_r>:
  801cb8:	defffd04 	addi	sp,sp,-12
  801cbc:	dc000015 	stw	r16,0(sp)
  801cc0:	04002074 	movhi	r16,129
  801cc4:	84246604 	addi	r16,r16,-28264
  801cc8:	dc400115 	stw	r17,4(sp)
  801ccc:	80000015 	stw	zero,0(r16)
  801cd0:	2023883a 	mov	r17,r4
  801cd4:	2809883a 	mov	r4,r5
  801cd8:	dfc00215 	stw	ra,8(sp)
  801cdc:	0803b680 	call	803b68 <sbrk>
  801ce0:	1007883a 	mov	r3,r2
  801ce4:	00bfffc4 	movi	r2,-1
  801ce8:	18800626 	beq	r3,r2,801d04 <_sbrk_r+0x4c>
  801cec:	1805883a 	mov	r2,r3
  801cf0:	dfc00217 	ldw	ra,8(sp)
  801cf4:	dc400117 	ldw	r17,4(sp)
  801cf8:	dc000017 	ldw	r16,0(sp)
  801cfc:	dec00304 	addi	sp,sp,12
  801d00:	f800283a 	ret
  801d04:	80800017 	ldw	r2,0(r16)
  801d08:	103ff826 	beq	r2,zero,801cec <_sbrk_r+0x34>
  801d0c:	88800015 	stw	r2,0(r17)
  801d10:	1805883a 	mov	r2,r3
  801d14:	dfc00217 	ldw	ra,8(sp)
  801d18:	dc400117 	ldw	r17,4(sp)
  801d1c:	dc000017 	ldw	r16,0(sp)
  801d20:	dec00304 	addi	sp,sp,12
  801d24:	f800283a 	ret

00801d28 <__swsetup_r>:
  801d28:	00802034 	movhi	r2,128
  801d2c:	109d7d04 	addi	r2,r2,30196
  801d30:	10c00017 	ldw	r3,0(r2)
  801d34:	defffd04 	addi	sp,sp,-12
  801d38:	dc400115 	stw	r17,4(sp)
  801d3c:	dc000015 	stw	r16,0(sp)
  801d40:	dfc00215 	stw	ra,8(sp)
  801d44:	2023883a 	mov	r17,r4
  801d48:	2821883a 	mov	r16,r5
  801d4c:	18000226 	beq	r3,zero,801d58 <__swsetup_r+0x30>
  801d50:	18800e17 	ldw	r2,56(r3)
  801d54:	10001f26 	beq	r2,zero,801dd4 <__swsetup_r+0xac>
  801d58:	8100030b 	ldhu	r4,12(r16)
  801d5c:	2080020c 	andi	r2,r4,8
  801d60:	10002826 	beq	r2,zero,801e04 <__swsetup_r+0xdc>
  801d64:	81400417 	ldw	r5,16(r16)
  801d68:	28001d26 	beq	r5,zero,801de0 <__swsetup_r+0xb8>
  801d6c:	2080004c 	andi	r2,r4,1
  801d70:	1005003a 	cmpeq	r2,r2,zero
  801d74:	10000b26 	beq	r2,zero,801da4 <__swsetup_r+0x7c>
  801d78:	2080008c 	andi	r2,r4,2
  801d7c:	10001226 	beq	r2,zero,801dc8 <__swsetup_r+0xa0>
  801d80:	0005883a 	mov	r2,zero
  801d84:	80800215 	stw	r2,8(r16)
  801d88:	28000b26 	beq	r5,zero,801db8 <__swsetup_r+0x90>
  801d8c:	0005883a 	mov	r2,zero
  801d90:	dfc00217 	ldw	ra,8(sp)
  801d94:	dc400117 	ldw	r17,4(sp)
  801d98:	dc000017 	ldw	r16,0(sp)
  801d9c:	dec00304 	addi	sp,sp,12
  801da0:	f800283a 	ret
  801da4:	80800517 	ldw	r2,20(r16)
  801da8:	80000215 	stw	zero,8(r16)
  801dac:	0085c83a 	sub	r2,zero,r2
  801db0:	80800615 	stw	r2,24(r16)
  801db4:	283ff51e 	bne	r5,zero,801d8c <__swsetup_r+0x64>
  801db8:	2080200c 	andi	r2,r4,128
  801dbc:	103ff326 	beq	r2,zero,801d8c <__swsetup_r+0x64>
  801dc0:	00bfffc4 	movi	r2,-1
  801dc4:	003ff206 	br	801d90 <__swsetup_r+0x68>
  801dc8:	80800517 	ldw	r2,20(r16)
  801dcc:	80800215 	stw	r2,8(r16)
  801dd0:	003fed06 	br	801d88 <__swsetup_r+0x60>
  801dd4:	1809883a 	mov	r4,r3
  801dd8:	08020fc0 	call	8020fc <__sinit>
  801ddc:	003fde06 	br	801d58 <__swsetup_r+0x30>
  801de0:	20c0a00c 	andi	r3,r4,640
  801de4:	00808004 	movi	r2,512
  801de8:	18bfe026 	beq	r3,r2,801d6c <__swsetup_r+0x44>
  801dec:	8809883a 	mov	r4,r17
  801df0:	800b883a 	mov	r5,r16
  801df4:	08029480 	call	802948 <__smakebuf_r>
  801df8:	8100030b 	ldhu	r4,12(r16)
  801dfc:	81400417 	ldw	r5,16(r16)
  801e00:	003fda06 	br	801d6c <__swsetup_r+0x44>
  801e04:	2080040c 	andi	r2,r4,16
  801e08:	103fed26 	beq	r2,zero,801dc0 <__swsetup_r+0x98>
  801e0c:	2080010c 	andi	r2,r4,4
  801e10:	10001226 	beq	r2,zero,801e5c <__swsetup_r+0x134>
  801e14:	81400c17 	ldw	r5,48(r16)
  801e18:	28000526 	beq	r5,zero,801e30 <__swsetup_r+0x108>
  801e1c:	80801004 	addi	r2,r16,64
  801e20:	28800226 	beq	r5,r2,801e2c <__swsetup_r+0x104>
  801e24:	8809883a 	mov	r4,r17
  801e28:	08024b40 	call	8024b4 <_free_r>
  801e2c:	80000c15 	stw	zero,48(r16)
  801e30:	8080030b 	ldhu	r2,12(r16)
  801e34:	81400417 	ldw	r5,16(r16)
  801e38:	80000115 	stw	zero,4(r16)
  801e3c:	10bff6cc 	andi	r2,r2,65499
  801e40:	8080030d 	sth	r2,12(r16)
  801e44:	81400015 	stw	r5,0(r16)
  801e48:	8080030b 	ldhu	r2,12(r16)
  801e4c:	10800214 	ori	r2,r2,8
  801e50:	113fffcc 	andi	r4,r2,65535
  801e54:	8080030d 	sth	r2,12(r16)
  801e58:	003fc306 	br	801d68 <__swsetup_r+0x40>
  801e5c:	81400417 	ldw	r5,16(r16)
  801e60:	003ff906 	br	801e48 <__swsetup_r+0x120>

00801e64 <_fflush_r>:
  801e64:	defffb04 	addi	sp,sp,-20
  801e68:	dcc00315 	stw	r19,12(sp)
  801e6c:	dc800215 	stw	r18,8(sp)
  801e70:	dfc00415 	stw	ra,16(sp)
  801e74:	dc400115 	stw	r17,4(sp)
  801e78:	dc000015 	stw	r16,0(sp)
  801e7c:	2027883a 	mov	r19,r4
  801e80:	2825883a 	mov	r18,r5
  801e84:	20000226 	beq	r4,zero,801e90 <_fflush_r+0x2c>
  801e88:	20800e17 	ldw	r2,56(r4)
  801e8c:	10005626 	beq	r2,zero,801fe8 <_fflush_r+0x184>
  801e90:	9100030b 	ldhu	r4,12(r18)
  801e94:	20ffffcc 	andi	r3,r4,65535
  801e98:	18e0001c 	xori	r3,r3,32768
  801e9c:	18e00004 	addi	r3,r3,-32768
  801ea0:	1880020c 	andi	r2,r3,8
  801ea4:	1000261e 	bne	r2,zero,801f40 <_fflush_r+0xdc>
  801ea8:	90c00117 	ldw	r3,4(r18)
  801eac:	20820014 	ori	r2,r4,2048
  801eb0:	9080030d 	sth	r2,12(r18)
  801eb4:	1009883a 	mov	r4,r2
  801eb8:	00c0400e 	bge	zero,r3,801fbc <_fflush_r+0x158>
  801ebc:	92000a17 	ldw	r8,40(r18)
  801ec0:	40004026 	beq	r8,zero,801fc4 <_fflush_r+0x160>
  801ec4:	2084000c 	andi	r2,r4,4096
  801ec8:	10005326 	beq	r2,zero,802018 <_fflush_r+0x1b4>
  801ecc:	94001417 	ldw	r16,80(r18)
  801ed0:	9080030b 	ldhu	r2,12(r18)
  801ed4:	1080010c 	andi	r2,r2,4
  801ed8:	1000481e 	bne	r2,zero,801ffc <_fflush_r+0x198>
  801edc:	91400717 	ldw	r5,28(r18)
  801ee0:	9809883a 	mov	r4,r19
  801ee4:	800d883a 	mov	r6,r16
  801ee8:	000f883a 	mov	r7,zero
  801eec:	403ee83a 	callr	r8
  801ef0:	8080261e 	bne	r16,r2,801f8c <_fflush_r+0x128>
  801ef4:	9080030b 	ldhu	r2,12(r18)
  801ef8:	91000417 	ldw	r4,16(r18)
  801efc:	90000115 	stw	zero,4(r18)
  801f00:	10bdffcc 	andi	r2,r2,63487
  801f04:	10ffffcc 	andi	r3,r2,65535
  801f08:	18c4000c 	andi	r3,r3,4096
  801f0c:	9080030d 	sth	r2,12(r18)
  801f10:	91000015 	stw	r4,0(r18)
  801f14:	18002b26 	beq	r3,zero,801fc4 <_fflush_r+0x160>
  801f18:	0007883a 	mov	r3,zero
  801f1c:	1805883a 	mov	r2,r3
  801f20:	94001415 	stw	r16,80(r18)
  801f24:	dfc00417 	ldw	ra,16(sp)
  801f28:	dcc00317 	ldw	r19,12(sp)
  801f2c:	dc800217 	ldw	r18,8(sp)
  801f30:	dc400117 	ldw	r17,4(sp)
  801f34:	dc000017 	ldw	r16,0(sp)
  801f38:	dec00504 	addi	sp,sp,20
  801f3c:	f800283a 	ret
  801f40:	94400417 	ldw	r17,16(r18)
  801f44:	88001f26 	beq	r17,zero,801fc4 <_fflush_r+0x160>
  801f48:	90800017 	ldw	r2,0(r18)
  801f4c:	18c000cc 	andi	r3,r3,3
  801f50:	94400015 	stw	r17,0(r18)
  801f54:	1461c83a 	sub	r16,r2,r17
  801f58:	18002526 	beq	r3,zero,801ff0 <_fflush_r+0x18c>
  801f5c:	0005883a 	mov	r2,zero
  801f60:	90800215 	stw	r2,8(r18)
  801f64:	0400170e 	bge	zero,r16,801fc4 <_fflush_r+0x160>
  801f68:	90c00917 	ldw	r3,36(r18)
  801f6c:	91400717 	ldw	r5,28(r18)
  801f70:	880d883a 	mov	r6,r17
  801f74:	800f883a 	mov	r7,r16
  801f78:	9809883a 	mov	r4,r19
  801f7c:	183ee83a 	callr	r3
  801f80:	88a3883a 	add	r17,r17,r2
  801f84:	80a1c83a 	sub	r16,r16,r2
  801f88:	00bff616 	blt	zero,r2,801f64 <_fflush_r+0x100>
  801f8c:	9080030b 	ldhu	r2,12(r18)
  801f90:	00ffffc4 	movi	r3,-1
  801f94:	10801014 	ori	r2,r2,64
  801f98:	9080030d 	sth	r2,12(r18)
  801f9c:	1805883a 	mov	r2,r3
  801fa0:	dfc00417 	ldw	ra,16(sp)
  801fa4:	dcc00317 	ldw	r19,12(sp)
  801fa8:	dc800217 	ldw	r18,8(sp)
  801fac:	dc400117 	ldw	r17,4(sp)
  801fb0:	dc000017 	ldw	r16,0(sp)
  801fb4:	dec00504 	addi	sp,sp,20
  801fb8:	f800283a 	ret
  801fbc:	90800f17 	ldw	r2,60(r18)
  801fc0:	00bfbe16 	blt	zero,r2,801ebc <_fflush_r+0x58>
  801fc4:	0007883a 	mov	r3,zero
  801fc8:	1805883a 	mov	r2,r3
  801fcc:	dfc00417 	ldw	ra,16(sp)
  801fd0:	dcc00317 	ldw	r19,12(sp)
  801fd4:	dc800217 	ldw	r18,8(sp)
  801fd8:	dc400117 	ldw	r17,4(sp)
  801fdc:	dc000017 	ldw	r16,0(sp)
  801fe0:	dec00504 	addi	sp,sp,20
  801fe4:	f800283a 	ret
  801fe8:	08020fc0 	call	8020fc <__sinit>
  801fec:	003fa806 	br	801e90 <_fflush_r+0x2c>
  801ff0:	90800517 	ldw	r2,20(r18)
  801ff4:	90800215 	stw	r2,8(r18)
  801ff8:	003fda06 	br	801f64 <_fflush_r+0x100>
  801ffc:	90800117 	ldw	r2,4(r18)
  802000:	90c00c17 	ldw	r3,48(r18)
  802004:	80a1c83a 	sub	r16,r16,r2
  802008:	183fb426 	beq	r3,zero,801edc <_fflush_r+0x78>
  80200c:	90800f17 	ldw	r2,60(r18)
  802010:	80a1c83a 	sub	r16,r16,r2
  802014:	003fb106 	br	801edc <_fflush_r+0x78>
  802018:	91400717 	ldw	r5,28(r18)
  80201c:	9809883a 	mov	r4,r19
  802020:	000d883a 	mov	r6,zero
  802024:	01c00044 	movi	r7,1
  802028:	403ee83a 	callr	r8
  80202c:	1021883a 	mov	r16,r2
  802030:	00bfffc4 	movi	r2,-1
  802034:	80800226 	beq	r16,r2,802040 <_fflush_r+0x1dc>
  802038:	92000a17 	ldw	r8,40(r18)
  80203c:	003fa406 	br	801ed0 <_fflush_r+0x6c>
  802040:	98c00017 	ldw	r3,0(r19)
  802044:	00800744 	movi	r2,29
  802048:	18bfde26 	beq	r3,r2,801fc4 <_fflush_r+0x160>
  80204c:	9080030b 	ldhu	r2,12(r18)
  802050:	8007883a 	mov	r3,r16
  802054:	10801014 	ori	r2,r2,64
  802058:	9080030d 	sth	r2,12(r18)
  80205c:	003fcf06 	br	801f9c <_fflush_r+0x138>

00802060 <fflush>:
  802060:	01402034 	movhi	r5,128
  802064:	29479904 	addi	r5,r5,7780
  802068:	2007883a 	mov	r3,r4
  80206c:	20000526 	beq	r4,zero,802084 <fflush+0x24>
  802070:	00802034 	movhi	r2,128
  802074:	109d7d04 	addi	r2,r2,30196
  802078:	11000017 	ldw	r4,0(r2)
  80207c:	180b883a 	mov	r5,r3
  802080:	0801e641 	jmpi	801e64 <_fflush_r>
  802084:	00802034 	movhi	r2,128
  802088:	109d7e04 	addi	r2,r2,30200
  80208c:	11000017 	ldw	r4,0(r2)
  802090:	08027c81 	jmpi	8027c8 <_fwalk_reent>

00802094 <std>:
  802094:	00802034 	movhi	r2,128
  802098:	108add04 	addi	r2,r2,11124
  80209c:	20800b15 	stw	r2,44(r4)
  8020a0:	00802034 	movhi	r2,128
  8020a4:	108b1804 	addi	r2,r2,11360
  8020a8:	20800815 	stw	r2,32(r4)
  8020ac:	00c02034 	movhi	r3,128
  8020b0:	18caf904 	addi	r3,r3,11236
  8020b4:	00802034 	movhi	r2,128
  8020b8:	108adf04 	addi	r2,r2,11132
  8020bc:	2140030d 	sth	r5,12(r4)
  8020c0:	2180038d 	sth	r6,14(r4)
  8020c4:	20c00915 	stw	r3,36(r4)
  8020c8:	20800a15 	stw	r2,40(r4)
  8020cc:	20000015 	stw	zero,0(r4)
  8020d0:	20000115 	stw	zero,4(r4)
  8020d4:	20000215 	stw	zero,8(r4)
  8020d8:	20000415 	stw	zero,16(r4)
  8020dc:	20000515 	stw	zero,20(r4)
  8020e0:	20000615 	stw	zero,24(r4)
  8020e4:	21000715 	stw	r4,28(r4)
  8020e8:	f800283a 	ret

008020ec <__sfp_lock_acquire>:
  8020ec:	f800283a 	ret

008020f0 <__sfp_lock_release>:
  8020f0:	f800283a 	ret

008020f4 <__sinit_lock_acquire>:
  8020f4:	f800283a 	ret

008020f8 <__sinit_lock_release>:
  8020f8:	f800283a 	ret

008020fc <__sinit>:
  8020fc:	20800e17 	ldw	r2,56(r4)
  802100:	defffd04 	addi	sp,sp,-12
  802104:	dc400115 	stw	r17,4(sp)
  802108:	dc000015 	stw	r16,0(sp)
  80210c:	dfc00215 	stw	ra,8(sp)
  802110:	04400044 	movi	r17,1
  802114:	01400104 	movi	r5,4
  802118:	000d883a 	mov	r6,zero
  80211c:	2021883a 	mov	r16,r4
  802120:	2200bb04 	addi	r8,r4,748
  802124:	200f883a 	mov	r7,r4
  802128:	10000526 	beq	r2,zero,802140 <__sinit+0x44>
  80212c:	dfc00217 	ldw	ra,8(sp)
  802130:	dc400117 	ldw	r17,4(sp)
  802134:	dc000017 	ldw	r16,0(sp)
  802138:	dec00304 	addi	sp,sp,12
  80213c:	f800283a 	ret
  802140:	21000117 	ldw	r4,4(r4)
  802144:	00802034 	movhi	r2,128
  802148:	10887804 	addi	r2,r2,8672
  80214c:	00c000c4 	movi	r3,3
  802150:	80800f15 	stw	r2,60(r16)
  802154:	80c0b915 	stw	r3,740(r16)
  802158:	8200ba15 	stw	r8,744(r16)
  80215c:	84400e15 	stw	r17,56(r16)
  802160:	8000b815 	stw	zero,736(r16)
  802164:	08020940 	call	802094 <std>
  802168:	81000217 	ldw	r4,8(r16)
  80216c:	880d883a 	mov	r6,r17
  802170:	800f883a 	mov	r7,r16
  802174:	01400284 	movi	r5,10
  802178:	08020940 	call	802094 <std>
  80217c:	81000317 	ldw	r4,12(r16)
  802180:	800f883a 	mov	r7,r16
  802184:	01400484 	movi	r5,18
  802188:	01800084 	movi	r6,2
  80218c:	dfc00217 	ldw	ra,8(sp)
  802190:	dc400117 	ldw	r17,4(sp)
  802194:	dc000017 	ldw	r16,0(sp)
  802198:	dec00304 	addi	sp,sp,12
  80219c:	08020941 	jmpi	802094 <std>

008021a0 <__fp_lock>:
  8021a0:	0005883a 	mov	r2,zero
  8021a4:	f800283a 	ret

008021a8 <__fp_unlock>:
  8021a8:	0005883a 	mov	r2,zero
  8021ac:	f800283a 	ret

008021b0 <__fp_unlock_all>:
  8021b0:	00802034 	movhi	r2,128
  8021b4:	109d7d04 	addi	r2,r2,30196
  8021b8:	11000017 	ldw	r4,0(r2)
  8021bc:	01402034 	movhi	r5,128
  8021c0:	29486a04 	addi	r5,r5,8616
  8021c4:	08028901 	jmpi	802890 <_fwalk>

008021c8 <__fp_lock_all>:
  8021c8:	00802034 	movhi	r2,128
  8021cc:	109d7d04 	addi	r2,r2,30196
  8021d0:	11000017 	ldw	r4,0(r2)
  8021d4:	01402034 	movhi	r5,128
  8021d8:	29486804 	addi	r5,r5,8608
  8021dc:	08028901 	jmpi	802890 <_fwalk>

008021e0 <_cleanup_r>:
  8021e0:	01402034 	movhi	r5,128
  8021e4:	294bae04 	addi	r5,r5,11960
  8021e8:	08028901 	jmpi	802890 <_fwalk>

008021ec <_cleanup>:
  8021ec:	00802034 	movhi	r2,128
  8021f0:	109d7e04 	addi	r2,r2,30200
  8021f4:	11000017 	ldw	r4,0(r2)
  8021f8:	08021e01 	jmpi	8021e0 <_cleanup_r>

008021fc <__sfmoreglue>:
  8021fc:	defffc04 	addi	sp,sp,-16
  802200:	dc000015 	stw	r16,0(sp)
  802204:	2821883a 	mov	r16,r5
  802208:	dc400115 	stw	r17,4(sp)
  80220c:	01401704 	movi	r5,92
  802210:	2023883a 	mov	r17,r4
  802214:	8009883a 	mov	r4,r16
  802218:	dfc00315 	stw	ra,12(sp)
  80221c:	dcc00215 	stw	r19,8(sp)
  802220:	08030a00 	call	8030a0 <__mulsi3>
  802224:	11400304 	addi	r5,r2,12
  802228:	8809883a 	mov	r4,r17
  80222c:	1027883a 	mov	r19,r2
  802230:	0800d200 	call	800d20 <_malloc_r>
  802234:	10c00304 	addi	r3,r2,12
  802238:	1023883a 	mov	r17,r2
  80223c:	1809883a 	mov	r4,r3
  802240:	980d883a 	mov	r6,r19
  802244:	000b883a 	mov	r5,zero
  802248:	10000b26 	beq	r2,zero,802278 <__sfmoreglue+0x7c>
  80224c:	14000115 	stw	r16,4(r2)
  802250:	10c00215 	stw	r3,8(r2)
  802254:	10000015 	stw	zero,0(r2)
  802258:	0802adc0 	call	802adc <memset>
  80225c:	8805883a 	mov	r2,r17
  802260:	dfc00317 	ldw	ra,12(sp)
  802264:	dcc00217 	ldw	r19,8(sp)
  802268:	dc400117 	ldw	r17,4(sp)
  80226c:	dc000017 	ldw	r16,0(sp)
  802270:	dec00404 	addi	sp,sp,16
  802274:	f800283a 	ret
  802278:	0023883a 	mov	r17,zero
  80227c:	8805883a 	mov	r2,r17
  802280:	dfc00317 	ldw	ra,12(sp)
  802284:	dcc00217 	ldw	r19,8(sp)
  802288:	dc400117 	ldw	r17,4(sp)
  80228c:	dc000017 	ldw	r16,0(sp)
  802290:	dec00404 	addi	sp,sp,16
  802294:	f800283a 	ret

00802298 <__sfp>:
  802298:	defffd04 	addi	sp,sp,-12
  80229c:	00802034 	movhi	r2,128
  8022a0:	109d7e04 	addi	r2,r2,30200
  8022a4:	dc000015 	stw	r16,0(sp)
  8022a8:	14000017 	ldw	r16,0(r2)
  8022ac:	dc400115 	stw	r17,4(sp)
  8022b0:	dfc00215 	stw	ra,8(sp)
  8022b4:	80800e17 	ldw	r2,56(r16)
  8022b8:	2023883a 	mov	r17,r4
  8022bc:	10002626 	beq	r2,zero,802358 <__sfp+0xc0>
  8022c0:	8400b804 	addi	r16,r16,736
  8022c4:	80800117 	ldw	r2,4(r16)
  8022c8:	81000217 	ldw	r4,8(r16)
  8022cc:	10ffffc4 	addi	r3,r2,-1
  8022d0:	18000916 	blt	r3,zero,8022f8 <__sfp+0x60>
  8022d4:	2080030f 	ldh	r2,12(r4)
  8022d8:	10000b26 	beq	r2,zero,802308 <__sfp+0x70>
  8022dc:	017fffc4 	movi	r5,-1
  8022e0:	00000206 	br	8022ec <__sfp+0x54>
  8022e4:	2080030f 	ldh	r2,12(r4)
  8022e8:	10000726 	beq	r2,zero,802308 <__sfp+0x70>
  8022ec:	18ffffc4 	addi	r3,r3,-1
  8022f0:	21001704 	addi	r4,r4,92
  8022f4:	197ffb1e 	bne	r3,r5,8022e4 <__sfp+0x4c>
  8022f8:	80800017 	ldw	r2,0(r16)
  8022fc:	10001926 	beq	r2,zero,802364 <__sfp+0xcc>
  802300:	1021883a 	mov	r16,r2
  802304:	003fef06 	br	8022c4 <__sfp+0x2c>
  802308:	00bfffc4 	movi	r2,-1
  80230c:	00c00044 	movi	r3,1
  802310:	2080038d 	sth	r2,14(r4)
  802314:	20c0030d 	sth	r3,12(r4)
  802318:	20000015 	stw	zero,0(r4)
  80231c:	20000215 	stw	zero,8(r4)
  802320:	20000115 	stw	zero,4(r4)
  802324:	20000415 	stw	zero,16(r4)
  802328:	20000515 	stw	zero,20(r4)
  80232c:	20000615 	stw	zero,24(r4)
  802330:	20000c15 	stw	zero,48(r4)
  802334:	20000d15 	stw	zero,52(r4)
  802338:	20001115 	stw	zero,68(r4)
  80233c:	20001215 	stw	zero,72(r4)
  802340:	2005883a 	mov	r2,r4
  802344:	dfc00217 	ldw	ra,8(sp)
  802348:	dc400117 	ldw	r17,4(sp)
  80234c:	dc000017 	ldw	r16,0(sp)
  802350:	dec00304 	addi	sp,sp,12
  802354:	f800283a 	ret
  802358:	8009883a 	mov	r4,r16
  80235c:	08020fc0 	call	8020fc <__sinit>
  802360:	003fd706 	br	8022c0 <__sfp+0x28>
  802364:	8809883a 	mov	r4,r17
  802368:	01400104 	movi	r5,4
  80236c:	08021fc0 	call	8021fc <__sfmoreglue>
  802370:	80800015 	stw	r2,0(r16)
  802374:	103fe21e 	bne	r2,zero,802300 <__sfp+0x68>
  802378:	00800304 	movi	r2,12
  80237c:	0009883a 	mov	r4,zero
  802380:	88800015 	stw	r2,0(r17)
  802384:	003fee06 	br	802340 <__sfp+0xa8>

00802388 <_malloc_trim_r>:
  802388:	defffb04 	addi	sp,sp,-20
  80238c:	dcc00315 	stw	r19,12(sp)
  802390:	04c02034 	movhi	r19,128
  802394:	9cd7bc04 	addi	r19,r19,24304
  802398:	dc800215 	stw	r18,8(sp)
  80239c:	dc400115 	stw	r17,4(sp)
  8023a0:	dc000015 	stw	r16,0(sp)
  8023a4:	2823883a 	mov	r17,r5
  8023a8:	2025883a 	mov	r18,r4
  8023ac:	dfc00415 	stw	ra,16(sp)
  8023b0:	080392c0 	call	80392c <__malloc_lock>
  8023b4:	98800217 	ldw	r2,8(r19)
  8023b8:	9009883a 	mov	r4,r18
  8023bc:	000b883a 	mov	r5,zero
  8023c0:	10c00117 	ldw	r3,4(r2)
  8023c4:	00bfff04 	movi	r2,-4
  8023c8:	18a0703a 	and	r16,r3,r2
  8023cc:	8463c83a 	sub	r17,r16,r17
  8023d0:	8c43fbc4 	addi	r17,r17,4079
  8023d4:	8822d33a 	srli	r17,r17,12
  8023d8:	0083ffc4 	movi	r2,4095
  8023dc:	8c7fffc4 	addi	r17,r17,-1
  8023e0:	8822933a 	slli	r17,r17,12
  8023e4:	1440060e 	bge	r2,r17,802400 <_malloc_trim_r+0x78>
  8023e8:	0801cb80 	call	801cb8 <_sbrk_r>
  8023ec:	98c00217 	ldw	r3,8(r19)
  8023f0:	9009883a 	mov	r4,r18
  8023f4:	044bc83a 	sub	r5,zero,r17
  8023f8:	80c7883a 	add	r3,r16,r3
  8023fc:	10c00926 	beq	r2,r3,802424 <_malloc_trim_r+0x9c>
  802400:	080394c0 	call	80394c <__malloc_unlock>
  802404:	0005883a 	mov	r2,zero
  802408:	dfc00417 	ldw	ra,16(sp)
  80240c:	dcc00317 	ldw	r19,12(sp)
  802410:	dc800217 	ldw	r18,8(sp)
  802414:	dc400117 	ldw	r17,4(sp)
  802418:	dc000017 	ldw	r16,0(sp)
  80241c:	dec00504 	addi	sp,sp,20
  802420:	f800283a 	ret
  802424:	9009883a 	mov	r4,r18
  802428:	0801cb80 	call	801cb8 <_sbrk_r>
  80242c:	844dc83a 	sub	r6,r16,r17
  802430:	00ffffc4 	movi	r3,-1
  802434:	9009883a 	mov	r4,r18
  802438:	000b883a 	mov	r5,zero
  80243c:	01c02074 	movhi	r7,129
  802440:	39e46d04 	addi	r7,r7,-28236
  802444:	31800054 	ori	r6,r6,1
  802448:	10c00926 	beq	r2,r3,802470 <_malloc_trim_r+0xe8>
  80244c:	38800017 	ldw	r2,0(r7)
  802450:	98c00217 	ldw	r3,8(r19)
  802454:	9009883a 	mov	r4,r18
  802458:	1445c83a 	sub	r2,r2,r17
  80245c:	38800015 	stw	r2,0(r7)
  802460:	19800115 	stw	r6,4(r3)
  802464:	080394c0 	call	80394c <__malloc_unlock>
  802468:	00800044 	movi	r2,1
  80246c:	003fe606 	br	802408 <_malloc_trim_r+0x80>
  802470:	0801cb80 	call	801cb8 <_sbrk_r>
  802474:	99800217 	ldw	r6,8(r19)
  802478:	100f883a 	mov	r7,r2
  80247c:	9009883a 	mov	r4,r18
  802480:	1187c83a 	sub	r3,r2,r6
  802484:	008003c4 	movi	r2,15
  802488:	19400054 	ori	r5,r3,1
  80248c:	10ffdc0e 	bge	r2,r3,802400 <_malloc_trim_r+0x78>
  802490:	00802034 	movhi	r2,128
  802494:	109d8004 	addi	r2,r2,30208
  802498:	10c00017 	ldw	r3,0(r2)
  80249c:	00802074 	movhi	r2,129
  8024a0:	10a46d04 	addi	r2,r2,-28236
  8024a4:	31400115 	stw	r5,4(r6)
  8024a8:	38c7c83a 	sub	r3,r7,r3
  8024ac:	10c00015 	stw	r3,0(r2)
  8024b0:	003fd306 	br	802400 <_malloc_trim_r+0x78>

008024b4 <_free_r>:
  8024b4:	defffd04 	addi	sp,sp,-12
  8024b8:	dc400115 	stw	r17,4(sp)
  8024bc:	dc000015 	stw	r16,0(sp)
  8024c0:	dfc00215 	stw	ra,8(sp)
  8024c4:	2821883a 	mov	r16,r5
  8024c8:	2023883a 	mov	r17,r4
  8024cc:	28005a26 	beq	r5,zero,802638 <_free_r+0x184>
  8024d0:	080392c0 	call	80392c <__malloc_lock>
  8024d4:	823ffe04 	addi	r8,r16,-8
  8024d8:	41400117 	ldw	r5,4(r8)
  8024dc:	00bfff84 	movi	r2,-2
  8024e0:	02802034 	movhi	r10,128
  8024e4:	5297bc04 	addi	r10,r10,24304
  8024e8:	288e703a 	and	r7,r5,r2
  8024ec:	41cd883a 	add	r6,r8,r7
  8024f0:	30c00117 	ldw	r3,4(r6)
  8024f4:	51000217 	ldw	r4,8(r10)
  8024f8:	00bfff04 	movi	r2,-4
  8024fc:	1892703a 	and	r9,r3,r2
  802500:	5017883a 	mov	r11,r10
  802504:	31006726 	beq	r6,r4,8026a4 <_free_r+0x1f0>
  802508:	2880004c 	andi	r2,r5,1
  80250c:	1005003a 	cmpeq	r2,r2,zero
  802510:	32400115 	stw	r9,4(r6)
  802514:	10001a1e 	bne	r2,zero,802580 <_free_r+0xcc>
  802518:	000b883a 	mov	r5,zero
  80251c:	3247883a 	add	r3,r6,r9
  802520:	18800117 	ldw	r2,4(r3)
  802524:	1080004c 	andi	r2,r2,1
  802528:	1000231e 	bne	r2,zero,8025b8 <_free_r+0x104>
  80252c:	280ac03a 	cmpne	r5,r5,zero
  802530:	3a4f883a 	add	r7,r7,r9
  802534:	2800451e 	bne	r5,zero,80264c <_free_r+0x198>
  802538:	31000217 	ldw	r4,8(r6)
  80253c:	00802034 	movhi	r2,128
  802540:	1097be04 	addi	r2,r2,24312
  802544:	20807b26 	beq	r4,r2,802734 <_free_r+0x280>
  802548:	30800317 	ldw	r2,12(r6)
  80254c:	3a07883a 	add	r3,r7,r8
  802550:	19c00015 	stw	r7,0(r3)
  802554:	11000215 	stw	r4,8(r2)
  802558:	20800315 	stw	r2,12(r4)
  80255c:	38800054 	ori	r2,r7,1
  802560:	40800115 	stw	r2,4(r8)
  802564:	28001a26 	beq	r5,zero,8025d0 <_free_r+0x11c>
  802568:	8809883a 	mov	r4,r17
  80256c:	dfc00217 	ldw	ra,8(sp)
  802570:	dc400117 	ldw	r17,4(sp)
  802574:	dc000017 	ldw	r16,0(sp)
  802578:	dec00304 	addi	sp,sp,12
  80257c:	080394c1 	jmpi	80394c <__malloc_unlock>
  802580:	80bffe17 	ldw	r2,-8(r16)
  802584:	50c00204 	addi	r3,r10,8
  802588:	4091c83a 	sub	r8,r8,r2
  80258c:	41000217 	ldw	r4,8(r8)
  802590:	388f883a 	add	r7,r7,r2
  802594:	20c06126 	beq	r4,r3,80271c <_free_r+0x268>
  802598:	40800317 	ldw	r2,12(r8)
  80259c:	3247883a 	add	r3,r6,r9
  8025a0:	000b883a 	mov	r5,zero
  8025a4:	11000215 	stw	r4,8(r2)
  8025a8:	20800315 	stw	r2,12(r4)
  8025ac:	18800117 	ldw	r2,4(r3)
  8025b0:	1080004c 	andi	r2,r2,1
  8025b4:	103fdd26 	beq	r2,zero,80252c <_free_r+0x78>
  8025b8:	38800054 	ori	r2,r7,1
  8025bc:	3a07883a 	add	r3,r7,r8
  8025c0:	280ac03a 	cmpne	r5,r5,zero
  8025c4:	40800115 	stw	r2,4(r8)
  8025c8:	19c00015 	stw	r7,0(r3)
  8025cc:	283fe61e 	bne	r5,zero,802568 <_free_r+0xb4>
  8025d0:	00807fc4 	movi	r2,511
  8025d4:	11c01f2e 	bgeu	r2,r7,802654 <_free_r+0x1a0>
  8025d8:	3806d27a 	srli	r3,r7,9
  8025dc:	1800481e 	bne	r3,zero,802700 <_free_r+0x24c>
  8025e0:	3804d0fa 	srli	r2,r7,3
  8025e4:	100690fa 	slli	r3,r2,3
  8025e8:	1acd883a 	add	r6,r3,r11
  8025ec:	31400217 	ldw	r5,8(r6)
  8025f0:	31405926 	beq	r6,r5,802758 <_free_r+0x2a4>
  8025f4:	28800117 	ldw	r2,4(r5)
  8025f8:	00ffff04 	movi	r3,-4
  8025fc:	10c4703a 	and	r2,r2,r3
  802600:	3880022e 	bgeu	r7,r2,80260c <_free_r+0x158>
  802604:	29400217 	ldw	r5,8(r5)
  802608:	317ffa1e 	bne	r6,r5,8025f4 <_free_r+0x140>
  80260c:	29800317 	ldw	r6,12(r5)
  802610:	41800315 	stw	r6,12(r8)
  802614:	41400215 	stw	r5,8(r8)
  802618:	8809883a 	mov	r4,r17
  80261c:	2a000315 	stw	r8,12(r5)
  802620:	32000215 	stw	r8,8(r6)
  802624:	dfc00217 	ldw	ra,8(sp)
  802628:	dc400117 	ldw	r17,4(sp)
  80262c:	dc000017 	ldw	r16,0(sp)
  802630:	dec00304 	addi	sp,sp,12
  802634:	080394c1 	jmpi	80394c <__malloc_unlock>
  802638:	dfc00217 	ldw	ra,8(sp)
  80263c:	dc400117 	ldw	r17,4(sp)
  802640:	dc000017 	ldw	r16,0(sp)
  802644:	dec00304 	addi	sp,sp,12
  802648:	f800283a 	ret
  80264c:	31000217 	ldw	r4,8(r6)
  802650:	003fbd06 	br	802548 <_free_r+0x94>
  802654:	3806d0fa 	srli	r3,r7,3
  802658:	00800044 	movi	r2,1
  80265c:	51400117 	ldw	r5,4(r10)
  802660:	180890fa 	slli	r4,r3,3
  802664:	1807d0ba 	srai	r3,r3,2
  802668:	22c9883a 	add	r4,r4,r11
  80266c:	21800217 	ldw	r6,8(r4)
  802670:	10c4983a 	sll	r2,r2,r3
  802674:	41000315 	stw	r4,12(r8)
  802678:	41800215 	stw	r6,8(r8)
  80267c:	288ab03a 	or	r5,r5,r2
  802680:	22000215 	stw	r8,8(r4)
  802684:	8809883a 	mov	r4,r17
  802688:	51400115 	stw	r5,4(r10)
  80268c:	32000315 	stw	r8,12(r6)
  802690:	dfc00217 	ldw	ra,8(sp)
  802694:	dc400117 	ldw	r17,4(sp)
  802698:	dc000017 	ldw	r16,0(sp)
  80269c:	dec00304 	addi	sp,sp,12
  8026a0:	080394c1 	jmpi	80394c <__malloc_unlock>
  8026a4:	2880004c 	andi	r2,r5,1
  8026a8:	3a4d883a 	add	r6,r7,r9
  8026ac:	1000071e 	bne	r2,zero,8026cc <_free_r+0x218>
  8026b0:	80bffe17 	ldw	r2,-8(r16)
  8026b4:	4091c83a 	sub	r8,r8,r2
  8026b8:	41000317 	ldw	r4,12(r8)
  8026bc:	40c00217 	ldw	r3,8(r8)
  8026c0:	308d883a 	add	r6,r6,r2
  8026c4:	20c00215 	stw	r3,8(r4)
  8026c8:	19000315 	stw	r4,12(r3)
  8026cc:	00802034 	movhi	r2,128
  8026d0:	109d7f04 	addi	r2,r2,30204
  8026d4:	11000017 	ldw	r4,0(r2)
  8026d8:	30c00054 	ori	r3,r6,1
  8026dc:	52000215 	stw	r8,8(r10)
  8026e0:	40c00115 	stw	r3,4(r8)
  8026e4:	313fa036 	bltu	r6,r4,802568 <_free_r+0xb4>
  8026e8:	00802074 	movhi	r2,129
  8026ec:	10a46304 	addi	r2,r2,-28276
  8026f0:	11400017 	ldw	r5,0(r2)
  8026f4:	8809883a 	mov	r4,r17
  8026f8:	08023880 	call	802388 <_malloc_trim_r>
  8026fc:	003f9a06 	br	802568 <_free_r+0xb4>
  802700:	00800104 	movi	r2,4
  802704:	10c0072e 	bgeu	r2,r3,802724 <_free_r+0x270>
  802708:	00800504 	movi	r2,20
  80270c:	10c01936 	bltu	r2,r3,802774 <_free_r+0x2c0>
  802710:	188016c4 	addi	r2,r3,91
  802714:	100690fa 	slli	r3,r2,3
  802718:	003fb306 	br	8025e8 <_free_r+0x134>
  80271c:	01400044 	movi	r5,1
  802720:	003f7e06 	br	80251c <_free_r+0x68>
  802724:	3804d1ba 	srli	r2,r7,6
  802728:	10800e04 	addi	r2,r2,56
  80272c:	100690fa 	slli	r3,r2,3
  802730:	003fad06 	br	8025e8 <_free_r+0x134>
  802734:	22000315 	stw	r8,12(r4)
  802738:	22000215 	stw	r8,8(r4)
  80273c:	3a05883a 	add	r2,r7,r8
  802740:	38c00054 	ori	r3,r7,1
  802744:	11c00015 	stw	r7,0(r2)
  802748:	41000215 	stw	r4,8(r8)
  80274c:	40c00115 	stw	r3,4(r8)
  802750:	41000315 	stw	r4,12(r8)
  802754:	003f8406 	br	802568 <_free_r+0xb4>
  802758:	1005d0ba 	srai	r2,r2,2
  80275c:	00c00044 	movi	r3,1
  802760:	51000117 	ldw	r4,4(r10)
  802764:	1886983a 	sll	r3,r3,r2
  802768:	20c8b03a 	or	r4,r4,r3
  80276c:	51000115 	stw	r4,4(r10)
  802770:	003fa706 	br	802610 <_free_r+0x15c>
  802774:	00801504 	movi	r2,84
  802778:	10c00436 	bltu	r2,r3,80278c <_free_r+0x2d8>
  80277c:	3804d33a 	srli	r2,r7,12
  802780:	10801b84 	addi	r2,r2,110
  802784:	100690fa 	slli	r3,r2,3
  802788:	003f9706 	br	8025e8 <_free_r+0x134>
  80278c:	00805504 	movi	r2,340
  802790:	10c00436 	bltu	r2,r3,8027a4 <_free_r+0x2f0>
  802794:	3804d3fa 	srli	r2,r7,15
  802798:	10801dc4 	addi	r2,r2,119
  80279c:	100690fa 	slli	r3,r2,3
  8027a0:	003f9106 	br	8025e8 <_free_r+0x134>
  8027a4:	00815504 	movi	r2,1364
  8027a8:	10c0032e 	bgeu	r2,r3,8027b8 <_free_r+0x304>
  8027ac:	00801f84 	movi	r2,126
  8027b0:	00c0fc04 	movi	r3,1008
  8027b4:	003f8c06 	br	8025e8 <_free_r+0x134>
  8027b8:	3804d4ba 	srli	r2,r7,18
  8027bc:	10801f04 	addi	r2,r2,124
  8027c0:	100690fa 	slli	r3,r2,3
  8027c4:	003f8806 	br	8025e8 <_free_r+0x134>

008027c8 <_fwalk_reent>:
  8027c8:	defff704 	addi	sp,sp,-36
  8027cc:	dcc00315 	stw	r19,12(sp)
  8027d0:	24c0b804 	addi	r19,r4,736
  8027d4:	dd800615 	stw	r22,24(sp)
  8027d8:	dd400515 	stw	r21,20(sp)
  8027dc:	dfc00815 	stw	ra,32(sp)
  8027e0:	ddc00715 	stw	r23,28(sp)
  8027e4:	dd000415 	stw	r20,16(sp)
  8027e8:	dc800215 	stw	r18,8(sp)
  8027ec:	dc400115 	stw	r17,4(sp)
  8027f0:	dc000015 	stw	r16,0(sp)
  8027f4:	202b883a 	mov	r21,r4
  8027f8:	282d883a 	mov	r22,r5
  8027fc:	08020ec0 	call	8020ec <__sfp_lock_acquire>
  802800:	98002126 	beq	r19,zero,802888 <_fwalk_reent+0xc0>
  802804:	002f883a 	mov	r23,zero
  802808:	9c800117 	ldw	r18,4(r19)
  80280c:	9c000217 	ldw	r16,8(r19)
  802810:	90bfffc4 	addi	r2,r18,-1
  802814:	10000d16 	blt	r2,zero,80284c <_fwalk_reent+0x84>
  802818:	0023883a 	mov	r17,zero
  80281c:	053fffc4 	movi	r20,-1
  802820:	8080030f 	ldh	r2,12(r16)
  802824:	8c400044 	addi	r17,r17,1
  802828:	10000626 	beq	r2,zero,802844 <_fwalk_reent+0x7c>
  80282c:	8080038f 	ldh	r2,14(r16)
  802830:	800b883a 	mov	r5,r16
  802834:	a809883a 	mov	r4,r21
  802838:	15000226 	beq	r2,r20,802844 <_fwalk_reent+0x7c>
  80283c:	b03ee83a 	callr	r22
  802840:	b8aeb03a 	or	r23,r23,r2
  802844:	84001704 	addi	r16,r16,92
  802848:	947ff51e 	bne	r18,r17,802820 <_fwalk_reent+0x58>
  80284c:	9cc00017 	ldw	r19,0(r19)
  802850:	983fed1e 	bne	r19,zero,802808 <_fwalk_reent+0x40>
  802854:	08020f00 	call	8020f0 <__sfp_lock_release>
  802858:	b805883a 	mov	r2,r23
  80285c:	dfc00817 	ldw	ra,32(sp)
  802860:	ddc00717 	ldw	r23,28(sp)
  802864:	dd800617 	ldw	r22,24(sp)
  802868:	dd400517 	ldw	r21,20(sp)
  80286c:	dd000417 	ldw	r20,16(sp)
  802870:	dcc00317 	ldw	r19,12(sp)
  802874:	dc800217 	ldw	r18,8(sp)
  802878:	dc400117 	ldw	r17,4(sp)
  80287c:	dc000017 	ldw	r16,0(sp)
  802880:	dec00904 	addi	sp,sp,36
  802884:	f800283a 	ret
  802888:	002f883a 	mov	r23,zero
  80288c:	003ff106 	br	802854 <_fwalk_reent+0x8c>

00802890 <_fwalk>:
  802890:	defff804 	addi	sp,sp,-32
  802894:	dcc00315 	stw	r19,12(sp)
  802898:	24c0b804 	addi	r19,r4,736
  80289c:	dd400515 	stw	r21,20(sp)
  8028a0:	dfc00715 	stw	ra,28(sp)
  8028a4:	dd800615 	stw	r22,24(sp)
  8028a8:	dd000415 	stw	r20,16(sp)
  8028ac:	dc800215 	stw	r18,8(sp)
  8028b0:	dc400115 	stw	r17,4(sp)
  8028b4:	dc000015 	stw	r16,0(sp)
  8028b8:	282b883a 	mov	r21,r5
  8028bc:	08020ec0 	call	8020ec <__sfp_lock_acquire>
  8028c0:	98001f26 	beq	r19,zero,802940 <_fwalk+0xb0>
  8028c4:	002d883a 	mov	r22,zero
  8028c8:	9c800117 	ldw	r18,4(r19)
  8028cc:	9c000217 	ldw	r16,8(r19)
  8028d0:	90bfffc4 	addi	r2,r18,-1
  8028d4:	10000c16 	blt	r2,zero,802908 <_fwalk+0x78>
  8028d8:	0023883a 	mov	r17,zero
  8028dc:	053fffc4 	movi	r20,-1
  8028e0:	8080030f 	ldh	r2,12(r16)
  8028e4:	8c400044 	addi	r17,r17,1
  8028e8:	10000526 	beq	r2,zero,802900 <_fwalk+0x70>
  8028ec:	8080038f 	ldh	r2,14(r16)
  8028f0:	8009883a 	mov	r4,r16
  8028f4:	15000226 	beq	r2,r20,802900 <_fwalk+0x70>
  8028f8:	a83ee83a 	callr	r21
  8028fc:	b0acb03a 	or	r22,r22,r2
  802900:	84001704 	addi	r16,r16,92
  802904:	947ff61e 	bne	r18,r17,8028e0 <_fwalk+0x50>
  802908:	9cc00017 	ldw	r19,0(r19)
  80290c:	983fee1e 	bne	r19,zero,8028c8 <_fwalk+0x38>
  802910:	08020f00 	call	8020f0 <__sfp_lock_release>
  802914:	b005883a 	mov	r2,r22
  802918:	dfc00717 	ldw	ra,28(sp)
  80291c:	dd800617 	ldw	r22,24(sp)
  802920:	dd400517 	ldw	r21,20(sp)
  802924:	dd000417 	ldw	r20,16(sp)
  802928:	dcc00317 	ldw	r19,12(sp)
  80292c:	dc800217 	ldw	r18,8(sp)
  802930:	dc400117 	ldw	r17,4(sp)
  802934:	dc000017 	ldw	r16,0(sp)
  802938:	dec00804 	addi	sp,sp,32
  80293c:	f800283a 	ret
  802940:	002d883a 	mov	r22,zero
  802944:	003ff206 	br	802910 <_fwalk+0x80>

00802948 <__smakebuf_r>:
  802948:	2880030b 	ldhu	r2,12(r5)
  80294c:	deffed04 	addi	sp,sp,-76
  802950:	dc401015 	stw	r17,64(sp)
  802954:	1080008c 	andi	r2,r2,2
  802958:	dc000f15 	stw	r16,60(sp)
  80295c:	dfc01215 	stw	ra,72(sp)
  802960:	dc801115 	stw	r18,68(sp)
  802964:	2821883a 	mov	r16,r5
  802968:	2023883a 	mov	r17,r4
  80296c:	10000b26 	beq	r2,zero,80299c <__smakebuf_r+0x54>
  802970:	28c010c4 	addi	r3,r5,67
  802974:	00800044 	movi	r2,1
  802978:	28800515 	stw	r2,20(r5)
  80297c:	28c00415 	stw	r3,16(r5)
  802980:	28c00015 	stw	r3,0(r5)
  802984:	dfc01217 	ldw	ra,72(sp)
  802988:	dc801117 	ldw	r18,68(sp)
  80298c:	dc401017 	ldw	r17,64(sp)
  802990:	dc000f17 	ldw	r16,60(sp)
  802994:	dec01304 	addi	sp,sp,76
  802998:	f800283a 	ret
  80299c:	2940038f 	ldh	r5,14(r5)
  8029a0:	28002116 	blt	r5,zero,802a28 <__smakebuf_r+0xe0>
  8029a4:	d80d883a 	mov	r6,sp
  8029a8:	0802ecc0 	call	802ecc <_fstat_r>
  8029ac:	10001e16 	blt	r2,zero,802a28 <__smakebuf_r+0xe0>
  8029b0:	d8800117 	ldw	r2,4(sp)
  8029b4:	00e00014 	movui	r3,32768
  8029b8:	113c000c 	andi	r4,r2,61440
  8029bc:	20c03126 	beq	r4,r3,802a84 <__smakebuf_r+0x13c>
  8029c0:	8080030b 	ldhu	r2,12(r16)
  8029c4:	00c80004 	movi	r3,8192
  8029c8:	10820014 	ori	r2,r2,2048
  8029cc:	8080030d 	sth	r2,12(r16)
  8029d0:	20c01e26 	beq	r4,r3,802a4c <__smakebuf_r+0x104>
  8029d4:	04810004 	movi	r18,1024
  8029d8:	8809883a 	mov	r4,r17
  8029dc:	900b883a 	mov	r5,r18
  8029e0:	0800d200 	call	800d20 <_malloc_r>
  8029e4:	1009883a 	mov	r4,r2
  8029e8:	10003126 	beq	r2,zero,802ab0 <__smakebuf_r+0x168>
  8029ec:	80c0030b 	ldhu	r3,12(r16)
  8029f0:	00802034 	movhi	r2,128
  8029f4:	10887804 	addi	r2,r2,8672
  8029f8:	88800f15 	stw	r2,60(r17)
  8029fc:	18c02014 	ori	r3,r3,128
  802a00:	84800515 	stw	r18,20(r16)
  802a04:	80c0030d 	sth	r3,12(r16)
  802a08:	81000415 	stw	r4,16(r16)
  802a0c:	81000015 	stw	r4,0(r16)
  802a10:	dfc01217 	ldw	ra,72(sp)
  802a14:	dc801117 	ldw	r18,68(sp)
  802a18:	dc401017 	ldw	r17,64(sp)
  802a1c:	dc000f17 	ldw	r16,60(sp)
  802a20:	dec01304 	addi	sp,sp,76
  802a24:	f800283a 	ret
  802a28:	80c0030b 	ldhu	r3,12(r16)
  802a2c:	1880200c 	andi	r2,r3,128
  802a30:	10000426 	beq	r2,zero,802a44 <__smakebuf_r+0xfc>
  802a34:	04801004 	movi	r18,64
  802a38:	18820014 	ori	r2,r3,2048
  802a3c:	8080030d 	sth	r2,12(r16)
  802a40:	003fe506 	br	8029d8 <__smakebuf_r+0x90>
  802a44:	04810004 	movi	r18,1024
  802a48:	003ffb06 	br	802a38 <__smakebuf_r+0xf0>
  802a4c:	8140038f 	ldh	r5,14(r16)
  802a50:	8809883a 	mov	r4,r17
  802a54:	0802f400 	call	802f40 <_isatty_r>
  802a58:	103fde26 	beq	r2,zero,8029d4 <__smakebuf_r+0x8c>
  802a5c:	8080030b 	ldhu	r2,12(r16)
  802a60:	80c010c4 	addi	r3,r16,67
  802a64:	04810004 	movi	r18,1024
  802a68:	10800054 	ori	r2,r2,1
  802a6c:	8080030d 	sth	r2,12(r16)
  802a70:	00800044 	movi	r2,1
  802a74:	80c00415 	stw	r3,16(r16)
  802a78:	80800515 	stw	r2,20(r16)
  802a7c:	80c00015 	stw	r3,0(r16)
  802a80:	003fd506 	br	8029d8 <__smakebuf_r+0x90>
  802a84:	80c00a17 	ldw	r3,40(r16)
  802a88:	00802034 	movhi	r2,128
  802a8c:	108adf04 	addi	r2,r2,11132
  802a90:	18bfcb1e 	bne	r3,r2,8029c0 <__smakebuf_r+0x78>
  802a94:	8080030b 	ldhu	r2,12(r16)
  802a98:	00c10004 	movi	r3,1024
  802a9c:	1825883a 	mov	r18,r3
  802aa0:	10c4b03a 	or	r2,r2,r3
  802aa4:	8080030d 	sth	r2,12(r16)
  802aa8:	80c01315 	stw	r3,76(r16)
  802aac:	003fca06 	br	8029d8 <__smakebuf_r+0x90>
  802ab0:	8100030b 	ldhu	r4,12(r16)
  802ab4:	2080800c 	andi	r2,r4,512
  802ab8:	103fb21e 	bne	r2,zero,802984 <__smakebuf_r+0x3c>
  802abc:	80c010c4 	addi	r3,r16,67
  802ac0:	21000094 	ori	r4,r4,2
  802ac4:	00800044 	movi	r2,1
  802ac8:	80800515 	stw	r2,20(r16)
  802acc:	8100030d 	sth	r4,12(r16)
  802ad0:	80c00415 	stw	r3,16(r16)
  802ad4:	80c00015 	stw	r3,0(r16)
  802ad8:	003faa06 	br	802984 <__smakebuf_r+0x3c>

00802adc <memset>:
  802adc:	008000c4 	movi	r2,3
  802ae0:	29403fcc 	andi	r5,r5,255
  802ae4:	2007883a 	mov	r3,r4
  802ae8:	1180022e 	bgeu	r2,r6,802af4 <memset+0x18>
  802aec:	2084703a 	and	r2,r4,r2
  802af0:	10000826 	beq	r2,zero,802b14 <memset+0x38>
  802af4:	30000526 	beq	r6,zero,802b0c <memset+0x30>
  802af8:	2805883a 	mov	r2,r5
  802afc:	30cd883a 	add	r6,r6,r3
  802b00:	18800005 	stb	r2,0(r3)
  802b04:	18c00044 	addi	r3,r3,1
  802b08:	19bffd1e 	bne	r3,r6,802b00 <memset+0x24>
  802b0c:	2005883a 	mov	r2,r4
  802b10:	f800283a 	ret
  802b14:	2804923a 	slli	r2,r5,8
  802b18:	020003c4 	movi	r8,15
  802b1c:	200f883a 	mov	r7,r4
  802b20:	2884b03a 	or	r2,r5,r2
  802b24:	1006943a 	slli	r3,r2,16
  802b28:	10c6b03a 	or	r3,r2,r3
  802b2c:	41800a2e 	bgeu	r8,r6,802b58 <memset+0x7c>
  802b30:	4005883a 	mov	r2,r8
  802b34:	31bffc04 	addi	r6,r6,-16
  802b38:	38c00015 	stw	r3,0(r7)
  802b3c:	38c00115 	stw	r3,4(r7)
  802b40:	38c00215 	stw	r3,8(r7)
  802b44:	38c00315 	stw	r3,12(r7)
  802b48:	39c00404 	addi	r7,r7,16
  802b4c:	11bff936 	bltu	r2,r6,802b34 <memset+0x58>
  802b50:	008000c4 	movi	r2,3
  802b54:	1180052e 	bgeu	r2,r6,802b6c <memset+0x90>
  802b58:	31bfff04 	addi	r6,r6,-4
  802b5c:	008000c4 	movi	r2,3
  802b60:	38c00015 	stw	r3,0(r7)
  802b64:	39c00104 	addi	r7,r7,4
  802b68:	11bffb36 	bltu	r2,r6,802b58 <memset+0x7c>
  802b6c:	3807883a 	mov	r3,r7
  802b70:	003fe006 	br	802af4 <memset+0x18>

00802b74 <__sclose>:
  802b74:	2940038f 	ldh	r5,14(r5)
  802b78:	0802d381 	jmpi	802d38 <_close_r>

00802b7c <__sseek>:
  802b7c:	defffe04 	addi	sp,sp,-8
  802b80:	dc000015 	stw	r16,0(sp)
  802b84:	2821883a 	mov	r16,r5
  802b88:	2940038f 	ldh	r5,14(r5)
  802b8c:	dfc00115 	stw	ra,4(sp)
  802b90:	0802fb00 	call	802fb0 <_lseek_r>
  802b94:	1007883a 	mov	r3,r2
  802b98:	00bfffc4 	movi	r2,-1
  802b9c:	18800926 	beq	r3,r2,802bc4 <__sseek+0x48>
  802ba0:	8080030b 	ldhu	r2,12(r16)
  802ba4:	80c01415 	stw	r3,80(r16)
  802ba8:	10840014 	ori	r2,r2,4096
  802bac:	8080030d 	sth	r2,12(r16)
  802bb0:	1805883a 	mov	r2,r3
  802bb4:	dfc00117 	ldw	ra,4(sp)
  802bb8:	dc000017 	ldw	r16,0(sp)
  802bbc:	dec00204 	addi	sp,sp,8
  802bc0:	f800283a 	ret
  802bc4:	8080030b 	ldhu	r2,12(r16)
  802bc8:	10bbffcc 	andi	r2,r2,61439
  802bcc:	8080030d 	sth	r2,12(r16)
  802bd0:	1805883a 	mov	r2,r3
  802bd4:	dfc00117 	ldw	ra,4(sp)
  802bd8:	dc000017 	ldw	r16,0(sp)
  802bdc:	dec00204 	addi	sp,sp,8
  802be0:	f800283a 	ret

00802be4 <__swrite>:
  802be4:	2880030b 	ldhu	r2,12(r5)
  802be8:	defffb04 	addi	sp,sp,-20
  802bec:	dcc00315 	stw	r19,12(sp)
  802bf0:	1080400c 	andi	r2,r2,256
  802bf4:	dc800215 	stw	r18,8(sp)
  802bf8:	dc400115 	stw	r17,4(sp)
  802bfc:	dc000015 	stw	r16,0(sp)
  802c00:	3027883a 	mov	r19,r6
  802c04:	3825883a 	mov	r18,r7
  802c08:	dfc00415 	stw	ra,16(sp)
  802c0c:	2821883a 	mov	r16,r5
  802c10:	000d883a 	mov	r6,zero
  802c14:	01c00084 	movi	r7,2
  802c18:	2023883a 	mov	r17,r4
  802c1c:	10000226 	beq	r2,zero,802c28 <__swrite+0x44>
  802c20:	2940038f 	ldh	r5,14(r5)
  802c24:	0802fb00 	call	802fb0 <_lseek_r>
  802c28:	8080030b 	ldhu	r2,12(r16)
  802c2c:	8140038f 	ldh	r5,14(r16)
  802c30:	8809883a 	mov	r4,r17
  802c34:	10bbffcc 	andi	r2,r2,61439
  802c38:	980d883a 	mov	r6,r19
  802c3c:	900f883a 	mov	r7,r18
  802c40:	8080030d 	sth	r2,12(r16)
  802c44:	dfc00417 	ldw	ra,16(sp)
  802c48:	dcc00317 	ldw	r19,12(sp)
  802c4c:	dc800217 	ldw	r18,8(sp)
  802c50:	dc400117 	ldw	r17,4(sp)
  802c54:	dc000017 	ldw	r16,0(sp)
  802c58:	dec00504 	addi	sp,sp,20
  802c5c:	0802cc01 	jmpi	802cc0 <_write_r>

00802c60 <__sread>:
  802c60:	defffe04 	addi	sp,sp,-8
  802c64:	dc000015 	stw	r16,0(sp)
  802c68:	2821883a 	mov	r16,r5
  802c6c:	2940038f 	ldh	r5,14(r5)
  802c70:	dfc00115 	stw	ra,4(sp)
  802c74:	08030280 	call	803028 <_read_r>
  802c78:	1007883a 	mov	r3,r2
  802c7c:	10000816 	blt	r2,zero,802ca0 <__sread+0x40>
  802c80:	80801417 	ldw	r2,80(r16)
  802c84:	10c5883a 	add	r2,r2,r3
  802c88:	80801415 	stw	r2,80(r16)
  802c8c:	1805883a 	mov	r2,r3
  802c90:	dfc00117 	ldw	ra,4(sp)
  802c94:	dc000017 	ldw	r16,0(sp)
  802c98:	dec00204 	addi	sp,sp,8
  802c9c:	f800283a 	ret
  802ca0:	8080030b 	ldhu	r2,12(r16)
  802ca4:	10bbffcc 	andi	r2,r2,61439
  802ca8:	8080030d 	sth	r2,12(r16)
  802cac:	1805883a 	mov	r2,r3
  802cb0:	dfc00117 	ldw	ra,4(sp)
  802cb4:	dc000017 	ldw	r16,0(sp)
  802cb8:	dec00204 	addi	sp,sp,8
  802cbc:	f800283a 	ret

00802cc0 <_write_r>:
  802cc0:	defffd04 	addi	sp,sp,-12
  802cc4:	dc000015 	stw	r16,0(sp)
  802cc8:	04002074 	movhi	r16,129
  802ccc:	84246604 	addi	r16,r16,-28264
  802cd0:	dc400115 	stw	r17,4(sp)
  802cd4:	80000015 	stw	zero,0(r16)
  802cd8:	2023883a 	mov	r17,r4
  802cdc:	2809883a 	mov	r4,r5
  802ce0:	300b883a 	mov	r5,r6
  802ce4:	380d883a 	mov	r6,r7
  802ce8:	dfc00215 	stw	ra,8(sp)
  802cec:	0803c240 	call	803c24 <write>
  802cf0:	1007883a 	mov	r3,r2
  802cf4:	00bfffc4 	movi	r2,-1
  802cf8:	18800626 	beq	r3,r2,802d14 <_write_r+0x54>
  802cfc:	1805883a 	mov	r2,r3
  802d00:	dfc00217 	ldw	ra,8(sp)
  802d04:	dc400117 	ldw	r17,4(sp)
  802d08:	dc000017 	ldw	r16,0(sp)
  802d0c:	dec00304 	addi	sp,sp,12
  802d10:	f800283a 	ret
  802d14:	80800017 	ldw	r2,0(r16)
  802d18:	103ff826 	beq	r2,zero,802cfc <_write_r+0x3c>
  802d1c:	88800015 	stw	r2,0(r17)
  802d20:	1805883a 	mov	r2,r3
  802d24:	dfc00217 	ldw	ra,8(sp)
  802d28:	dc400117 	ldw	r17,4(sp)
  802d2c:	dc000017 	ldw	r16,0(sp)
  802d30:	dec00304 	addi	sp,sp,12
  802d34:	f800283a 	ret

00802d38 <_close_r>:
  802d38:	defffd04 	addi	sp,sp,-12
  802d3c:	dc000015 	stw	r16,0(sp)
  802d40:	04002074 	movhi	r16,129
  802d44:	84246604 	addi	r16,r16,-28264
  802d48:	dc400115 	stw	r17,4(sp)
  802d4c:	80000015 	stw	zero,0(r16)
  802d50:	2023883a 	mov	r17,r4
  802d54:	2809883a 	mov	r4,r5
  802d58:	dfc00215 	stw	ra,8(sp)
  802d5c:	08030d80 	call	8030d8 <close>
  802d60:	1007883a 	mov	r3,r2
  802d64:	00bfffc4 	movi	r2,-1
  802d68:	18800626 	beq	r3,r2,802d84 <_close_r+0x4c>
  802d6c:	1805883a 	mov	r2,r3
  802d70:	dfc00217 	ldw	ra,8(sp)
  802d74:	dc400117 	ldw	r17,4(sp)
  802d78:	dc000017 	ldw	r16,0(sp)
  802d7c:	dec00304 	addi	sp,sp,12
  802d80:	f800283a 	ret
  802d84:	80800017 	ldw	r2,0(r16)
  802d88:	103ff826 	beq	r2,zero,802d6c <_close_r+0x34>
  802d8c:	88800015 	stw	r2,0(r17)
  802d90:	1805883a 	mov	r2,r3
  802d94:	dfc00217 	ldw	ra,8(sp)
  802d98:	dc400117 	ldw	r17,4(sp)
  802d9c:	dc000017 	ldw	r16,0(sp)
  802da0:	dec00304 	addi	sp,sp,12
  802da4:	f800283a 	ret

00802da8 <_fclose_r>:
  802da8:	defffc04 	addi	sp,sp,-16
  802dac:	dc400115 	stw	r17,4(sp)
  802db0:	dc000015 	stw	r16,0(sp)
  802db4:	dfc00315 	stw	ra,12(sp)
  802db8:	dc800215 	stw	r18,8(sp)
  802dbc:	2821883a 	mov	r16,r5
  802dc0:	2023883a 	mov	r17,r4
  802dc4:	28002926 	beq	r5,zero,802e6c <_fclose_r+0xc4>
  802dc8:	08020ec0 	call	8020ec <__sfp_lock_acquire>
  802dcc:	88000226 	beq	r17,zero,802dd8 <_fclose_r+0x30>
  802dd0:	88800e17 	ldw	r2,56(r17)
  802dd4:	10002d26 	beq	r2,zero,802e8c <_fclose_r+0xe4>
  802dd8:	8080030f 	ldh	r2,12(r16)
  802ddc:	10002226 	beq	r2,zero,802e68 <_fclose_r+0xc0>
  802de0:	8809883a 	mov	r4,r17
  802de4:	800b883a 	mov	r5,r16
  802de8:	0801e640 	call	801e64 <_fflush_r>
  802dec:	1025883a 	mov	r18,r2
  802df0:	80800b17 	ldw	r2,44(r16)
  802df4:	10000426 	beq	r2,zero,802e08 <_fclose_r+0x60>
  802df8:	81400717 	ldw	r5,28(r16)
  802dfc:	8809883a 	mov	r4,r17
  802e00:	103ee83a 	callr	r2
  802e04:	10002a16 	blt	r2,zero,802eb0 <_fclose_r+0x108>
  802e08:	8080030b 	ldhu	r2,12(r16)
  802e0c:	1080200c 	andi	r2,r2,128
  802e10:	1000231e 	bne	r2,zero,802ea0 <_fclose_r+0xf8>
  802e14:	81400c17 	ldw	r5,48(r16)
  802e18:	28000526 	beq	r5,zero,802e30 <_fclose_r+0x88>
  802e1c:	80801004 	addi	r2,r16,64
  802e20:	28800226 	beq	r5,r2,802e2c <_fclose_r+0x84>
  802e24:	8809883a 	mov	r4,r17
  802e28:	08024b40 	call	8024b4 <_free_r>
  802e2c:	80000c15 	stw	zero,48(r16)
  802e30:	81401117 	ldw	r5,68(r16)
  802e34:	28000326 	beq	r5,zero,802e44 <_fclose_r+0x9c>
  802e38:	8809883a 	mov	r4,r17
  802e3c:	08024b40 	call	8024b4 <_free_r>
  802e40:	80001115 	stw	zero,68(r16)
  802e44:	8000030d 	sth	zero,12(r16)
  802e48:	08020f00 	call	8020f0 <__sfp_lock_release>
  802e4c:	9005883a 	mov	r2,r18
  802e50:	dfc00317 	ldw	ra,12(sp)
  802e54:	dc800217 	ldw	r18,8(sp)
  802e58:	dc400117 	ldw	r17,4(sp)
  802e5c:	dc000017 	ldw	r16,0(sp)
  802e60:	dec00404 	addi	sp,sp,16
  802e64:	f800283a 	ret
  802e68:	08020f00 	call	8020f0 <__sfp_lock_release>
  802e6c:	0025883a 	mov	r18,zero
  802e70:	9005883a 	mov	r2,r18
  802e74:	dfc00317 	ldw	ra,12(sp)
  802e78:	dc800217 	ldw	r18,8(sp)
  802e7c:	dc400117 	ldw	r17,4(sp)
  802e80:	dc000017 	ldw	r16,0(sp)
  802e84:	dec00404 	addi	sp,sp,16
  802e88:	f800283a 	ret
  802e8c:	8809883a 	mov	r4,r17
  802e90:	08020fc0 	call	8020fc <__sinit>
  802e94:	8080030f 	ldh	r2,12(r16)
  802e98:	103fd11e 	bne	r2,zero,802de0 <_fclose_r+0x38>
  802e9c:	003ff206 	br	802e68 <_fclose_r+0xc0>
  802ea0:	81400417 	ldw	r5,16(r16)
  802ea4:	8809883a 	mov	r4,r17
  802ea8:	08024b40 	call	8024b4 <_free_r>
  802eac:	003fd906 	br	802e14 <_fclose_r+0x6c>
  802eb0:	04bfffc4 	movi	r18,-1
  802eb4:	003fd406 	br	802e08 <_fclose_r+0x60>

00802eb8 <fclose>:
  802eb8:	00802034 	movhi	r2,128
  802ebc:	109d7d04 	addi	r2,r2,30196
  802ec0:	200b883a 	mov	r5,r4
  802ec4:	11000017 	ldw	r4,0(r2)
  802ec8:	0802da81 	jmpi	802da8 <_fclose_r>

00802ecc <_fstat_r>:
  802ecc:	defffd04 	addi	sp,sp,-12
  802ed0:	dc000015 	stw	r16,0(sp)
  802ed4:	04002074 	movhi	r16,129
  802ed8:	84246604 	addi	r16,r16,-28264
  802edc:	dc400115 	stw	r17,4(sp)
  802ee0:	80000015 	stw	zero,0(r16)
  802ee4:	2023883a 	mov	r17,r4
  802ee8:	2809883a 	mov	r4,r5
  802eec:	300b883a 	mov	r5,r6
  802ef0:	dfc00215 	stw	ra,8(sp)
  802ef4:	08032640 	call	803264 <fstat>
  802ef8:	1007883a 	mov	r3,r2
  802efc:	00bfffc4 	movi	r2,-1
  802f00:	18800626 	beq	r3,r2,802f1c <_fstat_r+0x50>
  802f04:	1805883a 	mov	r2,r3
  802f08:	dfc00217 	ldw	ra,8(sp)
  802f0c:	dc400117 	ldw	r17,4(sp)
  802f10:	dc000017 	ldw	r16,0(sp)
  802f14:	dec00304 	addi	sp,sp,12
  802f18:	f800283a 	ret
  802f1c:	80800017 	ldw	r2,0(r16)
  802f20:	103ff826 	beq	r2,zero,802f04 <_fstat_r+0x38>
  802f24:	88800015 	stw	r2,0(r17)
  802f28:	1805883a 	mov	r2,r3
  802f2c:	dfc00217 	ldw	ra,8(sp)
  802f30:	dc400117 	ldw	r17,4(sp)
  802f34:	dc000017 	ldw	r16,0(sp)
  802f38:	dec00304 	addi	sp,sp,12
  802f3c:	f800283a 	ret

00802f40 <_isatty_r>:
  802f40:	defffd04 	addi	sp,sp,-12
  802f44:	dc000015 	stw	r16,0(sp)
  802f48:	04002074 	movhi	r16,129
  802f4c:	84246604 	addi	r16,r16,-28264
  802f50:	dc400115 	stw	r17,4(sp)
  802f54:	80000015 	stw	zero,0(r16)
  802f58:	2023883a 	mov	r17,r4
  802f5c:	2809883a 	mov	r4,r5
  802f60:	dfc00215 	stw	ra,8(sp)
  802f64:	080355c0 	call	80355c <isatty>
  802f68:	1007883a 	mov	r3,r2
  802f6c:	00bfffc4 	movi	r2,-1
  802f70:	18800626 	beq	r3,r2,802f8c <_isatty_r+0x4c>
  802f74:	1805883a 	mov	r2,r3
  802f78:	dfc00217 	ldw	ra,8(sp)
  802f7c:	dc400117 	ldw	r17,4(sp)
  802f80:	dc000017 	ldw	r16,0(sp)
  802f84:	dec00304 	addi	sp,sp,12
  802f88:	f800283a 	ret
  802f8c:	80800017 	ldw	r2,0(r16)
  802f90:	103ff826 	beq	r2,zero,802f74 <_isatty_r+0x34>
  802f94:	88800015 	stw	r2,0(r17)
  802f98:	1805883a 	mov	r2,r3
  802f9c:	dfc00217 	ldw	ra,8(sp)
  802fa0:	dc400117 	ldw	r17,4(sp)
  802fa4:	dc000017 	ldw	r16,0(sp)
  802fa8:	dec00304 	addi	sp,sp,12
  802fac:	f800283a 	ret

00802fb0 <_lseek_r>:
  802fb0:	defffd04 	addi	sp,sp,-12
  802fb4:	dc000015 	stw	r16,0(sp)
  802fb8:	04002074 	movhi	r16,129
  802fbc:	84246604 	addi	r16,r16,-28264
  802fc0:	dc400115 	stw	r17,4(sp)
  802fc4:	80000015 	stw	zero,0(r16)
  802fc8:	2023883a 	mov	r17,r4
  802fcc:	2809883a 	mov	r4,r5
  802fd0:	300b883a 	mov	r5,r6
  802fd4:	380d883a 	mov	r6,r7
  802fd8:	dfc00215 	stw	ra,8(sp)
  802fdc:	080376c0 	call	80376c <lseek>
  802fe0:	1007883a 	mov	r3,r2
  802fe4:	00bfffc4 	movi	r2,-1
  802fe8:	18800626 	beq	r3,r2,803004 <_lseek_r+0x54>
  802fec:	1805883a 	mov	r2,r3
  802ff0:	dfc00217 	ldw	ra,8(sp)
  802ff4:	dc400117 	ldw	r17,4(sp)
  802ff8:	dc000017 	ldw	r16,0(sp)
  802ffc:	dec00304 	addi	sp,sp,12
  803000:	f800283a 	ret
  803004:	80800017 	ldw	r2,0(r16)
  803008:	103ff826 	beq	r2,zero,802fec <_lseek_r+0x3c>
  80300c:	88800015 	stw	r2,0(r17)
  803010:	1805883a 	mov	r2,r3
  803014:	dfc00217 	ldw	ra,8(sp)
  803018:	dc400117 	ldw	r17,4(sp)
  80301c:	dc000017 	ldw	r16,0(sp)
  803020:	dec00304 	addi	sp,sp,12
  803024:	f800283a 	ret

00803028 <_read_r>:
  803028:	defffd04 	addi	sp,sp,-12
  80302c:	dc000015 	stw	r16,0(sp)
  803030:	04002074 	movhi	r16,129
  803034:	84246604 	addi	r16,r16,-28264
  803038:	dc400115 	stw	r17,4(sp)
  80303c:	80000015 	stw	zero,0(r16)
  803040:	2023883a 	mov	r17,r4
  803044:	2809883a 	mov	r4,r5
  803048:	300b883a 	mov	r5,r6
  80304c:	380d883a 	mov	r6,r7
  803050:	dfc00215 	stw	ra,8(sp)
  803054:	080396c0 	call	80396c <read>
  803058:	1007883a 	mov	r3,r2
  80305c:	00bfffc4 	movi	r2,-1
  803060:	18800626 	beq	r3,r2,80307c <_read_r+0x54>
  803064:	1805883a 	mov	r2,r3
  803068:	dfc00217 	ldw	ra,8(sp)
  80306c:	dc400117 	ldw	r17,4(sp)
  803070:	dc000017 	ldw	r16,0(sp)
  803074:	dec00304 	addi	sp,sp,12
  803078:	f800283a 	ret
  80307c:	80800017 	ldw	r2,0(r16)
  803080:	103ff826 	beq	r2,zero,803064 <_read_r+0x3c>
  803084:	88800015 	stw	r2,0(r17)
  803088:	1805883a 	mov	r2,r3
  80308c:	dfc00217 	ldw	ra,8(sp)
  803090:	dc400117 	ldw	r17,4(sp)
  803094:	dc000017 	ldw	r16,0(sp)
  803098:	dec00304 	addi	sp,sp,12
  80309c:	f800283a 	ret

008030a0 <__mulsi3>:
  8030a0:	20000a26 	beq	r4,zero,8030cc <__mulsi3+0x2c>
  8030a4:	0007883a 	mov	r3,zero
  8030a8:	2080004c 	andi	r2,r4,1
  8030ac:	1005003a 	cmpeq	r2,r2,zero
  8030b0:	2008d07a 	srli	r4,r4,1
  8030b4:	1000011e 	bne	r2,zero,8030bc <__mulsi3+0x1c>
  8030b8:	1947883a 	add	r3,r3,r5
  8030bc:	294b883a 	add	r5,r5,r5
  8030c0:	203ff91e 	bne	r4,zero,8030a8 <__mulsi3+0x8>
  8030c4:	1805883a 	mov	r2,r3
  8030c8:	f800283a 	ret
  8030cc:	0007883a 	mov	r3,zero
  8030d0:	1805883a 	mov	r2,r3
  8030d4:	f800283a 	ret

008030d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8030d8:	defff804 	addi	sp,sp,-32
  8030dc:	dfc00715 	stw	ra,28(sp)
  8030e0:	df000615 	stw	fp,24(sp)
  8030e4:	df000604 	addi	fp,sp,24
  8030e8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8030ec:	e0bffc17 	ldw	r2,-16(fp)
  8030f0:	1004803a 	cmplt	r2,r2,zero
  8030f4:	1000091e 	bne	r2,zero,80311c <close+0x44>
  8030f8:	e13ffc17 	ldw	r4,-16(fp)
  8030fc:	01400304 	movi	r5,12
  803100:	08030a00 	call	8030a0 <__mulsi3>
  803104:	1007883a 	mov	r3,r2
  803108:	00802034 	movhi	r2,128
  80310c:	1098c804 	addi	r2,r2,25376
  803110:	1887883a 	add	r3,r3,r2
  803114:	e0ffff15 	stw	r3,-4(fp)
  803118:	00000106 	br	803120 <close+0x48>
  80311c:	e03fff15 	stw	zero,-4(fp)
  803120:	e0bfff17 	ldw	r2,-4(fp)
  803124:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  803128:	e0bffb17 	ldw	r2,-20(fp)
  80312c:	1005003a 	cmpeq	r2,r2,zero
  803130:	10001d1e 	bne	r2,zero,8031a8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803134:	e0bffb17 	ldw	r2,-20(fp)
  803138:	10800017 	ldw	r2,0(r2)
  80313c:	10800417 	ldw	r2,16(r2)
  803140:	1005003a 	cmpeq	r2,r2,zero
  803144:	1000071e 	bne	r2,zero,803164 <close+0x8c>
  803148:	e0bffb17 	ldw	r2,-20(fp)
  80314c:	10800017 	ldw	r2,0(r2)
  803150:	10800417 	ldw	r2,16(r2)
  803154:	e13ffb17 	ldw	r4,-20(fp)
  803158:	103ee83a 	callr	r2
  80315c:	e0bffe15 	stw	r2,-8(fp)
  803160:	00000106 	br	803168 <close+0x90>
  803164:	e03ffe15 	stw	zero,-8(fp)
  803168:	e0bffe17 	ldw	r2,-8(fp)
  80316c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803170:	e13ffc17 	ldw	r4,-16(fp)
  803174:	0803af00 	call	803af0 <alt_release_fd>
    if (rval < 0)
  803178:	e0bffa17 	ldw	r2,-24(fp)
  80317c:	1004403a 	cmpge	r2,r2,zero
  803180:	1000071e 	bne	r2,zero,8031a0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  803184:	08031d80 	call	8031d8 <alt_get_errno>
  803188:	e0fffa17 	ldw	r3,-24(fp)
  80318c:	00c7c83a 	sub	r3,zero,r3
  803190:	10c00015 	stw	r3,0(r2)
      return -1;
  803194:	00bfffc4 	movi	r2,-1
  803198:	e0bffd15 	stw	r2,-12(fp)
  80319c:	00000806 	br	8031c0 <close+0xe8>
    }
    return 0;
  8031a0:	e03ffd15 	stw	zero,-12(fp)
  8031a4:	00000606 	br	8031c0 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8031a8:	08031d80 	call	8031d8 <alt_get_errno>
  8031ac:	1007883a 	mov	r3,r2
  8031b0:	00801444 	movi	r2,81
  8031b4:	18800015 	stw	r2,0(r3)
    return -1;
  8031b8:	00bfffc4 	movi	r2,-1
  8031bc:	e0bffd15 	stw	r2,-12(fp)
  8031c0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8031c4:	e037883a 	mov	sp,fp
  8031c8:	dfc00117 	ldw	ra,4(sp)
  8031cc:	df000017 	ldw	fp,0(sp)
  8031d0:	dec00204 	addi	sp,sp,8
  8031d4:	f800283a 	ret

008031d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8031d8:	defffd04 	addi	sp,sp,-12
  8031dc:	dfc00215 	stw	ra,8(sp)
  8031e0:	df000115 	stw	fp,4(sp)
  8031e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8031e8:	00802034 	movhi	r2,128
  8031ec:	109d8604 	addi	r2,r2,30232
  8031f0:	10800017 	ldw	r2,0(r2)
  8031f4:	1005003a 	cmpeq	r2,r2,zero
  8031f8:	1000061e 	bne	r2,zero,803214 <alt_get_errno+0x3c>
  8031fc:	00802034 	movhi	r2,128
  803200:	109d8604 	addi	r2,r2,30232
  803204:	10800017 	ldw	r2,0(r2)
  803208:	103ee83a 	callr	r2
  80320c:	e0bfff15 	stw	r2,-4(fp)
  803210:	00000306 	br	803220 <alt_get_errno+0x48>
  803214:	00802074 	movhi	r2,129
  803218:	10a46604 	addi	r2,r2,-28264
  80321c:	e0bfff15 	stw	r2,-4(fp)
  803220:	e0bfff17 	ldw	r2,-4(fp)
}
  803224:	e037883a 	mov	sp,fp
  803228:	dfc00117 	ldw	ra,4(sp)
  80322c:	df000017 	ldw	fp,0(sp)
  803230:	dec00204 	addi	sp,sp,8
  803234:	f800283a 	ret

00803238 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803238:	defffc04 	addi	sp,sp,-16
  80323c:	df000315 	stw	fp,12(sp)
  803240:	df000304 	addi	fp,sp,12
  803244:	e13ffd15 	stw	r4,-12(fp)
  803248:	e17ffe15 	stw	r5,-8(fp)
  80324c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803250:	e0bfff17 	ldw	r2,-4(fp)
}
  803254:	e037883a 	mov	sp,fp
  803258:	df000017 	ldw	fp,0(sp)
  80325c:	dec00104 	addi	sp,sp,4
  803260:	f800283a 	ret

00803264 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  803264:	defff904 	addi	sp,sp,-28
  803268:	dfc00615 	stw	ra,24(sp)
  80326c:	df000515 	stw	fp,20(sp)
  803270:	df000504 	addi	fp,sp,20
  803274:	e13ffc15 	stw	r4,-16(fp)
  803278:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80327c:	e0bffc17 	ldw	r2,-16(fp)
  803280:	1004803a 	cmplt	r2,r2,zero
  803284:	1000091e 	bne	r2,zero,8032ac <fstat+0x48>
  803288:	e13ffc17 	ldw	r4,-16(fp)
  80328c:	01400304 	movi	r5,12
  803290:	08030a00 	call	8030a0 <__mulsi3>
  803294:	1007883a 	mov	r3,r2
  803298:	00802034 	movhi	r2,128
  80329c:	1098c804 	addi	r2,r2,25376
  8032a0:	1887883a 	add	r3,r3,r2
  8032a4:	e0ffff15 	stw	r3,-4(fp)
  8032a8:	00000106 	br	8032b0 <fstat+0x4c>
  8032ac:	e03fff15 	stw	zero,-4(fp)
  8032b0:	e0bfff17 	ldw	r2,-4(fp)
  8032b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8032b8:	e0bffb17 	ldw	r2,-20(fp)
  8032bc:	1005003a 	cmpeq	r2,r2,zero
  8032c0:	1000121e 	bne	r2,zero,80330c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8032c4:	e0bffb17 	ldw	r2,-20(fp)
  8032c8:	10800017 	ldw	r2,0(r2)
  8032cc:	10800817 	ldw	r2,32(r2)
  8032d0:	1005003a 	cmpeq	r2,r2,zero
  8032d4:	1000081e 	bne	r2,zero,8032f8 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  8032d8:	e0bffb17 	ldw	r2,-20(fp)
  8032dc:	10800017 	ldw	r2,0(r2)
  8032e0:	10800817 	ldw	r2,32(r2)
  8032e4:	e13ffb17 	ldw	r4,-20(fp)
  8032e8:	e17ffd17 	ldw	r5,-12(fp)
  8032ec:	103ee83a 	callr	r2
  8032f0:	e0bffe15 	stw	r2,-8(fp)
  8032f4:	00000b06 	br	803324 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8032f8:	e0fffd17 	ldw	r3,-12(fp)
  8032fc:	00880004 	movi	r2,8192
  803300:	18800115 	stw	r2,4(r3)
      return 0;
  803304:	e03ffe15 	stw	zero,-8(fp)
  803308:	00000606 	br	803324 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80330c:	080333c0 	call	80333c <alt_get_errno>
  803310:	1007883a 	mov	r3,r2
  803314:	00801444 	movi	r2,81
  803318:	18800015 	stw	r2,0(r3)
    return -1;
  80331c:	00bfffc4 	movi	r2,-1
  803320:	e0bffe15 	stw	r2,-8(fp)
  803324:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  803328:	e037883a 	mov	sp,fp
  80332c:	dfc00117 	ldw	ra,4(sp)
  803330:	df000017 	ldw	fp,0(sp)
  803334:	dec00204 	addi	sp,sp,8
  803338:	f800283a 	ret

0080333c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80333c:	defffd04 	addi	sp,sp,-12
  803340:	dfc00215 	stw	ra,8(sp)
  803344:	df000115 	stw	fp,4(sp)
  803348:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80334c:	00802034 	movhi	r2,128
  803350:	109d8604 	addi	r2,r2,30232
  803354:	10800017 	ldw	r2,0(r2)
  803358:	1005003a 	cmpeq	r2,r2,zero
  80335c:	1000061e 	bne	r2,zero,803378 <alt_get_errno+0x3c>
  803360:	00802034 	movhi	r2,128
  803364:	109d8604 	addi	r2,r2,30232
  803368:	10800017 	ldw	r2,0(r2)
  80336c:	103ee83a 	callr	r2
  803370:	e0bfff15 	stw	r2,-4(fp)
  803374:	00000306 	br	803384 <alt_get_errno+0x48>
  803378:	00802074 	movhi	r2,129
  80337c:	10a46604 	addi	r2,r2,-28264
  803380:	e0bfff15 	stw	r2,-4(fp)
  803384:	e0bfff17 	ldw	r2,-4(fp)
}
  803388:	e037883a 	mov	sp,fp
  80338c:	dfc00117 	ldw	ra,4(sp)
  803390:	df000017 	ldw	fp,0(sp)
  803394:	dec00204 	addi	sp,sp,8
  803398:	f800283a 	ret

0080339c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80339c:	deffef04 	addi	sp,sp,-68
  8033a0:	df001015 	stw	fp,64(sp)
  8033a4:	df001004 	addi	fp,sp,64
  8033a8:	e13ffc15 	stw	r4,-16(fp)
  8033ac:	e17ffd15 	stw	r5,-12(fp)
  8033b0:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8033b4:	00bffa84 	movi	r2,-22
  8033b8:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8033bc:	e0bffc17 	ldw	r2,-16(fp)
  8033c0:	10800828 	cmpgeui	r2,r2,32
  8033c4:	1000601e 	bne	r2,zero,803548 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8033c8:	0005303a 	rdctl	r2,status
  8033cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8033d0:	e0fff917 	ldw	r3,-28(fp)
  8033d4:	00bfff84 	movi	r2,-2
  8033d8:	1884703a 	and	r2,r3,r2
  8033dc:	1001703a 	wrctl	status,r2
  
  return context;
  8033e0:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  8033e4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  8033e8:	e0bffc17 	ldw	r2,-16(fp)
  8033ec:	00c02074 	movhi	r3,129
  8033f0:	18e47704 	addi	r3,r3,-28196
  8033f4:	100490fa 	slli	r2,r2,3
  8033f8:	10c7883a 	add	r3,r2,r3
  8033fc:	e0bffe17 	ldw	r2,-8(fp)
  803400:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  803404:	e0bffc17 	ldw	r2,-16(fp)
  803408:	00c02074 	movhi	r3,129
  80340c:	18e47704 	addi	r3,r3,-28196
  803410:	100490fa 	slli	r2,r2,3
  803414:	10c5883a 	add	r2,r2,r3
  803418:	10c00104 	addi	r3,r2,4
  80341c:	e0bffd17 	ldw	r2,-12(fp)
  803420:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  803424:	e0bffe17 	ldw	r2,-8(fp)
  803428:	1005003a 	cmpeq	r2,r2,zero
  80342c:	1000201e 	bne	r2,zero,8034b0 <alt_irq_register+0x114>
  803430:	e0bffc17 	ldw	r2,-16(fp)
  803434:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803438:	0005303a 	rdctl	r2,status
  80343c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803440:	e0fff617 	ldw	r3,-40(fp)
  803444:	00bfff84 	movi	r2,-2
  803448:	1884703a 	and	r2,r3,r2
  80344c:	1001703a 	wrctl	status,r2
  
  return context;
  803450:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803454:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  803458:	e0fff717 	ldw	r3,-36(fp)
  80345c:	00800044 	movi	r2,1
  803460:	10c4983a 	sll	r2,r2,r3
  803464:	1007883a 	mov	r3,r2
  803468:	00802074 	movhi	r2,129
  80346c:	10a46704 	addi	r2,r2,-28260
  803470:	10800017 	ldw	r2,0(r2)
  803474:	1886b03a 	or	r3,r3,r2
  803478:	00802074 	movhi	r2,129
  80347c:	10a46704 	addi	r2,r2,-28260
  803480:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803484:	00802074 	movhi	r2,129
  803488:	10a46704 	addi	r2,r2,-28260
  80348c:	10800017 	ldw	r2,0(r2)
  803490:	100170fa 	wrctl	ienable,r2
  803494:	e0bff817 	ldw	r2,-32(fp)
  803498:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80349c:	e0bff517 	ldw	r2,-44(fp)
  8034a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8034a4:	0005883a 	mov	r2,zero
  8034a8:	e0bfff15 	stw	r2,-4(fp)
  8034ac:	00002006 	br	803530 <alt_irq_register+0x194>
  8034b0:	e0bffc17 	ldw	r2,-16(fp)
  8034b4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8034b8:	0005303a 	rdctl	r2,status
  8034bc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8034c0:	e0fff217 	ldw	r3,-56(fp)
  8034c4:	00bfff84 	movi	r2,-2
  8034c8:	1884703a 	and	r2,r3,r2
  8034cc:	1001703a 	wrctl	status,r2
  
  return context;
  8034d0:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8034d4:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  8034d8:	e0fff317 	ldw	r3,-52(fp)
  8034dc:	00800044 	movi	r2,1
  8034e0:	10c4983a 	sll	r2,r2,r3
  8034e4:	0084303a 	nor	r2,zero,r2
  8034e8:	1007883a 	mov	r3,r2
  8034ec:	00802074 	movhi	r2,129
  8034f0:	10a46704 	addi	r2,r2,-28260
  8034f4:	10800017 	ldw	r2,0(r2)
  8034f8:	1886703a 	and	r3,r3,r2
  8034fc:	00802074 	movhi	r2,129
  803500:	10a46704 	addi	r2,r2,-28260
  803504:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803508:	00802074 	movhi	r2,129
  80350c:	10a46704 	addi	r2,r2,-28260
  803510:	10800017 	ldw	r2,0(r2)
  803514:	100170fa 	wrctl	ienable,r2
  803518:	e0bff417 	ldw	r2,-48(fp)
  80351c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803520:	e0bff117 	ldw	r2,-60(fp)
  803524:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803528:	0005883a 	mov	r2,zero
  80352c:	e0bfff15 	stw	r2,-4(fp)
  803530:	e0bfff17 	ldw	r2,-4(fp)
  803534:	e0bffb15 	stw	r2,-20(fp)
  803538:	e0bffa17 	ldw	r2,-24(fp)
  80353c:	e0bff015 	stw	r2,-64(fp)
  803540:	e0bff017 	ldw	r2,-64(fp)
  803544:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  803548:	e0bffb17 	ldw	r2,-20(fp)
}
  80354c:	e037883a 	mov	sp,fp
  803550:	df000017 	ldw	fp,0(sp)
  803554:	dec00104 	addi	sp,sp,4
  803558:	f800283a 	ret

0080355c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80355c:	deffeb04 	addi	sp,sp,-84
  803560:	dfc01415 	stw	ra,80(sp)
  803564:	df001315 	stw	fp,76(sp)
  803568:	df001304 	addi	fp,sp,76
  80356c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803570:	e0bffd17 	ldw	r2,-12(fp)
  803574:	1004803a 	cmplt	r2,r2,zero
  803578:	1000091e 	bne	r2,zero,8035a0 <isatty+0x44>
  80357c:	e13ffd17 	ldw	r4,-12(fp)
  803580:	01400304 	movi	r5,12
  803584:	08030a00 	call	8030a0 <__mulsi3>
  803588:	1007883a 	mov	r3,r2
  80358c:	00802034 	movhi	r2,128
  803590:	1098c804 	addi	r2,r2,25376
  803594:	1887883a 	add	r3,r3,r2
  803598:	e0ffff15 	stw	r3,-4(fp)
  80359c:	00000106 	br	8035a4 <isatty+0x48>
  8035a0:	e03fff15 	stw	zero,-4(fp)
  8035a4:	e0bfff17 	ldw	r2,-4(fp)
  8035a8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8035ac:	e0bfed17 	ldw	r2,-76(fp)
  8035b0:	1005003a 	cmpeq	r2,r2,zero
  8035b4:	10000f1e 	bne	r2,zero,8035f4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8035b8:	e0bfed17 	ldw	r2,-76(fp)
  8035bc:	10800017 	ldw	r2,0(r2)
  8035c0:	10800817 	ldw	r2,32(r2)
  8035c4:	1004c03a 	cmpne	r2,r2,zero
  8035c8:	1000031e 	bne	r2,zero,8035d8 <isatty+0x7c>
    {
      return 1;
  8035cc:	00800044 	movi	r2,1
  8035d0:	e0bffe15 	stw	r2,-8(fp)
  8035d4:	00000c06 	br	803608 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8035d8:	e17fee04 	addi	r5,fp,-72
  8035dc:	e13ffd17 	ldw	r4,-12(fp)
  8035e0:	08032640 	call	803264 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8035e4:	e0bfef17 	ldw	r2,-68(fp)
  8035e8:	10880020 	cmpeqi	r2,r2,8192
  8035ec:	e0bffe15 	stw	r2,-8(fp)
  8035f0:	00000506 	br	803608 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8035f4:	08036200 	call	803620 <alt_get_errno>
  8035f8:	1007883a 	mov	r3,r2
  8035fc:	00801444 	movi	r2,81
  803600:	18800015 	stw	r2,0(r3)
    return 0;
  803604:	e03ffe15 	stw	zero,-8(fp)
  803608:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80360c:	e037883a 	mov	sp,fp
  803610:	dfc00117 	ldw	ra,4(sp)
  803614:	df000017 	ldw	fp,0(sp)
  803618:	dec00204 	addi	sp,sp,8
  80361c:	f800283a 	ret

00803620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803620:	defffd04 	addi	sp,sp,-12
  803624:	dfc00215 	stw	ra,8(sp)
  803628:	df000115 	stw	fp,4(sp)
  80362c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803630:	00802034 	movhi	r2,128
  803634:	109d8604 	addi	r2,r2,30232
  803638:	10800017 	ldw	r2,0(r2)
  80363c:	1005003a 	cmpeq	r2,r2,zero
  803640:	1000061e 	bne	r2,zero,80365c <alt_get_errno+0x3c>
  803644:	00802034 	movhi	r2,128
  803648:	109d8604 	addi	r2,r2,30232
  80364c:	10800017 	ldw	r2,0(r2)
  803650:	103ee83a 	callr	r2
  803654:	e0bfff15 	stw	r2,-4(fp)
  803658:	00000306 	br	803668 <alt_get_errno+0x48>
  80365c:	00802074 	movhi	r2,129
  803660:	10a46604 	addi	r2,r2,-28264
  803664:	e0bfff15 	stw	r2,-4(fp)
  803668:	e0bfff17 	ldw	r2,-4(fp)
}
  80366c:	e037883a 	mov	sp,fp
  803670:	dfc00117 	ldw	ra,4(sp)
  803674:	df000017 	ldw	fp,0(sp)
  803678:	dec00204 	addi	sp,sp,8
  80367c:	f800283a 	ret

00803680 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803680:	defffe04 	addi	sp,sp,-8
  803684:	dfc00115 	stw	ra,4(sp)
  803688:	df000015 	stw	fp,0(sp)
  80368c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803690:	01002034 	movhi	r4,128
  803694:	211d8b04 	addi	r4,r4,30252
  803698:	01402034 	movhi	r5,128
  80369c:	2956b904 	addi	r5,r5,23268
  8036a0:	01802034 	movhi	r6,128
  8036a4:	319d8b04 	addi	r6,r6,30252
  8036a8:	08037000 	call	803700 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8036ac:	01002034 	movhi	r4,128
  8036b0:	21000804 	addi	r4,r4,32
  8036b4:	01402034 	movhi	r5,128
  8036b8:	29400804 	addi	r5,r5,32
  8036bc:	01802034 	movhi	r6,128
  8036c0:	31806e04 	addi	r6,r6,440
  8036c4:	08037000 	call	803700 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8036c8:	01002034 	movhi	r4,128
  8036cc:	21169004 	addi	r4,r4,23104
  8036d0:	01402034 	movhi	r5,128
  8036d4:	29569004 	addi	r5,r5,23104
  8036d8:	01802034 	movhi	r6,128
  8036dc:	3196b904 	addi	r6,r6,23268
  8036e0:	08037000 	call	803700 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8036e4:	0804ba40 	call	804ba4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8036e8:	0804d9c0 	call	804d9c <alt_icache_flush_all>
}
  8036ec:	e037883a 	mov	sp,fp
  8036f0:	dfc00117 	ldw	ra,4(sp)
  8036f4:	df000017 	ldw	fp,0(sp)
  8036f8:	dec00204 	addi	sp,sp,8
  8036fc:	f800283a 	ret

00803700 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803700:	defffc04 	addi	sp,sp,-16
  803704:	df000315 	stw	fp,12(sp)
  803708:	df000304 	addi	fp,sp,12
  80370c:	e13ffd15 	stw	r4,-12(fp)
  803710:	e17ffe15 	stw	r5,-8(fp)
  803714:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  803718:	e0fffe17 	ldw	r3,-8(fp)
  80371c:	e0bffd17 	ldw	r2,-12(fp)
  803720:	18800e26 	beq	r3,r2,80375c <alt_load_section+0x5c>
  {
    while( to != end )
  803724:	00000a06 	br	803750 <alt_load_section+0x50>
    {
      *to++ = *from++;
  803728:	e0bffd17 	ldw	r2,-12(fp)
  80372c:	10c00017 	ldw	r3,0(r2)
  803730:	e0bffe17 	ldw	r2,-8(fp)
  803734:	10c00015 	stw	r3,0(r2)
  803738:	e0bffe17 	ldw	r2,-8(fp)
  80373c:	10800104 	addi	r2,r2,4
  803740:	e0bffe15 	stw	r2,-8(fp)
  803744:	e0bffd17 	ldw	r2,-12(fp)
  803748:	10800104 	addi	r2,r2,4
  80374c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803750:	e0fffe17 	ldw	r3,-8(fp)
  803754:	e0bfff17 	ldw	r2,-4(fp)
  803758:	18bff31e 	bne	r3,r2,803728 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80375c:	e037883a 	mov	sp,fp
  803760:	df000017 	ldw	fp,0(sp)
  803764:	dec00104 	addi	sp,sp,4
  803768:	f800283a 	ret

0080376c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80376c:	defff804 	addi	sp,sp,-32
  803770:	dfc00715 	stw	ra,28(sp)
  803774:	df000615 	stw	fp,24(sp)
  803778:	df000604 	addi	fp,sp,24
  80377c:	e13ffc15 	stw	r4,-16(fp)
  803780:	e17ffd15 	stw	r5,-12(fp)
  803784:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803788:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80378c:	e0bffc17 	ldw	r2,-16(fp)
  803790:	1004803a 	cmplt	r2,r2,zero
  803794:	1000091e 	bne	r2,zero,8037bc <lseek+0x50>
  803798:	e13ffc17 	ldw	r4,-16(fp)
  80379c:	01400304 	movi	r5,12
  8037a0:	08030a00 	call	8030a0 <__mulsi3>
  8037a4:	1007883a 	mov	r3,r2
  8037a8:	00802034 	movhi	r2,128
  8037ac:	1098c804 	addi	r2,r2,25376
  8037b0:	1887883a 	add	r3,r3,r2
  8037b4:	e0ffff15 	stw	r3,-4(fp)
  8037b8:	00000106 	br	8037c0 <lseek+0x54>
  8037bc:	e03fff15 	stw	zero,-4(fp)
  8037c0:	e0bfff17 	ldw	r2,-4(fp)
  8037c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  8037c8:	e0bffb17 	ldw	r2,-20(fp)
  8037cc:	1005003a 	cmpeq	r2,r2,zero
  8037d0:	1000111e 	bne	r2,zero,803818 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8037d4:	e0bffb17 	ldw	r2,-20(fp)
  8037d8:	10800017 	ldw	r2,0(r2)
  8037dc:	10800717 	ldw	r2,28(r2)
  8037e0:	1005003a 	cmpeq	r2,r2,zero
  8037e4:	1000091e 	bne	r2,zero,80380c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8037e8:	e0bffb17 	ldw	r2,-20(fp)
  8037ec:	10800017 	ldw	r2,0(r2)
  8037f0:	10800717 	ldw	r2,28(r2)
  8037f4:	e13ffb17 	ldw	r4,-20(fp)
  8037f8:	e17ffd17 	ldw	r5,-12(fp)
  8037fc:	e1bffe17 	ldw	r6,-8(fp)
  803800:	103ee83a 	callr	r2
  803804:	e0bffa15 	stw	r2,-24(fp)
  803808:	00000506 	br	803820 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80380c:	00bfde84 	movi	r2,-134
  803810:	e0bffa15 	stw	r2,-24(fp)
  803814:	00000206 	br	803820 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  803818:	00bfebc4 	movi	r2,-81
  80381c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  803820:	e0bffa17 	ldw	r2,-24(fp)
  803824:	1004403a 	cmpge	r2,r2,zero
  803828:	1000071e 	bne	r2,zero,803848 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80382c:	08038600 	call	803860 <alt_get_errno>
  803830:	1007883a 	mov	r3,r2
  803834:	e0bffa17 	ldw	r2,-24(fp)
  803838:	0085c83a 	sub	r2,zero,r2
  80383c:	18800015 	stw	r2,0(r3)
    rc = -1;
  803840:	00bfffc4 	movi	r2,-1
  803844:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  803848:	e0bffa17 	ldw	r2,-24(fp)
}
  80384c:	e037883a 	mov	sp,fp
  803850:	dfc00117 	ldw	ra,4(sp)
  803854:	df000017 	ldw	fp,0(sp)
  803858:	dec00204 	addi	sp,sp,8
  80385c:	f800283a 	ret

00803860 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803860:	defffd04 	addi	sp,sp,-12
  803864:	dfc00215 	stw	ra,8(sp)
  803868:	df000115 	stw	fp,4(sp)
  80386c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803870:	00802034 	movhi	r2,128
  803874:	109d8604 	addi	r2,r2,30232
  803878:	10800017 	ldw	r2,0(r2)
  80387c:	1005003a 	cmpeq	r2,r2,zero
  803880:	1000061e 	bne	r2,zero,80389c <alt_get_errno+0x3c>
  803884:	00802034 	movhi	r2,128
  803888:	109d8604 	addi	r2,r2,30232
  80388c:	10800017 	ldw	r2,0(r2)
  803890:	103ee83a 	callr	r2
  803894:	e0bfff15 	stw	r2,-4(fp)
  803898:	00000306 	br	8038a8 <alt_get_errno+0x48>
  80389c:	00802074 	movhi	r2,129
  8038a0:	10a46604 	addi	r2,r2,-28264
  8038a4:	e0bfff15 	stw	r2,-4(fp)
  8038a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8038ac:	e037883a 	mov	sp,fp
  8038b0:	dfc00117 	ldw	ra,4(sp)
  8038b4:	df000017 	ldw	fp,0(sp)
  8038b8:	dec00204 	addi	sp,sp,8
  8038bc:	f800283a 	ret

008038c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8038c0:	defffd04 	addi	sp,sp,-12
  8038c4:	dfc00215 	stw	ra,8(sp)
  8038c8:	df000115 	stw	fp,4(sp)
  8038cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8038d0:	0009883a 	mov	r4,zero
  8038d4:	0803da80 	call	803da8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8038d8:	0803ddc0 	call	803ddc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8038dc:	01002034 	movhi	r4,128
  8038e0:	21169a04 	addi	r4,r4,23144
  8038e4:	01402034 	movhi	r5,128
  8038e8:	29569a04 	addi	r5,r5,23144
  8038ec:	01802034 	movhi	r6,128
  8038f0:	31969a04 	addi	r6,r6,23144
  8038f4:	0804e900 	call	804e90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8038f8:	0804cd40 	call	804cd4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8038fc:	01002034 	movhi	r4,128
  803900:	21134e04 	addi	r4,r4,19768
  803904:	08056340 	call	805634 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803908:	d126f117 	ldw	r4,-25660(gp)
  80390c:	d166f217 	ldw	r5,-25656(gp)
  803910:	d1a6f317 	ldw	r6,-25652(gp)
  803914:	08001f40 	call	8001f4 <main>
  803918:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80391c:	01000044 	movi	r4,1
  803920:	08030d80 	call	8030d8 <close>
  exit (result);
  803924:	e13fff17 	ldw	r4,-4(fp)
  803928:	08056480 	call	805648 <exit>

0080392c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80392c:	defffe04 	addi	sp,sp,-8
  803930:	df000115 	stw	fp,4(sp)
  803934:	df000104 	addi	fp,sp,4
  803938:	e13fff15 	stw	r4,-4(fp)
}
  80393c:	e037883a 	mov	sp,fp
  803940:	df000017 	ldw	fp,0(sp)
  803944:	dec00104 	addi	sp,sp,4
  803948:	f800283a 	ret

0080394c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80394c:	defffe04 	addi	sp,sp,-8
  803950:	df000115 	stw	fp,4(sp)
  803954:	df000104 	addi	fp,sp,4
  803958:	e13fff15 	stw	r4,-4(fp)
}
  80395c:	e037883a 	mov	sp,fp
  803960:	df000017 	ldw	fp,0(sp)
  803964:	dec00104 	addi	sp,sp,4
  803968:	f800283a 	ret

0080396c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80396c:	defff704 	addi	sp,sp,-36
  803970:	dfc00815 	stw	ra,32(sp)
  803974:	df000715 	stw	fp,28(sp)
  803978:	df000704 	addi	fp,sp,28
  80397c:	e13ffb15 	stw	r4,-20(fp)
  803980:	e17ffc15 	stw	r5,-16(fp)
  803984:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803988:	e0bffb17 	ldw	r2,-20(fp)
  80398c:	1004803a 	cmplt	r2,r2,zero
  803990:	1000091e 	bne	r2,zero,8039b8 <read+0x4c>
  803994:	e13ffb17 	ldw	r4,-20(fp)
  803998:	01400304 	movi	r5,12
  80399c:	08030a00 	call	8030a0 <__mulsi3>
  8039a0:	1007883a 	mov	r3,r2
  8039a4:	00802034 	movhi	r2,128
  8039a8:	1098c804 	addi	r2,r2,25376
  8039ac:	1887883a 	add	r3,r3,r2
  8039b0:	e0ffff15 	stw	r3,-4(fp)
  8039b4:	00000106 	br	8039bc <read+0x50>
  8039b8:	e03fff15 	stw	zero,-4(fp)
  8039bc:	e0bfff17 	ldw	r2,-4(fp)
  8039c0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8039c4:	e0bffa17 	ldw	r2,-24(fp)
  8039c8:	1005003a 	cmpeq	r2,r2,zero
  8039cc:	1000241e 	bne	r2,zero,803a60 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8039d0:	e0bffa17 	ldw	r2,-24(fp)
  8039d4:	10800217 	ldw	r2,8(r2)
  8039d8:	108000cc 	andi	r2,r2,3
  8039dc:	10800060 	cmpeqi	r2,r2,1
  8039e0:	10001a1e 	bne	r2,zero,803a4c <read+0xe0>
  8039e4:	e0bffa17 	ldw	r2,-24(fp)
  8039e8:	10800017 	ldw	r2,0(r2)
  8039ec:	10800517 	ldw	r2,20(r2)
  8039f0:	1005003a 	cmpeq	r2,r2,zero
  8039f4:	1000151e 	bne	r2,zero,803a4c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8039f8:	e0bffa17 	ldw	r2,-24(fp)
  8039fc:	10800017 	ldw	r2,0(r2)
  803a00:	10800517 	ldw	r2,20(r2)
  803a04:	e17ffc17 	ldw	r5,-16(fp)
  803a08:	e1bffd17 	ldw	r6,-12(fp)
  803a0c:	e13ffa17 	ldw	r4,-24(fp)
  803a10:	103ee83a 	callr	r2
  803a14:	e0bff915 	stw	r2,-28(fp)
  803a18:	e0bff917 	ldw	r2,-28(fp)
  803a1c:	1004403a 	cmpge	r2,r2,zero
  803a20:	1000071e 	bne	r2,zero,803a40 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  803a24:	0803a900 	call	803a90 <alt_get_errno>
  803a28:	e0fff917 	ldw	r3,-28(fp)
  803a2c:	00c7c83a 	sub	r3,zero,r3
  803a30:	10c00015 	stw	r3,0(r2)
          return -1;
  803a34:	00bfffc4 	movi	r2,-1
  803a38:	e0bffe15 	stw	r2,-8(fp)
  803a3c:	00000e06 	br	803a78 <read+0x10c>
        }
        return rval;
  803a40:	e0bff917 	ldw	r2,-28(fp)
  803a44:	e0bffe15 	stw	r2,-8(fp)
  803a48:	00000b06 	br	803a78 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  803a4c:	0803a900 	call	803a90 <alt_get_errno>
  803a50:	1007883a 	mov	r3,r2
  803a54:	00800344 	movi	r2,13
  803a58:	18800015 	stw	r2,0(r3)
  803a5c:	00000406 	br	803a70 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803a60:	0803a900 	call	803a90 <alt_get_errno>
  803a64:	1007883a 	mov	r3,r2
  803a68:	00801444 	movi	r2,81
  803a6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803a70:	00bfffc4 	movi	r2,-1
  803a74:	e0bffe15 	stw	r2,-8(fp)
  803a78:	e0bffe17 	ldw	r2,-8(fp)
}
  803a7c:	e037883a 	mov	sp,fp
  803a80:	dfc00117 	ldw	ra,4(sp)
  803a84:	df000017 	ldw	fp,0(sp)
  803a88:	dec00204 	addi	sp,sp,8
  803a8c:	f800283a 	ret

00803a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803a90:	defffd04 	addi	sp,sp,-12
  803a94:	dfc00215 	stw	ra,8(sp)
  803a98:	df000115 	stw	fp,4(sp)
  803a9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803aa0:	00802034 	movhi	r2,128
  803aa4:	109d8604 	addi	r2,r2,30232
  803aa8:	10800017 	ldw	r2,0(r2)
  803aac:	1005003a 	cmpeq	r2,r2,zero
  803ab0:	1000061e 	bne	r2,zero,803acc <alt_get_errno+0x3c>
  803ab4:	00802034 	movhi	r2,128
  803ab8:	109d8604 	addi	r2,r2,30232
  803abc:	10800017 	ldw	r2,0(r2)
  803ac0:	103ee83a 	callr	r2
  803ac4:	e0bfff15 	stw	r2,-4(fp)
  803ac8:	00000306 	br	803ad8 <alt_get_errno+0x48>
  803acc:	00802074 	movhi	r2,129
  803ad0:	10a46604 	addi	r2,r2,-28264
  803ad4:	e0bfff15 	stw	r2,-4(fp)
  803ad8:	e0bfff17 	ldw	r2,-4(fp)
}
  803adc:	e037883a 	mov	sp,fp
  803ae0:	dfc00117 	ldw	ra,4(sp)
  803ae4:	df000017 	ldw	fp,0(sp)
  803ae8:	dec00204 	addi	sp,sp,8
  803aec:	f800283a 	ret

00803af0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803af0:	defffc04 	addi	sp,sp,-16
  803af4:	dfc00315 	stw	ra,12(sp)
  803af8:	df000215 	stw	fp,8(sp)
  803afc:	dc000115 	stw	r16,4(sp)
  803b00:	df000104 	addi	fp,sp,4
  803b04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803b08:	e0bfff17 	ldw	r2,-4(fp)
  803b0c:	108000d0 	cmplti	r2,r2,3
  803b10:	10000f1e 	bne	r2,zero,803b50 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  803b14:	e13fff17 	ldw	r4,-4(fp)
  803b18:	04002034 	movhi	r16,128
  803b1c:	8418c804 	addi	r16,r16,25376
  803b20:	01400304 	movi	r5,12
  803b24:	08030a00 	call	8030a0 <__mulsi3>
  803b28:	1405883a 	add	r2,r2,r16
  803b2c:	10800204 	addi	r2,r2,8
  803b30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803b34:	e13fff17 	ldw	r4,-4(fp)
  803b38:	04002034 	movhi	r16,128
  803b3c:	8418c804 	addi	r16,r16,25376
  803b40:	01400304 	movi	r5,12
  803b44:	08030a00 	call	8030a0 <__mulsi3>
  803b48:	1405883a 	add	r2,r2,r16
  803b4c:	10000015 	stw	zero,0(r2)
  }
}
  803b50:	e037883a 	mov	sp,fp
  803b54:	dfc00217 	ldw	ra,8(sp)
  803b58:	df000117 	ldw	fp,4(sp)
  803b5c:	dc000017 	ldw	r16,0(sp)
  803b60:	dec00304 	addi	sp,sp,12
  803b64:	f800283a 	ret

00803b68 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803b68:	defff804 	addi	sp,sp,-32
  803b6c:	df000715 	stw	fp,28(sp)
  803b70:	df000704 	addi	fp,sp,28
  803b74:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803b78:	0005303a 	rdctl	r2,status
  803b7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803b80:	e0fffb17 	ldw	r3,-20(fp)
  803b84:	00bfff84 	movi	r2,-2
  803b88:	1884703a 	and	r2,r3,r2
  803b8c:	1001703a 	wrctl	status,r2
  
  return context;
  803b90:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803b94:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803b98:	d0a01117 	ldw	r2,-32700(gp)
  803b9c:	10c000c4 	addi	r3,r2,3
  803ba0:	00bfff04 	movi	r2,-4
  803ba4:	1884703a 	and	r2,r3,r2
  803ba8:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  803bac:	d0e01117 	ldw	r3,-32700(gp)
  803bb0:	e0bffe17 	ldw	r2,-8(fp)
  803bb4:	1887883a 	add	r3,r3,r2
  803bb8:	00804034 	movhi	r2,256
  803bbc:	10800004 	addi	r2,r2,0
  803bc0:	10c0072e 	bgeu	r2,r3,803be0 <sbrk+0x78>
  803bc4:	e0bffd17 	ldw	r2,-12(fp)
  803bc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803bcc:	e0bffa17 	ldw	r2,-24(fp)
  803bd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803bd4:	00bfffc4 	movi	r2,-1
  803bd8:	e0bfff15 	stw	r2,-4(fp)
  803bdc:	00000c06 	br	803c10 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  803be0:	d0a01117 	ldw	r2,-32700(gp)
  803be4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  803be8:	d0e01117 	ldw	r3,-32700(gp)
  803bec:	e0bffe17 	ldw	r2,-8(fp)
  803bf0:	1885883a 	add	r2,r3,r2
  803bf4:	d0a01115 	stw	r2,-32700(gp)
  803bf8:	e0bffd17 	ldw	r2,-12(fp)
  803bfc:	e0bff915 	stw	r2,-28(fp)
  803c00:	e0bff917 	ldw	r2,-28(fp)
  803c04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  803c08:	e0bffc17 	ldw	r2,-16(fp)
  803c0c:	e0bfff15 	stw	r2,-4(fp)
  803c10:	e0bfff17 	ldw	r2,-4(fp)
} 
  803c14:	e037883a 	mov	sp,fp
  803c18:	df000017 	ldw	fp,0(sp)
  803c1c:	dec00104 	addi	sp,sp,4
  803c20:	f800283a 	ret

00803c24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803c24:	defff704 	addi	sp,sp,-36
  803c28:	dfc00815 	stw	ra,32(sp)
  803c2c:	df000715 	stw	fp,28(sp)
  803c30:	df000704 	addi	fp,sp,28
  803c34:	e13ffb15 	stw	r4,-20(fp)
  803c38:	e17ffc15 	stw	r5,-16(fp)
  803c3c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803c40:	e0bffb17 	ldw	r2,-20(fp)
  803c44:	1004803a 	cmplt	r2,r2,zero
  803c48:	1000091e 	bne	r2,zero,803c70 <write+0x4c>
  803c4c:	e13ffb17 	ldw	r4,-20(fp)
  803c50:	01400304 	movi	r5,12
  803c54:	08030a00 	call	8030a0 <__mulsi3>
  803c58:	1007883a 	mov	r3,r2
  803c5c:	00802034 	movhi	r2,128
  803c60:	1098c804 	addi	r2,r2,25376
  803c64:	1887883a 	add	r3,r3,r2
  803c68:	e0ffff15 	stw	r3,-4(fp)
  803c6c:	00000106 	br	803c74 <write+0x50>
  803c70:	e03fff15 	stw	zero,-4(fp)
  803c74:	e0bfff17 	ldw	r2,-4(fp)
  803c78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  803c7c:	e0bffa17 	ldw	r2,-24(fp)
  803c80:	1005003a 	cmpeq	r2,r2,zero
  803c84:	1000241e 	bne	r2,zero,803d18 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803c88:	e0bffa17 	ldw	r2,-24(fp)
  803c8c:	10800217 	ldw	r2,8(r2)
  803c90:	108000cc 	andi	r2,r2,3
  803c94:	1005003a 	cmpeq	r2,r2,zero
  803c98:	10001a1e 	bne	r2,zero,803d04 <write+0xe0>
  803c9c:	e0bffa17 	ldw	r2,-24(fp)
  803ca0:	10800017 	ldw	r2,0(r2)
  803ca4:	10800617 	ldw	r2,24(r2)
  803ca8:	1005003a 	cmpeq	r2,r2,zero
  803cac:	1000151e 	bne	r2,zero,803d04 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803cb0:	e0bffa17 	ldw	r2,-24(fp)
  803cb4:	10800017 	ldw	r2,0(r2)
  803cb8:	10800617 	ldw	r2,24(r2)
  803cbc:	e17ffc17 	ldw	r5,-16(fp)
  803cc0:	e1bffd17 	ldw	r6,-12(fp)
  803cc4:	e13ffa17 	ldw	r4,-24(fp)
  803cc8:	103ee83a 	callr	r2
  803ccc:	e0bff915 	stw	r2,-28(fp)
  803cd0:	e0bff917 	ldw	r2,-28(fp)
  803cd4:	1004403a 	cmpge	r2,r2,zero
  803cd8:	1000071e 	bne	r2,zero,803cf8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  803cdc:	0803d480 	call	803d48 <alt_get_errno>
  803ce0:	e0fff917 	ldw	r3,-28(fp)
  803ce4:	00c7c83a 	sub	r3,zero,r3
  803ce8:	10c00015 	stw	r3,0(r2)
        return -1;
  803cec:	00bfffc4 	movi	r2,-1
  803cf0:	e0bffe15 	stw	r2,-8(fp)
  803cf4:	00000e06 	br	803d30 <write+0x10c>
      }
      return rval;
  803cf8:	e0bff917 	ldw	r2,-28(fp)
  803cfc:	e0bffe15 	stw	r2,-8(fp)
  803d00:	00000b06 	br	803d30 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803d04:	0803d480 	call	803d48 <alt_get_errno>
  803d08:	1007883a 	mov	r3,r2
  803d0c:	00800344 	movi	r2,13
  803d10:	18800015 	stw	r2,0(r3)
  803d14:	00000406 	br	803d28 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803d18:	0803d480 	call	803d48 <alt_get_errno>
  803d1c:	1007883a 	mov	r3,r2
  803d20:	00801444 	movi	r2,81
  803d24:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803d28:	00bfffc4 	movi	r2,-1
  803d2c:	e0bffe15 	stw	r2,-8(fp)
  803d30:	e0bffe17 	ldw	r2,-8(fp)
}
  803d34:	e037883a 	mov	sp,fp
  803d38:	dfc00117 	ldw	ra,4(sp)
  803d3c:	df000017 	ldw	fp,0(sp)
  803d40:	dec00204 	addi	sp,sp,8
  803d44:	f800283a 	ret

00803d48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803d48:	defffd04 	addi	sp,sp,-12
  803d4c:	dfc00215 	stw	ra,8(sp)
  803d50:	df000115 	stw	fp,4(sp)
  803d54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803d58:	00802034 	movhi	r2,128
  803d5c:	109d8604 	addi	r2,r2,30232
  803d60:	10800017 	ldw	r2,0(r2)
  803d64:	1005003a 	cmpeq	r2,r2,zero
  803d68:	1000061e 	bne	r2,zero,803d84 <alt_get_errno+0x3c>
  803d6c:	00802034 	movhi	r2,128
  803d70:	109d8604 	addi	r2,r2,30232
  803d74:	10800017 	ldw	r2,0(r2)
  803d78:	103ee83a 	callr	r2
  803d7c:	e0bfff15 	stw	r2,-4(fp)
  803d80:	00000306 	br	803d90 <alt_get_errno+0x48>
  803d84:	00802074 	movhi	r2,129
  803d88:	10a46604 	addi	r2,r2,-28264
  803d8c:	e0bfff15 	stw	r2,-4(fp)
  803d90:	e0bfff17 	ldw	r2,-4(fp)
}
  803d94:	e037883a 	mov	sp,fp
  803d98:	dfc00117 	ldw	ra,4(sp)
  803d9c:	df000017 	ldw	fp,0(sp)
  803da0:	dec00204 	addi	sp,sp,8
  803da4:	f800283a 	ret

00803da8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803da8:	defffd04 	addi	sp,sp,-12
  803dac:	dfc00215 	stw	ra,8(sp)
  803db0:	df000115 	stw	fp,4(sp)
  803db4:	df000104 	addi	fp,sp,4
  803db8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
  803dbc:	08053900 	call	805390 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  803dc0:	00800044 	movi	r2,1
  803dc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  803dc8:	e037883a 	mov	sp,fp
  803dcc:	dfc00117 	ldw	ra,4(sp)
  803dd0:	df000017 	ldw	fp,0(sp)
  803dd4:	dec00204 	addi	sp,sp,8
  803dd8:	f800283a 	ret

00803ddc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  803ddc:	defffe04 	addi	sp,sp,-8
  803de0:	dfc00115 	stw	ra,4(sp)
  803de4:	df000015 	stw	fp,0(sp)
  803de8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  803dec:	01004034 	movhi	r4,256
  803df0:	21040804 	addi	r4,r4,4128
  803df4:	000b883a 	mov	r5,zero
  803df8:	000d883a 	mov	r6,zero
  803dfc:	01c00044 	movi	r7,1
  803e00:	08049c80 	call	8049c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  803e04:	01002034 	movhi	r4,128
  803e08:	21193204 	addi	r4,r4,25800
  803e0c:	000b883a 	mov	r5,zero
  803e10:	018000c4 	movi	r6,3
  803e14:	0803ff40 	call	803ff4 <altera_avalon_jtag_uart_init>
  803e18:	01002034 	movhi	r4,128
  803e1c:	21192804 	addi	r4,r4,25760
  803e20:	0803e740 	call	803e74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, SYS_ID);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SEG_CONTROLLER, SEG_CONTROLLER);
  803e24:	01002034 	movhi	r4,128
  803e28:	211d4004 	addi	r4,r4,29952
  803e2c:	0803e740 	call	803e74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( KEY, KEY);
  803e30:	01002034 	movhi	r4,128
  803e34:	211d4b04 	addi	r4,r4,29996
  803e38:	0803e740 	call	803e74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_GREEN, LED_GREEN);
  803e3c:	01002034 	movhi	r4,128
  803e40:	211d5604 	addi	r4,r4,30040
  803e44:	0803e740 	call	803e74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_RED, LED_RED);
  803e48:	01002034 	movhi	r4,128
  803e4c:	211d6104 	addi	r4,r4,30084
  803e50:	0803e740 	call	803e74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCHES, SWITCHES);
  803e54:	01002034 	movhi	r4,128
  803e58:	211d6c04 	addi	r4,r4,30128
  803e5c:	0803e740 	call	803e74 <alt_dev_reg>
}
  803e60:	e037883a 	mov	sp,fp
  803e64:	dfc00117 	ldw	ra,4(sp)
  803e68:	df000017 	ldw	fp,0(sp)
  803e6c:	dec00204 	addi	sp,sp,8
  803e70:	f800283a 	ret

00803e74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  803e74:	defffd04 	addi	sp,sp,-12
  803e78:	dfc00215 	stw	ra,8(sp)
  803e7c:	df000115 	stw	fp,4(sp)
  803e80:	df000104 	addi	fp,sp,4
  803e84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803e88:	e13fff17 	ldw	r4,-4(fp)
  803e8c:	01402034 	movhi	r5,128
  803e90:	295d8304 	addi	r5,r5,30220
  803e94:	0804bc00 	call	804bc0 <alt_dev_llist_insert>
}
  803e98:	e037883a 	mov	sp,fp
  803e9c:	dfc00117 	ldw	ra,4(sp)
  803ea0:	df000017 	ldw	fp,0(sp)
  803ea4:	dec00204 	addi	sp,sp,8
  803ea8:	f800283a 	ret

00803eac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  803eac:	defffa04 	addi	sp,sp,-24
  803eb0:	dfc00515 	stw	ra,20(sp)
  803eb4:	df000415 	stw	fp,16(sp)
  803eb8:	df000404 	addi	fp,sp,16
  803ebc:	e13ffd15 	stw	r4,-12(fp)
  803ec0:	e17ffe15 	stw	r5,-8(fp)
  803ec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803ec8:	e0bffd17 	ldw	r2,-12(fp)
  803ecc:	10800017 	ldw	r2,0(r2)
  803ed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803ed4:	e0bffc17 	ldw	r2,-16(fp)
  803ed8:	11000a04 	addi	r4,r2,40
  803edc:	e0bffd17 	ldw	r2,-12(fp)
  803ee0:	11c00217 	ldw	r7,8(r2)
  803ee4:	e17ffe17 	ldw	r5,-8(fp)
  803ee8:	e1bfff17 	ldw	r6,-4(fp)
  803eec:	08044f00 	call	8044f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803ef0:	e037883a 	mov	sp,fp
  803ef4:	dfc00117 	ldw	ra,4(sp)
  803ef8:	df000017 	ldw	fp,0(sp)
  803efc:	dec00204 	addi	sp,sp,8
  803f00:	f800283a 	ret

00803f04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803f04:	defffa04 	addi	sp,sp,-24
  803f08:	dfc00515 	stw	ra,20(sp)
  803f0c:	df000415 	stw	fp,16(sp)
  803f10:	df000404 	addi	fp,sp,16
  803f14:	e13ffd15 	stw	r4,-12(fp)
  803f18:	e17ffe15 	stw	r5,-8(fp)
  803f1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803f20:	e0bffd17 	ldw	r2,-12(fp)
  803f24:	10800017 	ldw	r2,0(r2)
  803f28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  803f2c:	e0bffc17 	ldw	r2,-16(fp)
  803f30:	11000a04 	addi	r4,r2,40
  803f34:	e0bffd17 	ldw	r2,-12(fp)
  803f38:	11c00217 	ldw	r7,8(r2)
  803f3c:	e17ffe17 	ldw	r5,-8(fp)
  803f40:	e1bfff17 	ldw	r6,-4(fp)
  803f44:	08047140 	call	804714 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803f48:	e037883a 	mov	sp,fp
  803f4c:	dfc00117 	ldw	ra,4(sp)
  803f50:	df000017 	ldw	fp,0(sp)
  803f54:	dec00204 	addi	sp,sp,8
  803f58:	f800283a 	ret

00803f5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  803f5c:	defffc04 	addi	sp,sp,-16
  803f60:	dfc00315 	stw	ra,12(sp)
  803f64:	df000215 	stw	fp,8(sp)
  803f68:	df000204 	addi	fp,sp,8
  803f6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803f70:	e0bfff17 	ldw	r2,-4(fp)
  803f74:	10800017 	ldw	r2,0(r2)
  803f78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  803f7c:	e0bffe17 	ldw	r2,-8(fp)
  803f80:	11000a04 	addi	r4,r2,40
  803f84:	e0bfff17 	ldw	r2,-4(fp)
  803f88:	11400217 	ldw	r5,8(r2)
  803f8c:	08043880 	call	804388 <altera_avalon_jtag_uart_close>
}
  803f90:	e037883a 	mov	sp,fp
  803f94:	dfc00117 	ldw	ra,4(sp)
  803f98:	df000017 	ldw	fp,0(sp)
  803f9c:	dec00204 	addi	sp,sp,8
  803fa0:	f800283a 	ret

00803fa4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  803fa4:	defffa04 	addi	sp,sp,-24
  803fa8:	dfc00515 	stw	ra,20(sp)
  803fac:	df000415 	stw	fp,16(sp)
  803fb0:	df000404 	addi	fp,sp,16
  803fb4:	e13ffd15 	stw	r4,-12(fp)
  803fb8:	e17ffe15 	stw	r5,-8(fp)
  803fbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  803fc0:	e0bffd17 	ldw	r2,-12(fp)
  803fc4:	10800017 	ldw	r2,0(r2)
  803fc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  803fcc:	e0bffc17 	ldw	r2,-16(fp)
  803fd0:	11000a04 	addi	r4,r2,40
  803fd4:	e17ffe17 	ldw	r5,-8(fp)
  803fd8:	e1bfff17 	ldw	r6,-4(fp)
  803fdc:	08043fc0 	call	8043fc <altera_avalon_jtag_uart_ioctl>
}
  803fe0:	e037883a 	mov	sp,fp
  803fe4:	dfc00117 	ldw	ra,4(sp)
  803fe8:	df000017 	ldw	fp,0(sp)
  803fec:	dec00204 	addi	sp,sp,8
  803ff0:	f800283a 	ret

00803ff4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  803ff4:	defffb04 	addi	sp,sp,-20
  803ff8:	dfc00415 	stw	ra,16(sp)
  803ffc:	df000315 	stw	fp,12(sp)
  804000:	df000304 	addi	fp,sp,12
  804004:	e13ffd15 	stw	r4,-12(fp)
  804008:	e17ffe15 	stw	r5,-8(fp)
  80400c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804010:	e0fffd17 	ldw	r3,-12(fp)
  804014:	00800044 	movi	r2,1
  804018:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80401c:	e0bffd17 	ldw	r2,-12(fp)
  804020:	10800017 	ldw	r2,0(r2)
  804024:	11000104 	addi	r4,r2,4
  804028:	e0bffd17 	ldw	r2,-12(fp)
  80402c:	10800817 	ldw	r2,32(r2)
  804030:	1007883a 	mov	r3,r2
  804034:	2005883a 	mov	r2,r4
  804038:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80403c:	e13fff17 	ldw	r4,-4(fp)
  804040:	e17ffd17 	ldw	r5,-12(fp)
  804044:	01802034 	movhi	r6,128
  804048:	31902b04 	addi	r6,r6,16556
  80404c:	080339c0 	call	80339c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804050:	e0bffd17 	ldw	r2,-12(fp)
  804054:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  804058:	e0bffd17 	ldw	r2,-12(fp)
  80405c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804060:	00802074 	movhi	r2,129
  804064:	10a46b04 	addi	r2,r2,-28244
  804068:	10800017 	ldw	r2,0(r2)
  80406c:	100b883a 	mov	r5,r2
  804070:	01802034 	movhi	r6,128
  804074:	3190b604 	addi	r6,r6,17112
  804078:	e1fffd17 	ldw	r7,-12(fp)
  80407c:	0804a500 	call	804a50 <alt_alarm_start>
  804080:	1004403a 	cmpge	r2,r2,zero
  804084:	1000041e 	bne	r2,zero,804098 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  804088:	e0fffd17 	ldw	r3,-12(fp)
  80408c:	00a00034 	movhi	r2,32768
  804090:	10bfffc4 	addi	r2,r2,-1
  804094:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  804098:	e037883a 	mov	sp,fp
  80409c:	dfc00117 	ldw	ra,4(sp)
  8040a0:	df000017 	ldw	fp,0(sp)
  8040a4:	dec00204 	addi	sp,sp,8
  8040a8:	f800283a 	ret

008040ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8040ac:	defff704 	addi	sp,sp,-36
  8040b0:	df000815 	stw	fp,32(sp)
  8040b4:	df000804 	addi	fp,sp,32
  8040b8:	e13ffe15 	stw	r4,-8(fp)
  8040bc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8040c0:	e0bffe17 	ldw	r2,-8(fp)
  8040c4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  8040c8:	e0bffd17 	ldw	r2,-12(fp)
  8040cc:	10800017 	ldw	r2,0(r2)
  8040d0:	e0bffc15 	stw	r2,-16(fp)
  8040d4:	00000006 	br	8040d8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8040d8:	e0bffc17 	ldw	r2,-16(fp)
  8040dc:	10800104 	addi	r2,r2,4
  8040e0:	10800037 	ldwio	r2,0(r2)
  8040e4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8040e8:	e0bffb17 	ldw	r2,-20(fp)
  8040ec:	1080c00c 	andi	r2,r2,768
  8040f0:	1005003a 	cmpeq	r2,r2,zero
  8040f4:	1000741e 	bne	r2,zero,8042c8 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8040f8:	e0bffb17 	ldw	r2,-20(fp)
  8040fc:	1080400c 	andi	r2,r2,256
  804100:	1005003a 	cmpeq	r2,r2,zero
  804104:	1000351e 	bne	r2,zero,8041dc <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  804108:	00800074 	movhi	r2,1
  80410c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804110:	e0bffd17 	ldw	r2,-12(fp)
  804114:	10800a17 	ldw	r2,40(r2)
  804118:	10800044 	addi	r2,r2,1
  80411c:	1081ffcc 	andi	r2,r2,2047
  804120:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  804124:	e0bffd17 	ldw	r2,-12(fp)
  804128:	10c00b17 	ldw	r3,44(r2)
  80412c:	e0bff917 	ldw	r2,-28(fp)
  804130:	18801626 	beq	r3,r2,80418c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804134:	e0bffc17 	ldw	r2,-16(fp)
  804138:	10800037 	ldwio	r2,0(r2)
  80413c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804140:	e0bffa17 	ldw	r2,-24(fp)
  804144:	10a0000c 	andi	r2,r2,32768
  804148:	1005003a 	cmpeq	r2,r2,zero
  80414c:	10000f1e 	bne	r2,zero,80418c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804150:	e0bffd17 	ldw	r2,-12(fp)
  804154:	10c00a17 	ldw	r3,40(r2)
  804158:	e0bffa17 	ldw	r2,-24(fp)
  80415c:	1009883a 	mov	r4,r2
  804160:	e0bffd17 	ldw	r2,-12(fp)
  804164:	1885883a 	add	r2,r3,r2
  804168:	10800e04 	addi	r2,r2,56
  80416c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804170:	e0bffd17 	ldw	r2,-12(fp)
  804174:	10800a17 	ldw	r2,40(r2)
  804178:	10800044 	addi	r2,r2,1
  80417c:	10c1ffcc 	andi	r3,r2,2047
  804180:	e0bffd17 	ldw	r2,-12(fp)
  804184:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  804188:	003fe106 	br	804110 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80418c:	e0bffa17 	ldw	r2,-24(fp)
  804190:	10bfffec 	andhi	r2,r2,65535
  804194:	1005003a 	cmpeq	r2,r2,zero
  804198:	1000101e 	bne	r2,zero,8041dc <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80419c:	e0bffd17 	ldw	r2,-12(fp)
  8041a0:	10c00817 	ldw	r3,32(r2)
  8041a4:	00bfff84 	movi	r2,-2
  8041a8:	1886703a 	and	r3,r3,r2
  8041ac:	e0bffd17 	ldw	r2,-12(fp)
  8041b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8041b4:	e0bffc17 	ldw	r2,-16(fp)
  8041b8:	11000104 	addi	r4,r2,4
  8041bc:	e0bffd17 	ldw	r2,-12(fp)
  8041c0:	10800817 	ldw	r2,32(r2)
  8041c4:	1007883a 	mov	r3,r2
  8041c8:	2005883a 	mov	r2,r4
  8041cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8041d0:	e0bffc17 	ldw	r2,-16(fp)
  8041d4:	10800104 	addi	r2,r2,4
  8041d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8041dc:	e0bffb17 	ldw	r2,-20(fp)
  8041e0:	1080800c 	andi	r2,r2,512
  8041e4:	1005003a 	cmpeq	r2,r2,zero
  8041e8:	103fbb1e 	bne	r2,zero,8040d8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8041ec:	e0bffb17 	ldw	r2,-20(fp)
  8041f0:	10bfffec 	andhi	r2,r2,65535
  8041f4:	1004d43a 	srli	r2,r2,16
  8041f8:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8041fc:	00001506 	br	804254 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  804200:	e13ffc17 	ldw	r4,-16(fp)
  804204:	e0bffd17 	ldw	r2,-12(fp)
  804208:	10c00d17 	ldw	r3,52(r2)
  80420c:	e0bffd17 	ldw	r2,-12(fp)
  804210:	1885883a 	add	r2,r3,r2
  804214:	10820e04 	addi	r2,r2,2104
  804218:	10800003 	ldbu	r2,0(r2)
  80421c:	10c03fcc 	andi	r3,r2,255
  804220:	18c0201c 	xori	r3,r3,128
  804224:	18ffe004 	addi	r3,r3,-128
  804228:	2005883a 	mov	r2,r4
  80422c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804230:	e0bffd17 	ldw	r2,-12(fp)
  804234:	10800d17 	ldw	r2,52(r2)
  804238:	10800044 	addi	r2,r2,1
  80423c:	10c1ffcc 	andi	r3,r2,2047
  804240:	e0bffd17 	ldw	r2,-12(fp)
  804244:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  804248:	e0bff817 	ldw	r2,-32(fp)
  80424c:	10bfffc4 	addi	r2,r2,-1
  804250:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  804254:	e0bff817 	ldw	r2,-32(fp)
  804258:	1005003a 	cmpeq	r2,r2,zero
  80425c:	1000051e 	bne	r2,zero,804274 <altera_avalon_jtag_uart_irq+0x1c8>
  804260:	e0bffd17 	ldw	r2,-12(fp)
  804264:	10c00d17 	ldw	r3,52(r2)
  804268:	e0bffd17 	ldw	r2,-12(fp)
  80426c:	10800c17 	ldw	r2,48(r2)
  804270:	18bfe31e 	bne	r3,r2,804200 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804274:	e0bff817 	ldw	r2,-32(fp)
  804278:	1005003a 	cmpeq	r2,r2,zero
  80427c:	103f961e 	bne	r2,zero,8040d8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804280:	e0bffd17 	ldw	r2,-12(fp)
  804284:	10c00817 	ldw	r3,32(r2)
  804288:	00bfff44 	movi	r2,-3
  80428c:	1886703a 	and	r3,r3,r2
  804290:	e0bffd17 	ldw	r2,-12(fp)
  804294:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804298:	e0bffd17 	ldw	r2,-12(fp)
  80429c:	10800017 	ldw	r2,0(r2)
  8042a0:	11000104 	addi	r4,r2,4
  8042a4:	e0bffd17 	ldw	r2,-12(fp)
  8042a8:	10800817 	ldw	r2,32(r2)
  8042ac:	1007883a 	mov	r3,r2
  8042b0:	2005883a 	mov	r2,r4
  8042b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8042b8:	e0bffc17 	ldw	r2,-16(fp)
  8042bc:	10800104 	addi	r2,r2,4
  8042c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8042c4:	003f8406 	br	8040d8 <altera_avalon_jtag_uart_irq+0x2c>
}
  8042c8:	e037883a 	mov	sp,fp
  8042cc:	df000017 	ldw	fp,0(sp)
  8042d0:	dec00104 	addi	sp,sp,4
  8042d4:	f800283a 	ret

008042d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8042d8:	defffc04 	addi	sp,sp,-16
  8042dc:	df000315 	stw	fp,12(sp)
  8042e0:	df000304 	addi	fp,sp,12
  8042e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8042e8:	e0bfff17 	ldw	r2,-4(fp)
  8042ec:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8042f0:	e0bffe17 	ldw	r2,-8(fp)
  8042f4:	10800017 	ldw	r2,0(r2)
  8042f8:	10800104 	addi	r2,r2,4
  8042fc:	10800037 	ldwio	r2,0(r2)
  804300:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  804304:	e0bffd17 	ldw	r2,-12(fp)
  804308:	1081000c 	andi	r2,r2,1024
  80430c:	1005003a 	cmpeq	r2,r2,zero
  804310:	10000c1e 	bne	r2,zero,804344 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  804314:	e0bffe17 	ldw	r2,-8(fp)
  804318:	10800017 	ldw	r2,0(r2)
  80431c:	11000104 	addi	r4,r2,4
  804320:	e0bffe17 	ldw	r2,-8(fp)
  804324:	10800817 	ldw	r2,32(r2)
  804328:	10810014 	ori	r2,r2,1024
  80432c:	1007883a 	mov	r3,r2
  804330:	2005883a 	mov	r2,r4
  804334:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  804338:	e0bffe17 	ldw	r2,-8(fp)
  80433c:	10000915 	stw	zero,36(r2)
  804340:	00000a06 	br	80436c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804344:	e0bffe17 	ldw	r2,-8(fp)
  804348:	10c00917 	ldw	r3,36(r2)
  80434c:	00a00034 	movhi	r2,32768
  804350:	10bfff04 	addi	r2,r2,-4
  804354:	10c00536 	bltu	r2,r3,80436c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  804358:	e0bffe17 	ldw	r2,-8(fp)
  80435c:	10800917 	ldw	r2,36(r2)
  804360:	10c00044 	addi	r3,r2,1
  804364:	e0bffe17 	ldw	r2,-8(fp)
  804368:	10c00915 	stw	r3,36(r2)
  80436c:	00802074 	movhi	r2,129
  804370:	10a46b04 	addi	r2,r2,-28244
  804374:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  804378:	e037883a 	mov	sp,fp
  80437c:	df000017 	ldw	fp,0(sp)
  804380:	dec00104 	addi	sp,sp,4
  804384:	f800283a 	ret

00804388 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804388:	defffc04 	addi	sp,sp,-16
  80438c:	df000315 	stw	fp,12(sp)
  804390:	df000304 	addi	fp,sp,12
  804394:	e13ffd15 	stw	r4,-12(fp)
  804398:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80439c:	00000706 	br	8043bc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8043a0:	e0bffe17 	ldw	r2,-8(fp)
  8043a4:	1090000c 	andi	r2,r2,16384
  8043a8:	1005003a 	cmpeq	r2,r2,zero
  8043ac:	1000031e 	bne	r2,zero,8043bc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  8043b0:	00bffd44 	movi	r2,-11
  8043b4:	e0bfff15 	stw	r2,-4(fp)
  8043b8:	00000b06 	br	8043e8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8043bc:	e0bffd17 	ldw	r2,-12(fp)
  8043c0:	10c00d17 	ldw	r3,52(r2)
  8043c4:	e0bffd17 	ldw	r2,-12(fp)
  8043c8:	10800c17 	ldw	r2,48(r2)
  8043cc:	18800526 	beq	r3,r2,8043e4 <altera_avalon_jtag_uart_close+0x5c>
  8043d0:	e0bffd17 	ldw	r2,-12(fp)
  8043d4:	10c00917 	ldw	r3,36(r2)
  8043d8:	e0bffd17 	ldw	r2,-12(fp)
  8043dc:	10800117 	ldw	r2,4(r2)
  8043e0:	18bfef36 	bltu	r3,r2,8043a0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8043e4:	e03fff15 	stw	zero,-4(fp)
  8043e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8043ec:	e037883a 	mov	sp,fp
  8043f0:	df000017 	ldw	fp,0(sp)
  8043f4:	dec00104 	addi	sp,sp,4
  8043f8:	f800283a 	ret

008043fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8043fc:	defff804 	addi	sp,sp,-32
  804400:	df000715 	stw	fp,28(sp)
  804404:	df000704 	addi	fp,sp,28
  804408:	e13ffb15 	stw	r4,-20(fp)
  80440c:	e17ffc15 	stw	r5,-16(fp)
  804410:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  804414:	00bff9c4 	movi	r2,-25
  804418:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80441c:	e0bffc17 	ldw	r2,-16(fp)
  804420:	e0bfff15 	stw	r2,-4(fp)
  804424:	e0ffff17 	ldw	r3,-4(fp)
  804428:	189a8060 	cmpeqi	r2,r3,27137
  80442c:	1000041e 	bne	r2,zero,804440 <altera_avalon_jtag_uart_ioctl+0x44>
  804430:	e0ffff17 	ldw	r3,-4(fp)
  804434:	189a80a0 	cmpeqi	r2,r3,27138
  804438:	10001b1e 	bne	r2,zero,8044a8 <altera_avalon_jtag_uart_ioctl+0xac>
  80443c:	00002706 	br	8044dc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804440:	e0bffb17 	ldw	r2,-20(fp)
  804444:	10c00117 	ldw	r3,4(r2)
  804448:	00a00034 	movhi	r2,32768
  80444c:	10bfffc4 	addi	r2,r2,-1
  804450:	18802226 	beq	r3,r2,8044dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  804454:	e0bffd17 	ldw	r2,-12(fp)
  804458:	10800017 	ldw	r2,0(r2)
  80445c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804460:	e0bff917 	ldw	r2,-28(fp)
  804464:	10800090 	cmplti	r2,r2,2
  804468:	1000071e 	bne	r2,zero,804488 <altera_avalon_jtag_uart_ioctl+0x8c>
  80446c:	e0fff917 	ldw	r3,-28(fp)
  804470:	00a00034 	movhi	r2,32768
  804474:	10bfffc4 	addi	r2,r2,-1
  804478:	18800326 	beq	r3,r2,804488 <altera_avalon_jtag_uart_ioctl+0x8c>
  80447c:	e0bff917 	ldw	r2,-28(fp)
  804480:	e0bffe15 	stw	r2,-8(fp)
  804484:	00000306 	br	804494 <altera_avalon_jtag_uart_ioctl+0x98>
  804488:	00e00034 	movhi	r3,32768
  80448c:	18ffff84 	addi	r3,r3,-2
  804490:	e0fffe15 	stw	r3,-8(fp)
  804494:	e0bffb17 	ldw	r2,-20(fp)
  804498:	e0fffe17 	ldw	r3,-8(fp)
  80449c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  8044a0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  8044a4:	00000d06 	br	8044dc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8044a8:	e0bffb17 	ldw	r2,-20(fp)
  8044ac:	10c00117 	ldw	r3,4(r2)
  8044b0:	00a00034 	movhi	r2,32768
  8044b4:	10bfffc4 	addi	r2,r2,-1
  8044b8:	18800826 	beq	r3,r2,8044dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8044bc:	e13ffd17 	ldw	r4,-12(fp)
  8044c0:	e0bffb17 	ldw	r2,-20(fp)
  8044c4:	10c00917 	ldw	r3,36(r2)
  8044c8:	e0bffb17 	ldw	r2,-20(fp)
  8044cc:	10800117 	ldw	r2,4(r2)
  8044d0:	1885803a 	cmpltu	r2,r3,r2
  8044d4:	20800015 	stw	r2,0(r4)
      rc = 0;
  8044d8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8044dc:	e0bffa17 	ldw	r2,-24(fp)
}
  8044e0:	e037883a 	mov	sp,fp
  8044e4:	df000017 	ldw	fp,0(sp)
  8044e8:	dec00104 	addi	sp,sp,4
  8044ec:	f800283a 	ret

008044f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8044f0:	defff204 	addi	sp,sp,-56
  8044f4:	dfc00d15 	stw	ra,52(sp)
  8044f8:	df000c15 	stw	fp,48(sp)
  8044fc:	df000c04 	addi	fp,sp,48
  804500:	e13ffb15 	stw	r4,-20(fp)
  804504:	e17ffc15 	stw	r5,-16(fp)
  804508:	e1bffd15 	stw	r6,-12(fp)
  80450c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  804510:	e0bffc17 	ldw	r2,-16(fp)
  804514:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804518:	00004806 	br	80463c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80451c:	e0bffb17 	ldw	r2,-20(fp)
  804520:	10800a17 	ldw	r2,40(r2)
  804524:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  804528:	e0bffb17 	ldw	r2,-20(fp)
  80452c:	10800b17 	ldw	r2,44(r2)
  804530:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  804534:	e0fff717 	ldw	r3,-36(fp)
  804538:	e0bff617 	ldw	r2,-40(fp)
  80453c:	18800536 	bltu	r3,r2,804554 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804540:	e0bff717 	ldw	r2,-36(fp)
  804544:	e0fff617 	ldw	r3,-40(fp)
  804548:	10c5c83a 	sub	r2,r2,r3
  80454c:	e0bff815 	stw	r2,-32(fp)
  804550:	00000406 	br	804564 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  804554:	00820004 	movi	r2,2048
  804558:	e0fff617 	ldw	r3,-40(fp)
  80455c:	10c5c83a 	sub	r2,r2,r3
  804560:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  804564:	e0bff817 	ldw	r2,-32(fp)
  804568:	1005003a 	cmpeq	r2,r2,zero
  80456c:	10001f1e 	bne	r2,zero,8045ec <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  804570:	e0fffd17 	ldw	r3,-12(fp)
  804574:	e0bff817 	ldw	r2,-32(fp)
  804578:	1880022e 	bgeu	r3,r2,804584 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80457c:	e0bffd17 	ldw	r2,-12(fp)
  804580:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  804584:	e0bffb17 	ldw	r2,-20(fp)
  804588:	10c00e04 	addi	r3,r2,56
  80458c:	e0bff617 	ldw	r2,-40(fp)
  804590:	1887883a 	add	r3,r3,r2
  804594:	e0bffa17 	ldw	r2,-24(fp)
  804598:	1009883a 	mov	r4,r2
  80459c:	180b883a 	mov	r5,r3
  8045a0:	e1bff817 	ldw	r6,-32(fp)
  8045a4:	08015440 	call	801544 <memcpy>
      ptr   += n;
  8045a8:	e0fff817 	ldw	r3,-32(fp)
  8045ac:	e0bffa17 	ldw	r2,-24(fp)
  8045b0:	10c5883a 	add	r2,r2,r3
  8045b4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  8045b8:	e0fffd17 	ldw	r3,-12(fp)
  8045bc:	e0bff817 	ldw	r2,-32(fp)
  8045c0:	1885c83a 	sub	r2,r3,r2
  8045c4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8045c8:	e0fff617 	ldw	r3,-40(fp)
  8045cc:	e0bff817 	ldw	r2,-32(fp)
  8045d0:	1885883a 	add	r2,r3,r2
  8045d4:	10c1ffcc 	andi	r3,r2,2047
  8045d8:	e0bffb17 	ldw	r2,-20(fp)
  8045dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8045e0:	e0bffd17 	ldw	r2,-12(fp)
  8045e4:	10800048 	cmpgei	r2,r2,1
  8045e8:	103fcc1e 	bne	r2,zero,80451c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8045ec:	e0fffa17 	ldw	r3,-24(fp)
  8045f0:	e0bffc17 	ldw	r2,-16(fp)
  8045f4:	1880141e 	bne	r3,r2,804648 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8045f8:	e0bffe17 	ldw	r2,-8(fp)
  8045fc:	1090000c 	andi	r2,r2,16384
  804600:	1004c03a 	cmpne	r2,r2,zero
  804604:	1000101e 	bne	r2,zero,804648 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  804608:	e0bffb17 	ldw	r2,-20(fp)
  80460c:	10c00a17 	ldw	r3,40(r2)
  804610:	e0bff717 	ldw	r2,-36(fp)
  804614:	1880051e 	bne	r3,r2,80462c <altera_avalon_jtag_uart_read+0x13c>
  804618:	e0bffb17 	ldw	r2,-20(fp)
  80461c:	10c00917 	ldw	r3,36(r2)
  804620:	e0bffb17 	ldw	r2,-20(fp)
  804624:	10800117 	ldw	r2,4(r2)
  804628:	18bff736 	bltu	r3,r2,804608 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80462c:	e0bffb17 	ldw	r2,-20(fp)
  804630:	10c00a17 	ldw	r3,40(r2)
  804634:	e0bff717 	ldw	r2,-36(fp)
  804638:	18800326 	beq	r3,r2,804648 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80463c:	e0bffd17 	ldw	r2,-12(fp)
  804640:	10800048 	cmpgei	r2,r2,1
  804644:	103fb51e 	bne	r2,zero,80451c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  804648:	e0fffa17 	ldw	r3,-24(fp)
  80464c:	e0bffc17 	ldw	r2,-16(fp)
  804650:	18801926 	beq	r3,r2,8046b8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804654:	0005303a 	rdctl	r2,status
  804658:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80465c:	e0fff517 	ldw	r3,-44(fp)
  804660:	00bfff84 	movi	r2,-2
  804664:	1884703a 	and	r2,r3,r2
  804668:	1001703a 	wrctl	status,r2
  
  return context;
  80466c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804670:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804674:	e0bffb17 	ldw	r2,-20(fp)
  804678:	10800817 	ldw	r2,32(r2)
  80467c:	10c00054 	ori	r3,r2,1
  804680:	e0bffb17 	ldw	r2,-20(fp)
  804684:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804688:	e0bffb17 	ldw	r2,-20(fp)
  80468c:	10800017 	ldw	r2,0(r2)
  804690:	11000104 	addi	r4,r2,4
  804694:	e0bffb17 	ldw	r2,-20(fp)
  804698:	10800817 	ldw	r2,32(r2)
  80469c:	1007883a 	mov	r3,r2
  8046a0:	2005883a 	mov	r2,r4
  8046a4:	10c00035 	stwio	r3,0(r2)
  8046a8:	e0bff917 	ldw	r2,-28(fp)
  8046ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8046b0:	e0bff417 	ldw	r2,-48(fp)
  8046b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8046b8:	e0fffa17 	ldw	r3,-24(fp)
  8046bc:	e0bffc17 	ldw	r2,-16(fp)
  8046c0:	18800526 	beq	r3,r2,8046d8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8046c4:	e0fffa17 	ldw	r3,-24(fp)
  8046c8:	e0bffc17 	ldw	r2,-16(fp)
  8046cc:	1887c83a 	sub	r3,r3,r2
  8046d0:	e0ffff15 	stw	r3,-4(fp)
  8046d4:	00000906 	br	8046fc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8046d8:	e0bffe17 	ldw	r2,-8(fp)
  8046dc:	1090000c 	andi	r2,r2,16384
  8046e0:	1005003a 	cmpeq	r2,r2,zero
  8046e4:	1000031e 	bne	r2,zero,8046f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8046e8:	00bffd44 	movi	r2,-11
  8046ec:	e0bfff15 	stw	r2,-4(fp)
  8046f0:	00000206 	br	8046fc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8046f4:	00bffec4 	movi	r2,-5
  8046f8:	e0bfff15 	stw	r2,-4(fp)
  8046fc:	e0bfff17 	ldw	r2,-4(fp)
}
  804700:	e037883a 	mov	sp,fp
  804704:	dfc00117 	ldw	ra,4(sp)
  804708:	df000017 	ldw	fp,0(sp)
  80470c:	dec00204 	addi	sp,sp,8
  804710:	f800283a 	ret

00804714 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804714:	defff204 	addi	sp,sp,-56
  804718:	dfc00d15 	stw	ra,52(sp)
  80471c:	df000c15 	stw	fp,48(sp)
  804720:	df000c04 	addi	fp,sp,48
  804724:	e13ffb15 	stw	r4,-20(fp)
  804728:	e17ffc15 	stw	r5,-16(fp)
  80472c:	e1bffd15 	stw	r6,-12(fp)
  804730:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804734:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804738:	e0bffc17 	ldw	r2,-16(fp)
  80473c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804740:	00003a06 	br	80482c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804744:	e0bffb17 	ldw	r2,-20(fp)
  804748:	10800c17 	ldw	r2,48(r2)
  80474c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  804750:	e0bffb17 	ldw	r2,-20(fp)
  804754:	10800d17 	ldw	r2,52(r2)
  804758:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80475c:	e0fffa17 	ldw	r3,-24(fp)
  804760:	e0bff917 	ldw	r2,-28(fp)
  804764:	1880062e 	bgeu	r3,r2,804780 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  804768:	e0fff917 	ldw	r3,-28(fp)
  80476c:	e0bffa17 	ldw	r2,-24(fp)
  804770:	1885c83a 	sub	r2,r3,r2
  804774:	10bfffc4 	addi	r2,r2,-1
  804778:	e0bff815 	stw	r2,-32(fp)
  80477c:	00000c06 	br	8047b0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  804780:	e0bff917 	ldw	r2,-28(fp)
  804784:	1005003a 	cmpeq	r2,r2,zero
  804788:	1000051e 	bne	r2,zero,8047a0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80478c:	00820004 	movi	r2,2048
  804790:	e0fffa17 	ldw	r3,-24(fp)
  804794:	10c5c83a 	sub	r2,r2,r3
  804798:	e0bff815 	stw	r2,-32(fp)
  80479c:	00000406 	br	8047b0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8047a0:	0081ffc4 	movi	r2,2047
  8047a4:	e0fffa17 	ldw	r3,-24(fp)
  8047a8:	10c5c83a 	sub	r2,r2,r3
  8047ac:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8047b0:	e0bff817 	ldw	r2,-32(fp)
  8047b4:	1005003a 	cmpeq	r2,r2,zero
  8047b8:	10001f1e 	bne	r2,zero,804838 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8047bc:	e0fffd17 	ldw	r3,-12(fp)
  8047c0:	e0bff817 	ldw	r2,-32(fp)
  8047c4:	1880022e 	bgeu	r3,r2,8047d0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8047c8:	e0bffd17 	ldw	r2,-12(fp)
  8047cc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8047d0:	e0bffb17 	ldw	r2,-20(fp)
  8047d4:	10c20e04 	addi	r3,r2,2104
  8047d8:	e0bffa17 	ldw	r2,-24(fp)
  8047dc:	1885883a 	add	r2,r3,r2
  8047e0:	e0fffc17 	ldw	r3,-16(fp)
  8047e4:	1009883a 	mov	r4,r2
  8047e8:	180b883a 	mov	r5,r3
  8047ec:	e1bff817 	ldw	r6,-32(fp)
  8047f0:	08015440 	call	801544 <memcpy>
      ptr   += n;
  8047f4:	e0fff817 	ldw	r3,-32(fp)
  8047f8:	e0bffc17 	ldw	r2,-16(fp)
  8047fc:	10c5883a 	add	r2,r2,r3
  804800:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  804804:	e0fffd17 	ldw	r3,-12(fp)
  804808:	e0bff817 	ldw	r2,-32(fp)
  80480c:	1885c83a 	sub	r2,r3,r2
  804810:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804814:	e0fffa17 	ldw	r3,-24(fp)
  804818:	e0bff817 	ldw	r2,-32(fp)
  80481c:	1885883a 	add	r2,r3,r2
  804820:	10c1ffcc 	andi	r3,r2,2047
  804824:	e0bffb17 	ldw	r2,-20(fp)
  804828:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80482c:	e0bffd17 	ldw	r2,-12(fp)
  804830:	10800048 	cmpgei	r2,r2,1
  804834:	103fc31e 	bne	r2,zero,804744 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804838:	0005303a 	rdctl	r2,status
  80483c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804840:	e0fff517 	ldw	r3,-44(fp)
  804844:	00bfff84 	movi	r2,-2
  804848:	1884703a 	and	r2,r3,r2
  80484c:	1001703a 	wrctl	status,r2
  
  return context;
  804850:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804854:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804858:	e0bffb17 	ldw	r2,-20(fp)
  80485c:	10800817 	ldw	r2,32(r2)
  804860:	10c00094 	ori	r3,r2,2
  804864:	e0bffb17 	ldw	r2,-20(fp)
  804868:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80486c:	e0bffb17 	ldw	r2,-20(fp)
  804870:	10800017 	ldw	r2,0(r2)
  804874:	11000104 	addi	r4,r2,4
  804878:	e0bffb17 	ldw	r2,-20(fp)
  80487c:	10800817 	ldw	r2,32(r2)
  804880:	1007883a 	mov	r3,r2
  804884:	2005883a 	mov	r2,r4
  804888:	10c00035 	stwio	r3,0(r2)
  80488c:	e0bff717 	ldw	r2,-36(fp)
  804890:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804894:	e0bff417 	ldw	r2,-48(fp)
  804898:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80489c:	e0bffd17 	ldw	r2,-12(fp)
  8048a0:	10800050 	cmplti	r2,r2,1
  8048a4:	1000111e 	bne	r2,zero,8048ec <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8048a8:	e0bffe17 	ldw	r2,-8(fp)
  8048ac:	1090000c 	andi	r2,r2,16384
  8048b0:	1004c03a 	cmpne	r2,r2,zero
  8048b4:	1000101e 	bne	r2,zero,8048f8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8048b8:	e0bffb17 	ldw	r2,-20(fp)
  8048bc:	10c00d17 	ldw	r3,52(r2)
  8048c0:	e0bff917 	ldw	r2,-28(fp)
  8048c4:	1880051e 	bne	r3,r2,8048dc <altera_avalon_jtag_uart_write+0x1c8>
  8048c8:	e0bffb17 	ldw	r2,-20(fp)
  8048cc:	10c00917 	ldw	r3,36(r2)
  8048d0:	e0bffb17 	ldw	r2,-20(fp)
  8048d4:	10800117 	ldw	r2,4(r2)
  8048d8:	18bff736 	bltu	r3,r2,8048b8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8048dc:	e0bffb17 	ldw	r2,-20(fp)
  8048e0:	10c00d17 	ldw	r3,52(r2)
  8048e4:	e0bff917 	ldw	r2,-28(fp)
  8048e8:	18800326 	beq	r3,r2,8048f8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  8048ec:	e0bffd17 	ldw	r2,-12(fp)
  8048f0:	10800048 	cmpgei	r2,r2,1
  8048f4:	103fcd1e 	bne	r2,zero,80482c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8048f8:	e0fffc17 	ldw	r3,-16(fp)
  8048fc:	e0bff617 	ldw	r2,-40(fp)
  804900:	18800526 	beq	r3,r2,804918 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  804904:	e0fffc17 	ldw	r3,-16(fp)
  804908:	e0bff617 	ldw	r2,-40(fp)
  80490c:	1887c83a 	sub	r3,r3,r2
  804910:	e0ffff15 	stw	r3,-4(fp)
  804914:	00000906 	br	80493c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  804918:	e0bffe17 	ldw	r2,-8(fp)
  80491c:	1090000c 	andi	r2,r2,16384
  804920:	1005003a 	cmpeq	r2,r2,zero
  804924:	1000031e 	bne	r2,zero,804934 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  804928:	00bffd44 	movi	r2,-11
  80492c:	e0bfff15 	stw	r2,-4(fp)
  804930:	00000206 	br	80493c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804934:	00bffec4 	movi	r2,-5
  804938:	e0bfff15 	stw	r2,-4(fp)
  80493c:	e0bfff17 	ldw	r2,-4(fp)
}
  804940:	e037883a 	mov	sp,fp
  804944:	dfc00117 	ldw	ra,4(sp)
  804948:	df000017 	ldw	fp,0(sp)
  80494c:	dec00204 	addi	sp,sp,8
  804950:	f800283a 	ret

00804954 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  804954:	defff904 	addi	sp,sp,-28
  804958:	dfc00615 	stw	ra,24(sp)
  80495c:	df000515 	stw	fp,20(sp)
  804960:	df000504 	addi	fp,sp,20
  804964:	e13ffe15 	stw	r4,-8(fp)
  804968:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80496c:	e0bffe17 	ldw	r2,-8(fp)
  804970:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  804974:	e0bffe17 	ldw	r2,-8(fp)
  804978:	10800104 	addi	r2,r2,4
  80497c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804980:	0005303a 	rdctl	r2,status
  804984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804988:	e0fffc17 	ldw	r3,-16(fp)
  80498c:	00bfff84 	movi	r2,-2
  804990:	1884703a 	and	r2,r3,r2
  804994:	1001703a 	wrctl	status,r2
  
  return context;
  804998:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80499c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  8049a0:	08052840 	call	805284 <alt_tick>
  8049a4:	e0bffd17 	ldw	r2,-12(fp)
  8049a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8049ac:	e0bffb17 	ldw	r2,-20(fp)
  8049b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8049b4:	e037883a 	mov	sp,fp
  8049b8:	dfc00117 	ldw	ra,4(sp)
  8049bc:	df000017 	ldw	fp,0(sp)
  8049c0:	dec00204 	addi	sp,sp,8
  8049c4:	f800283a 	ret

008049c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8049c8:	defff904 	addi	sp,sp,-28
  8049cc:	dfc00615 	stw	ra,24(sp)
  8049d0:	df000515 	stw	fp,20(sp)
  8049d4:	df000504 	addi	fp,sp,20
  8049d8:	e13ffc15 	stw	r4,-16(fp)
  8049dc:	e17ffd15 	stw	r5,-12(fp)
  8049e0:	e1bffe15 	stw	r6,-8(fp)
  8049e4:	e1ffff15 	stw	r7,-4(fp)
  8049e8:	e0bfff17 	ldw	r2,-4(fp)
  8049ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8049f0:	00802074 	movhi	r2,129
  8049f4:	10a46b04 	addi	r2,r2,-28244
  8049f8:	10800017 	ldw	r2,0(r2)
  8049fc:	1004c03a 	cmpne	r2,r2,zero
  804a00:	1000041e 	bne	r2,zero,804a14 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  804a04:	00c02074 	movhi	r3,129
  804a08:	18e46b04 	addi	r3,r3,-28244
  804a0c:	e0bffb17 	ldw	r2,-20(fp)
  804a10:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  804a14:	e0bffc17 	ldw	r2,-16(fp)
  804a18:	10800104 	addi	r2,r2,4
  804a1c:	1007883a 	mov	r3,r2
  804a20:	008001c4 	movi	r2,7
  804a24:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  804a28:	e13ffe17 	ldw	r4,-8(fp)
  804a2c:	e17ffc17 	ldw	r5,-16(fp)
  804a30:	01802034 	movhi	r6,128
  804a34:	31925504 	addi	r6,r6,18772
  804a38:	080339c0 	call	80339c <alt_irq_register>
#endif  
}
  804a3c:	e037883a 	mov	sp,fp
  804a40:	dfc00117 	ldw	ra,4(sp)
  804a44:	df000017 	ldw	fp,0(sp)
  804a48:	dec00204 	addi	sp,sp,8
  804a4c:	f800283a 	ret

00804a50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  804a50:	defff404 	addi	sp,sp,-48
  804a54:	df000b15 	stw	fp,44(sp)
  804a58:	df000b04 	addi	fp,sp,44
  804a5c:	e13ffb15 	stw	r4,-20(fp)
  804a60:	e17ffc15 	stw	r5,-16(fp)
  804a64:	e1bffd15 	stw	r6,-12(fp)
  804a68:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  804a6c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804a70:	00802074 	movhi	r2,129
  804a74:	10a46b04 	addi	r2,r2,-28244
  804a78:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  804a7c:	1005003a 	cmpeq	r2,r2,zero
  804a80:	1000411e 	bne	r2,zero,804b88 <alt_alarm_start+0x138>
  {
    if (alarm)
  804a84:	e0bffb17 	ldw	r2,-20(fp)
  804a88:	1005003a 	cmpeq	r2,r2,zero
  804a8c:	10003b1e 	bne	r2,zero,804b7c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  804a90:	e0fffb17 	ldw	r3,-20(fp)
  804a94:	e0bffd17 	ldw	r2,-12(fp)
  804a98:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  804a9c:	e0fffb17 	ldw	r3,-20(fp)
  804aa0:	e0bffe17 	ldw	r2,-8(fp)
  804aa4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804aa8:	0005303a 	rdctl	r2,status
  804aac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ab0:	e0fff817 	ldw	r3,-32(fp)
  804ab4:	00bfff84 	movi	r2,-2
  804ab8:	1884703a 	and	r2,r3,r2
  804abc:	1001703a 	wrctl	status,r2
  
  return context;
  804ac0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  804ac4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  804ac8:	00802074 	movhi	r2,129
  804acc:	10a46c04 	addi	r2,r2,-28240
  804ad0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  804ad4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  804ad8:	e0fffc17 	ldw	r3,-16(fp)
  804adc:	e0bff917 	ldw	r2,-28(fp)
  804ae0:	1885883a 	add	r2,r3,r2
  804ae4:	10c00044 	addi	r3,r2,1
  804ae8:	e0bffb17 	ldw	r2,-20(fp)
  804aec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804af0:	e0bffb17 	ldw	r2,-20(fp)
  804af4:	10c00217 	ldw	r3,8(r2)
  804af8:	e0bff917 	ldw	r2,-28(fp)
  804afc:	1880042e 	bgeu	r3,r2,804b10 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  804b00:	e0fffb17 	ldw	r3,-20(fp)
  804b04:	00800044 	movi	r2,1
  804b08:	18800405 	stb	r2,16(r3)
  804b0c:	00000206 	br	804b18 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  804b10:	e0bffb17 	ldw	r2,-20(fp)
  804b14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  804b18:	e0fffb17 	ldw	r3,-20(fp)
  804b1c:	00802034 	movhi	r2,128
  804b20:	109d8904 	addi	r2,r2,30244
  804b24:	e0bff615 	stw	r2,-40(fp)
  804b28:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804b2c:	e0fff717 	ldw	r3,-36(fp)
  804b30:	e0bff617 	ldw	r2,-40(fp)
  804b34:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  804b38:	e0bff617 	ldw	r2,-40(fp)
  804b3c:	10c00017 	ldw	r3,0(r2)
  804b40:	e0bff717 	ldw	r2,-36(fp)
  804b44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804b48:	e0bff617 	ldw	r2,-40(fp)
  804b4c:	10c00017 	ldw	r3,0(r2)
  804b50:	e0bff717 	ldw	r2,-36(fp)
  804b54:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  804b58:	e0fff617 	ldw	r3,-40(fp)
  804b5c:	e0bff717 	ldw	r2,-36(fp)
  804b60:	18800015 	stw	r2,0(r3)
  804b64:	e0bffa17 	ldw	r2,-24(fp)
  804b68:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804b6c:	e0bff517 	ldw	r2,-44(fp)
  804b70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  804b74:	e03fff15 	stw	zero,-4(fp)
  804b78:	00000506 	br	804b90 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  804b7c:	00bffa84 	movi	r2,-22
  804b80:	e0bfff15 	stw	r2,-4(fp)
  804b84:	00000206 	br	804b90 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  804b88:	00bfde84 	movi	r2,-134
  804b8c:	e0bfff15 	stw	r2,-4(fp)
  804b90:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  804b94:	e037883a 	mov	sp,fp
  804b98:	df000017 	ldw	fp,0(sp)
  804b9c:	dec00104 	addi	sp,sp,4
  804ba0:	f800283a 	ret

00804ba4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  804ba4:	deffff04 	addi	sp,sp,-4
  804ba8:	df000015 	stw	fp,0(sp)
  804bac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  804bb0:	e037883a 	mov	sp,fp
  804bb4:	df000017 	ldw	fp,0(sp)
  804bb8:	dec00104 	addi	sp,sp,4
  804bbc:	f800283a 	ret

00804bc0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  804bc0:	defff904 	addi	sp,sp,-28
  804bc4:	dfc00615 	stw	ra,24(sp)
  804bc8:	df000515 	stw	fp,20(sp)
  804bcc:	df000504 	addi	fp,sp,20
  804bd0:	e13ffd15 	stw	r4,-12(fp)
  804bd4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  804bd8:	e0bffd17 	ldw	r2,-12(fp)
  804bdc:	1005003a 	cmpeq	r2,r2,zero
  804be0:	1000041e 	bne	r2,zero,804bf4 <alt_dev_llist_insert+0x34>
  804be4:	e0bffd17 	ldw	r2,-12(fp)
  804be8:	10800217 	ldw	r2,8(r2)
  804bec:	1004c03a 	cmpne	r2,r2,zero
  804bf0:	1000071e 	bne	r2,zero,804c10 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  804bf4:	0804c740 	call	804c74 <alt_get_errno>
  804bf8:	1007883a 	mov	r3,r2
  804bfc:	00800584 	movi	r2,22
  804c00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  804c04:	00bffa84 	movi	r2,-22
  804c08:	e0bfff15 	stw	r2,-4(fp)
  804c0c:	00001306 	br	804c5c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  804c10:	e0fffd17 	ldw	r3,-12(fp)
  804c14:	e0bffe17 	ldw	r2,-8(fp)
  804c18:	e0bffb15 	stw	r2,-20(fp)
  804c1c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804c20:	e0fffc17 	ldw	r3,-16(fp)
  804c24:	e0bffb17 	ldw	r2,-20(fp)
  804c28:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  804c2c:	e0bffb17 	ldw	r2,-20(fp)
  804c30:	10c00017 	ldw	r3,0(r2)
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804c3c:	e0bffb17 	ldw	r2,-20(fp)
  804c40:	10c00017 	ldw	r3,0(r2)
  804c44:	e0bffc17 	ldw	r2,-16(fp)
  804c48:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  804c4c:	e0fffb17 	ldw	r3,-20(fp)
  804c50:	e0bffc17 	ldw	r2,-16(fp)
  804c54:	18800015 	stw	r2,0(r3)

  return 0;  
  804c58:	e03fff15 	stw	zero,-4(fp)
  804c5c:	e0bfff17 	ldw	r2,-4(fp)
}
  804c60:	e037883a 	mov	sp,fp
  804c64:	dfc00117 	ldw	ra,4(sp)
  804c68:	df000017 	ldw	fp,0(sp)
  804c6c:	dec00204 	addi	sp,sp,8
  804c70:	f800283a 	ret

00804c74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804c74:	defffd04 	addi	sp,sp,-12
  804c78:	dfc00215 	stw	ra,8(sp)
  804c7c:	df000115 	stw	fp,4(sp)
  804c80:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804c84:	00802034 	movhi	r2,128
  804c88:	109d8604 	addi	r2,r2,30232
  804c8c:	10800017 	ldw	r2,0(r2)
  804c90:	1005003a 	cmpeq	r2,r2,zero
  804c94:	1000061e 	bne	r2,zero,804cb0 <alt_get_errno+0x3c>
  804c98:	00802034 	movhi	r2,128
  804c9c:	109d8604 	addi	r2,r2,30232
  804ca0:	10800017 	ldw	r2,0(r2)
  804ca4:	103ee83a 	callr	r2
  804ca8:	e0bfff15 	stw	r2,-4(fp)
  804cac:	00000306 	br	804cbc <alt_get_errno+0x48>
  804cb0:	00802074 	movhi	r2,129
  804cb4:	10a46604 	addi	r2,r2,-28264
  804cb8:	e0bfff15 	stw	r2,-4(fp)
  804cbc:	e0bfff17 	ldw	r2,-4(fp)
}
  804cc0:	e037883a 	mov	sp,fp
  804cc4:	dfc00117 	ldw	ra,4(sp)
  804cc8:	df000017 	ldw	fp,0(sp)
  804ccc:	dec00204 	addi	sp,sp,8
  804cd0:	f800283a 	ret

00804cd4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  804cd4:	defffd04 	addi	sp,sp,-12
  804cd8:	dfc00215 	stw	ra,8(sp)
  804cdc:	df000115 	stw	fp,4(sp)
  804ce0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  804ce4:	00bfff04 	movi	r2,-4
  804ce8:	00c02034 	movhi	r3,128
  804cec:	18d69004 	addi	r3,r3,23104
  804cf0:	1885883a 	add	r2,r3,r2
  804cf4:	e0bfff15 	stw	r2,-4(fp)
  804cf8:	00000606 	br	804d14 <_do_ctors+0x40>
        (*ctor) (); 
  804cfc:	e0bfff17 	ldw	r2,-4(fp)
  804d00:	10800017 	ldw	r2,0(r2)
  804d04:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  804d08:	e0bfff17 	ldw	r2,-4(fp)
  804d0c:	10bfff04 	addi	r2,r2,-4
  804d10:	e0bfff15 	stw	r2,-4(fp)
  804d14:	e0ffff17 	ldw	r3,-4(fp)
  804d18:	00802034 	movhi	r2,128
  804d1c:	10968f04 	addi	r2,r2,23100
  804d20:	18bff62e 	bgeu	r3,r2,804cfc <_do_ctors+0x28>
        (*ctor) (); 
}
  804d24:	e037883a 	mov	sp,fp
  804d28:	dfc00117 	ldw	ra,4(sp)
  804d2c:	df000017 	ldw	fp,0(sp)
  804d30:	dec00204 	addi	sp,sp,8
  804d34:	f800283a 	ret

00804d38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  804d38:	defffd04 	addi	sp,sp,-12
  804d3c:	dfc00215 	stw	ra,8(sp)
  804d40:	df000115 	stw	fp,4(sp)
  804d44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  804d48:	00bfff04 	movi	r2,-4
  804d4c:	00c02034 	movhi	r3,128
  804d50:	18d69004 	addi	r3,r3,23104
  804d54:	1885883a 	add	r2,r3,r2
  804d58:	e0bfff15 	stw	r2,-4(fp)
  804d5c:	00000606 	br	804d78 <_do_dtors+0x40>
        (*dtor) (); 
  804d60:	e0bfff17 	ldw	r2,-4(fp)
  804d64:	10800017 	ldw	r2,0(r2)
  804d68:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  804d6c:	e0bfff17 	ldw	r2,-4(fp)
  804d70:	10bfff04 	addi	r2,r2,-4
  804d74:	e0bfff15 	stw	r2,-4(fp)
  804d78:	e0ffff17 	ldw	r3,-4(fp)
  804d7c:	00802034 	movhi	r2,128
  804d80:	10969004 	addi	r2,r2,23104
  804d84:	18bff62e 	bgeu	r3,r2,804d60 <_do_dtors+0x28>
        (*dtor) (); 
}
  804d88:	e037883a 	mov	sp,fp
  804d8c:	dfc00117 	ldw	ra,4(sp)
  804d90:	df000017 	ldw	fp,0(sp)
  804d94:	dec00204 	addi	sp,sp,8
  804d98:	f800283a 	ret

00804d9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  804d9c:	deffff04 	addi	sp,sp,-4
  804da0:	df000015 	stw	fp,0(sp)
  804da4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  804da8:	e037883a 	mov	sp,fp
  804dac:	df000017 	ldw	fp,0(sp)
  804db0:	dec00104 	addi	sp,sp,4
  804db4:	f800283a 	ret

00804db8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  804db8:	defff804 	addi	sp,sp,-32
  804dbc:	dfc00715 	stw	ra,28(sp)
  804dc0:	df000615 	stw	fp,24(sp)
  804dc4:	dc000515 	stw	r16,20(sp)
  804dc8:	df000504 	addi	fp,sp,20
  804dcc:	e13ffc15 	stw	r4,-16(fp)
  804dd0:	e17ffd15 	stw	r5,-12(fp)
  804dd4:	e1bffe15 	stw	r6,-8(fp)
  804dd8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  804ddc:	e13ffd17 	ldw	r4,-12(fp)
  804de0:	e17ffe17 	ldw	r5,-8(fp)
  804de4:	e1bfff17 	ldw	r6,-4(fp)
  804de8:	08050000 	call	805000 <open>
  804dec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  804df0:	e0bffb17 	ldw	r2,-20(fp)
  804df4:	1004803a 	cmplt	r2,r2,zero
  804df8:	10001f1e 	bne	r2,zero,804e78 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  804dfc:	e13ffb17 	ldw	r4,-20(fp)
  804e00:	04002034 	movhi	r16,128
  804e04:	8418c804 	addi	r16,r16,25376
  804e08:	01400304 	movi	r5,12
  804e0c:	08030a00 	call	8030a0 <__mulsi3>
  804e10:	1405883a 	add	r2,r2,r16
  804e14:	10c00017 	ldw	r3,0(r2)
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  804e20:	e13ffb17 	ldw	r4,-20(fp)
  804e24:	04002034 	movhi	r16,128
  804e28:	8418c804 	addi	r16,r16,25376
  804e2c:	01400304 	movi	r5,12
  804e30:	08030a00 	call	8030a0 <__mulsi3>
  804e34:	1405883a 	add	r2,r2,r16
  804e38:	10800104 	addi	r2,r2,4
  804e3c:	10c00017 	ldw	r3,0(r2)
  804e40:	e0bffc17 	ldw	r2,-16(fp)
  804e44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  804e48:	e13ffb17 	ldw	r4,-20(fp)
  804e4c:	04002034 	movhi	r16,128
  804e50:	8418c804 	addi	r16,r16,25376
  804e54:	01400304 	movi	r5,12
  804e58:	08030a00 	call	8030a0 <__mulsi3>
  804e5c:	1405883a 	add	r2,r2,r16
  804e60:	10800204 	addi	r2,r2,8
  804e64:	10c00017 	ldw	r3,0(r2)
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  804e70:	e13ffb17 	ldw	r4,-20(fp)
  804e74:	0803af00 	call	803af0 <alt_release_fd>
  }
} 
  804e78:	e037883a 	mov	sp,fp
  804e7c:	dfc00217 	ldw	ra,8(sp)
  804e80:	df000117 	ldw	fp,4(sp)
  804e84:	dc000017 	ldw	r16,0(sp)
  804e88:	dec00304 	addi	sp,sp,12
  804e8c:	f800283a 	ret

00804e90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  804e90:	defffb04 	addi	sp,sp,-20
  804e94:	dfc00415 	stw	ra,16(sp)
  804e98:	df000315 	stw	fp,12(sp)
  804e9c:	df000304 	addi	fp,sp,12
  804ea0:	e13ffd15 	stw	r4,-12(fp)
  804ea4:	e17ffe15 	stw	r5,-8(fp)
  804ea8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  804eac:	01002034 	movhi	r4,128
  804eb0:	2118cb04 	addi	r4,r4,25388
  804eb4:	e17ffd17 	ldw	r5,-12(fp)
  804eb8:	01800044 	movi	r6,1
  804ebc:	01c07fc4 	movi	r7,511
  804ec0:	0804db80 	call	804db8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  804ec4:	01002034 	movhi	r4,128
  804ec8:	2118c804 	addi	r4,r4,25376
  804ecc:	e17ffe17 	ldw	r5,-8(fp)
  804ed0:	000d883a 	mov	r6,zero
  804ed4:	01c07fc4 	movi	r7,511
  804ed8:	0804db80 	call	804db8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  804edc:	01002034 	movhi	r4,128
  804ee0:	2118ce04 	addi	r4,r4,25400
  804ee4:	e17fff17 	ldw	r5,-4(fp)
  804ee8:	01800044 	movi	r6,1
  804eec:	01c07fc4 	movi	r7,511
  804ef0:	0804db80 	call	804db8 <alt_open_fd>
}  
  804ef4:	e037883a 	mov	sp,fp
  804ef8:	dfc00117 	ldw	ra,4(sp)
  804efc:	df000017 	ldw	fp,0(sp)
  804f00:	dec00204 	addi	sp,sp,8
  804f04:	f800283a 	ret

00804f08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804f08:	defffa04 	addi	sp,sp,-24
  804f0c:	dfc00515 	stw	ra,20(sp)
  804f10:	df000415 	stw	fp,16(sp)
  804f14:	dc000315 	stw	r16,12(sp)
  804f18:	df000304 	addi	fp,sp,12
  804f1c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804f20:	e0bffe17 	ldw	r2,-8(fp)
  804f24:	10800217 	ldw	r2,8(r2)
  804f28:	10d00034 	orhi	r3,r2,16384
  804f2c:	e0bffe17 	ldw	r2,-8(fp)
  804f30:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804f34:	e03ffd15 	stw	zero,-12(fp)
  804f38:	00002306 	br	804fc8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804f3c:	e13ffd17 	ldw	r4,-12(fp)
  804f40:	04002034 	movhi	r16,128
  804f44:	8418c804 	addi	r16,r16,25376
  804f48:	01400304 	movi	r5,12
  804f4c:	08030a00 	call	8030a0 <__mulsi3>
  804f50:	1405883a 	add	r2,r2,r16
  804f54:	10c00017 	ldw	r3,0(r2)
  804f58:	e0bffe17 	ldw	r2,-8(fp)
  804f5c:	10800017 	ldw	r2,0(r2)
  804f60:	1880161e 	bne	r3,r2,804fbc <alt_file_locked+0xb4>
  804f64:	e13ffd17 	ldw	r4,-12(fp)
  804f68:	04002034 	movhi	r16,128
  804f6c:	8418c804 	addi	r16,r16,25376
  804f70:	01400304 	movi	r5,12
  804f74:	08030a00 	call	8030a0 <__mulsi3>
  804f78:	1405883a 	add	r2,r2,r16
  804f7c:	10800204 	addi	r2,r2,8
  804f80:	10800017 	ldw	r2,0(r2)
  804f84:	1004403a 	cmpge	r2,r2,zero
  804f88:	10000c1e 	bne	r2,zero,804fbc <alt_file_locked+0xb4>
  804f8c:	e13ffd17 	ldw	r4,-12(fp)
  804f90:	01400304 	movi	r5,12
  804f94:	08030a00 	call	8030a0 <__mulsi3>
  804f98:	1007883a 	mov	r3,r2
  804f9c:	00802034 	movhi	r2,128
  804fa0:	1098c804 	addi	r2,r2,25376
  804fa4:	1887883a 	add	r3,r3,r2
  804fa8:	e0bffe17 	ldw	r2,-8(fp)
  804fac:	18800326 	beq	r3,r2,804fbc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804fb0:	00bffcc4 	movi	r2,-13
  804fb4:	e0bfff15 	stw	r2,-4(fp)
  804fb8:	00000a06 	br	804fe4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804fbc:	e0bffd17 	ldw	r2,-12(fp)
  804fc0:	10800044 	addi	r2,r2,1
  804fc4:	e0bffd15 	stw	r2,-12(fp)
  804fc8:	00802034 	movhi	r2,128
  804fcc:	109d8504 	addi	r2,r2,30228
  804fd0:	10800017 	ldw	r2,0(r2)
  804fd4:	1007883a 	mov	r3,r2
  804fd8:	e0bffd17 	ldw	r2,-12(fp)
  804fdc:	18bfd72e 	bgeu	r3,r2,804f3c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804fe0:	e03fff15 	stw	zero,-4(fp)
  804fe4:	e0bfff17 	ldw	r2,-4(fp)
}
  804fe8:	e037883a 	mov	sp,fp
  804fec:	dfc00217 	ldw	ra,8(sp)
  804ff0:	df000117 	ldw	fp,4(sp)
  804ff4:	dc000017 	ldw	r16,0(sp)
  804ff8:	dec00304 	addi	sp,sp,12
  804ffc:	f800283a 	ret

00805000 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  805000:	defff404 	addi	sp,sp,-48
  805004:	dfc00b15 	stw	ra,44(sp)
  805008:	df000a15 	stw	fp,40(sp)
  80500c:	df000a04 	addi	fp,sp,40
  805010:	e13ffb15 	stw	r4,-20(fp)
  805014:	e17ffc15 	stw	r5,-16(fp)
  805018:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80501c:	00bfffc4 	movi	r2,-1
  805020:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  805024:	00bffb44 	movi	r2,-19
  805028:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80502c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805030:	e13ffb17 	ldw	r4,-20(fp)
  805034:	01402034 	movhi	r5,128
  805038:	295d8304 	addi	r5,r5,30220
  80503c:	08053b00 	call	8053b0 <alt_find_dev>
  805040:	e0bffa15 	stw	r2,-24(fp)
  805044:	e0bffa17 	ldw	r2,-24(fp)
  805048:	1004c03a 	cmpne	r2,r2,zero
  80504c:	1000051e 	bne	r2,zero,805064 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805050:	e13ffb17 	ldw	r4,-20(fp)
  805054:	08054440 	call	805444 <alt_find_file>
  805058:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80505c:	00800044 	movi	r2,1
  805060:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805064:	e0bffa17 	ldw	r2,-24(fp)
  805068:	1005003a 	cmpeq	r2,r2,zero
  80506c:	1000311e 	bne	r2,zero,805134 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  805070:	e13ffa17 	ldw	r4,-24(fp)
  805074:	08055640 	call	805564 <alt_get_fd>
  805078:	e0bff815 	stw	r2,-32(fp)
  80507c:	e0bff817 	ldw	r2,-32(fp)
  805080:	1004403a 	cmpge	r2,r2,zero
  805084:	1000031e 	bne	r2,zero,805094 <open+0x94>
    {
      status = index;
  805088:	e0bff817 	ldw	r2,-32(fp)
  80508c:	e0bff715 	stw	r2,-36(fp)
  805090:	00002a06 	br	80513c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  805094:	e13ff817 	ldw	r4,-32(fp)
  805098:	01400304 	movi	r5,12
  80509c:	08030a00 	call	8030a0 <__mulsi3>
  8050a0:	1007883a 	mov	r3,r2
  8050a4:	00802034 	movhi	r2,128
  8050a8:	1098c804 	addi	r2,r2,25376
  8050ac:	1885883a 	add	r2,r3,r2
  8050b0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8050b4:	e0fffc17 	ldw	r3,-16(fp)
  8050b8:	00900034 	movhi	r2,16384
  8050bc:	10bfffc4 	addi	r2,r2,-1
  8050c0:	1886703a 	and	r3,r3,r2
  8050c4:	e0bff917 	ldw	r2,-28(fp)
  8050c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8050cc:	e0bff617 	ldw	r2,-40(fp)
  8050d0:	1004c03a 	cmpne	r2,r2,zero
  8050d4:	1000061e 	bne	r2,zero,8050f0 <open+0xf0>
  8050d8:	e13ff917 	ldw	r4,-28(fp)
  8050dc:	0804f080 	call	804f08 <alt_file_locked>
  8050e0:	e0bff715 	stw	r2,-36(fp)
  8050e4:	e0bff717 	ldw	r2,-36(fp)
  8050e8:	1004803a 	cmplt	r2,r2,zero
  8050ec:	1000131e 	bne	r2,zero,80513c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8050f0:	e0bffa17 	ldw	r2,-24(fp)
  8050f4:	10800317 	ldw	r2,12(r2)
  8050f8:	1005003a 	cmpeq	r2,r2,zero
  8050fc:	1000091e 	bne	r2,zero,805124 <open+0x124>
  805100:	e0bffa17 	ldw	r2,-24(fp)
  805104:	10800317 	ldw	r2,12(r2)
  805108:	e13ff917 	ldw	r4,-28(fp)
  80510c:	e17ffb17 	ldw	r5,-20(fp)
  805110:	e1bffc17 	ldw	r6,-16(fp)
  805114:	e1fffd17 	ldw	r7,-12(fp)
  805118:	103ee83a 	callr	r2
  80511c:	e0bfff15 	stw	r2,-4(fp)
  805120:	00000106 	br	805128 <open+0x128>
  805124:	e03fff15 	stw	zero,-4(fp)
  805128:	e0bfff17 	ldw	r2,-4(fp)
  80512c:	e0bff715 	stw	r2,-36(fp)
  805130:	00000206 	br	80513c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805134:	00bffb44 	movi	r2,-19
  805138:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80513c:	e0bff717 	ldw	r2,-36(fp)
  805140:	1004403a 	cmpge	r2,r2,zero
  805144:	1000091e 	bne	r2,zero,80516c <open+0x16c>
  {
    alt_release_fd (index);  
  805148:	e13ff817 	ldw	r4,-32(fp)
  80514c:	0803af00 	call	803af0 <alt_release_fd>
    ALT_ERRNO = -status;
  805150:	080518c0 	call	80518c <alt_get_errno>
  805154:	e0fff717 	ldw	r3,-36(fp)
  805158:	00c7c83a 	sub	r3,zero,r3
  80515c:	10c00015 	stw	r3,0(r2)
    return -1;
  805160:	00bfffc4 	movi	r2,-1
  805164:	e0bffe15 	stw	r2,-8(fp)
  805168:	00000206 	br	805174 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80516c:	e0bff817 	ldw	r2,-32(fp)
  805170:	e0bffe15 	stw	r2,-8(fp)
  805174:	e0bffe17 	ldw	r2,-8(fp)
}
  805178:	e037883a 	mov	sp,fp
  80517c:	dfc00117 	ldw	ra,4(sp)
  805180:	df000017 	ldw	fp,0(sp)
  805184:	dec00204 	addi	sp,sp,8
  805188:	f800283a 	ret

0080518c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80518c:	defffd04 	addi	sp,sp,-12
  805190:	dfc00215 	stw	ra,8(sp)
  805194:	df000115 	stw	fp,4(sp)
  805198:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80519c:	00802034 	movhi	r2,128
  8051a0:	109d8604 	addi	r2,r2,30232
  8051a4:	10800017 	ldw	r2,0(r2)
  8051a8:	1005003a 	cmpeq	r2,r2,zero
  8051ac:	1000061e 	bne	r2,zero,8051c8 <alt_get_errno+0x3c>
  8051b0:	00802034 	movhi	r2,128
  8051b4:	109d8604 	addi	r2,r2,30232
  8051b8:	10800017 	ldw	r2,0(r2)
  8051bc:	103ee83a 	callr	r2
  8051c0:	e0bfff15 	stw	r2,-4(fp)
  8051c4:	00000306 	br	8051d4 <alt_get_errno+0x48>
  8051c8:	00802074 	movhi	r2,129
  8051cc:	10a46604 	addi	r2,r2,-28264
  8051d0:	e0bfff15 	stw	r2,-4(fp)
  8051d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8051d8:	e037883a 	mov	sp,fp
  8051dc:	dfc00117 	ldw	ra,4(sp)
  8051e0:	df000017 	ldw	fp,0(sp)
  8051e4:	dec00204 	addi	sp,sp,8
  8051e8:	f800283a 	ret

008051ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8051ec:	defffa04 	addi	sp,sp,-24
  8051f0:	df000515 	stw	fp,20(sp)
  8051f4:	df000504 	addi	fp,sp,20
  8051f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8051fc:	0005303a 	rdctl	r2,status
  805200:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805204:	e0fffd17 	ldw	r3,-12(fp)
  805208:	00bfff84 	movi	r2,-2
  80520c:	1884703a 	and	r2,r3,r2
  805210:	1001703a 	wrctl	status,r2
  
  return context;
  805214:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805218:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80521c:	e0bfff17 	ldw	r2,-4(fp)
  805220:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805224:	e0bffc17 	ldw	r2,-16(fp)
  805228:	10c00017 	ldw	r3,0(r2)
  80522c:	e0bffc17 	ldw	r2,-16(fp)
  805230:	10800117 	ldw	r2,4(r2)
  805234:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  805238:	e0bffc17 	ldw	r2,-16(fp)
  80523c:	10c00117 	ldw	r3,4(r2)
  805240:	e0bffc17 	ldw	r2,-16(fp)
  805244:	10800017 	ldw	r2,0(r2)
  805248:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80524c:	e0fffc17 	ldw	r3,-16(fp)
  805250:	e0bffc17 	ldw	r2,-16(fp)
  805254:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  805258:	e0fffc17 	ldw	r3,-16(fp)
  80525c:	e0bffc17 	ldw	r2,-16(fp)
  805260:	18800015 	stw	r2,0(r3)
  805264:	e0bffe17 	ldw	r2,-8(fp)
  805268:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80526c:	e0bffb17 	ldw	r2,-20(fp)
  805270:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805274:	e037883a 	mov	sp,fp
  805278:	df000017 	ldw	fp,0(sp)
  80527c:	dec00104 	addi	sp,sp,4
  805280:	f800283a 	ret

00805284 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805284:	defffb04 	addi	sp,sp,-20
  805288:	dfc00415 	stw	ra,16(sp)
  80528c:	df000315 	stw	fp,12(sp)
  805290:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805294:	d0a01217 	ldw	r2,-32696(gp)
  805298:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80529c:	d0a6f517 	ldw	r2,-25644(gp)
  8052a0:	10800044 	addi	r2,r2,1
  8052a4:	d0a6f515 	stw	r2,-25644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8052a8:	00003106 	br	805370 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8052ac:	e0bffe17 	ldw	r2,-8(fp)
  8052b0:	10800017 	ldw	r2,0(r2)
  8052b4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8052b8:	e0bffe17 	ldw	r2,-8(fp)
  8052bc:	10800403 	ldbu	r2,16(r2)
  8052c0:	10803fcc 	andi	r2,r2,255
  8052c4:	1005003a 	cmpeq	r2,r2,zero
  8052c8:	1000051e 	bne	r2,zero,8052e0 <alt_tick+0x5c>
  8052cc:	d0a6f517 	ldw	r2,-25644(gp)
  8052d0:	1004c03a 	cmpne	r2,r2,zero
  8052d4:	1000021e 	bne	r2,zero,8052e0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8052d8:	e0bffe17 	ldw	r2,-8(fp)
  8052dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8052e0:	e0bffe17 	ldw	r2,-8(fp)
  8052e4:	10c00217 	ldw	r3,8(r2)
  8052e8:	d0a6f517 	ldw	r2,-25644(gp)
  8052ec:	10c01e36 	bltu	r2,r3,805368 <alt_tick+0xe4>
  8052f0:	e0bffe17 	ldw	r2,-8(fp)
  8052f4:	10800403 	ldbu	r2,16(r2)
  8052f8:	10803fcc 	andi	r2,r2,255
  8052fc:	1004c03a 	cmpne	r2,r2,zero
  805300:	1000191e 	bne	r2,zero,805368 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  805304:	e0bffe17 	ldw	r2,-8(fp)
  805308:	10c00317 	ldw	r3,12(r2)
  80530c:	e0bffe17 	ldw	r2,-8(fp)
  805310:	11000517 	ldw	r4,20(r2)
  805314:	183ee83a 	callr	r3
  805318:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80531c:	e0bffd17 	ldw	r2,-12(fp)
  805320:	1004c03a 	cmpne	r2,r2,zero
  805324:	1000031e 	bne	r2,zero,805334 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  805328:	e13ffe17 	ldw	r4,-8(fp)
  80532c:	08051ec0 	call	8051ec <alt_alarm_stop>
  805330:	00000d06 	br	805368 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  805334:	e0bffe17 	ldw	r2,-8(fp)
  805338:	10c00217 	ldw	r3,8(r2)
  80533c:	e0bffd17 	ldw	r2,-12(fp)
  805340:	1887883a 	add	r3,r3,r2
  805344:	e0bffe17 	ldw	r2,-8(fp)
  805348:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80534c:	e0bffe17 	ldw	r2,-8(fp)
  805350:	10c00217 	ldw	r3,8(r2)
  805354:	d0a6f517 	ldw	r2,-25644(gp)
  805358:	1880032e 	bgeu	r3,r2,805368 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80535c:	e0fffe17 	ldw	r3,-8(fp)
  805360:	00800044 	movi	r2,1
  805364:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  805368:	e0bfff17 	ldw	r2,-4(fp)
  80536c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805370:	d0e01204 	addi	r3,gp,-32696
  805374:	e0bffe17 	ldw	r2,-8(fp)
  805378:	10ffcc1e 	bne	r2,r3,8052ac <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80537c:	e037883a 	mov	sp,fp
  805380:	dfc00117 	ldw	ra,4(sp)
  805384:	df000017 	ldw	fp,0(sp)
  805388:	dec00204 	addi	sp,sp,8
  80538c:	f800283a 	ret

00805390 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  805390:	deffff04 	addi	sp,sp,-4
  805394:	df000015 	stw	fp,0(sp)
  805398:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80539c:	000170fa 	wrctl	ienable,zero
}
  8053a0:	e037883a 	mov	sp,fp
  8053a4:	df000017 	ldw	fp,0(sp)
  8053a8:	dec00104 	addi	sp,sp,4
  8053ac:	f800283a 	ret

008053b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8053b0:	defff904 	addi	sp,sp,-28
  8053b4:	dfc00615 	stw	ra,24(sp)
  8053b8:	df000515 	stw	fp,20(sp)
  8053bc:	df000504 	addi	fp,sp,20
  8053c0:	e13ffd15 	stw	r4,-12(fp)
  8053c4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8053c8:	e0bffe17 	ldw	r2,-8(fp)
  8053cc:	10800017 	ldw	r2,0(r2)
  8053d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8053d4:	e13ffd17 	ldw	r4,-12(fp)
  8053d8:	08008100 	call	800810 <strlen>
  8053dc:	10800044 	addi	r2,r2,1
  8053e0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8053e4:	00000d06 	br	80541c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8053e8:	e0bffc17 	ldw	r2,-16(fp)
  8053ec:	11000217 	ldw	r4,8(r2)
  8053f0:	e1bffb17 	ldw	r6,-20(fp)
  8053f4:	e17ffd17 	ldw	r5,-12(fp)
  8053f8:	08056800 	call	805680 <memcmp>
  8053fc:	1004c03a 	cmpne	r2,r2,zero
  805400:	1000031e 	bne	r2,zero,805410 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  805404:	e0bffc17 	ldw	r2,-16(fp)
  805408:	e0bfff15 	stw	r2,-4(fp)
  80540c:	00000706 	br	80542c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  805410:	e0bffc17 	ldw	r2,-16(fp)
  805414:	10800017 	ldw	r2,0(r2)
  805418:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80541c:	e0fffe17 	ldw	r3,-8(fp)
  805420:	e0bffc17 	ldw	r2,-16(fp)
  805424:	10fff01e 	bne	r2,r3,8053e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  805428:	e03fff15 	stw	zero,-4(fp)
  80542c:	e0bfff17 	ldw	r2,-4(fp)
}
  805430:	e037883a 	mov	sp,fp
  805434:	dfc00117 	ldw	ra,4(sp)
  805438:	df000017 	ldw	fp,0(sp)
  80543c:	dec00204 	addi	sp,sp,8
  805440:	f800283a 	ret

00805444 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  805444:	defffa04 	addi	sp,sp,-24
  805448:	dfc00515 	stw	ra,20(sp)
  80544c:	df000415 	stw	fp,16(sp)
  805450:	df000404 	addi	fp,sp,16
  805454:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  805458:	00802034 	movhi	r2,128
  80545c:	109d8104 	addi	r2,r2,30212
  805460:	10800017 	ldw	r2,0(r2)
  805464:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  805468:	00003306 	br	805538 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80546c:	e0bffd17 	ldw	r2,-12(fp)
  805470:	11000217 	ldw	r4,8(r2)
  805474:	08008100 	call	800810 <strlen>
  805478:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80547c:	e0bffd17 	ldw	r2,-12(fp)
  805480:	10c00217 	ldw	r3,8(r2)
  805484:	e0bffc17 	ldw	r2,-16(fp)
  805488:	1885883a 	add	r2,r3,r2
  80548c:	10bfffc4 	addi	r2,r2,-1
  805490:	10800003 	ldbu	r2,0(r2)
  805494:	10803fcc 	andi	r2,r2,255
  805498:	1080201c 	xori	r2,r2,128
  80549c:	10bfe004 	addi	r2,r2,-128
  8054a0:	10800bd8 	cmpnei	r2,r2,47
  8054a4:	1000031e 	bne	r2,zero,8054b4 <alt_find_file+0x70>
    {
      len -= 1;
  8054a8:	e0bffc17 	ldw	r2,-16(fp)
  8054ac:	10bfffc4 	addi	r2,r2,-1
  8054b0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8054b4:	e0bffc17 	ldw	r2,-16(fp)
  8054b8:	1007883a 	mov	r3,r2
  8054bc:	e0bffe17 	ldw	r2,-8(fp)
  8054c0:	1885883a 	add	r2,r3,r2
  8054c4:	10800003 	ldbu	r2,0(r2)
  8054c8:	10803fcc 	andi	r2,r2,255
  8054cc:	1080201c 	xori	r2,r2,128
  8054d0:	10bfe004 	addi	r2,r2,-128
  8054d4:	10800be0 	cmpeqi	r2,r2,47
  8054d8:	10000a1e 	bne	r2,zero,805504 <alt_find_file+0xc0>
  8054dc:	e0bffc17 	ldw	r2,-16(fp)
  8054e0:	1007883a 	mov	r3,r2
  8054e4:	e0bffe17 	ldw	r2,-8(fp)
  8054e8:	1885883a 	add	r2,r3,r2
  8054ec:	10800003 	ldbu	r2,0(r2)
  8054f0:	10803fcc 	andi	r2,r2,255
  8054f4:	1080201c 	xori	r2,r2,128
  8054f8:	10bfe004 	addi	r2,r2,-128
  8054fc:	1004c03a 	cmpne	r2,r2,zero
  805500:	10000a1e 	bne	r2,zero,80552c <alt_find_file+0xe8>
  805504:	e0bffd17 	ldw	r2,-12(fp)
  805508:	11000217 	ldw	r4,8(r2)
  80550c:	e1bffc17 	ldw	r6,-16(fp)
  805510:	e17ffe17 	ldw	r5,-8(fp)
  805514:	08056800 	call	805680 <memcmp>
  805518:	1004c03a 	cmpne	r2,r2,zero
  80551c:	1000031e 	bne	r2,zero,80552c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  805520:	e0bffd17 	ldw	r2,-12(fp)
  805524:	e0bfff15 	stw	r2,-4(fp)
  805528:	00000806 	br	80554c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80552c:	e0bffd17 	ldw	r2,-12(fp)
  805530:	10800017 	ldw	r2,0(r2)
  805534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  805538:	00c02034 	movhi	r3,128
  80553c:	18dd8104 	addi	r3,r3,30212
  805540:	e0bffd17 	ldw	r2,-12(fp)
  805544:	10ffc91e 	bne	r2,r3,80546c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  805548:	e03fff15 	stw	zero,-4(fp)
  80554c:	e0bfff17 	ldw	r2,-4(fp)
}
  805550:	e037883a 	mov	sp,fp
  805554:	dfc00117 	ldw	ra,4(sp)
  805558:	df000017 	ldw	fp,0(sp)
  80555c:	dec00204 	addi	sp,sp,8
  805560:	f800283a 	ret

00805564 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  805564:	defffa04 	addi	sp,sp,-24
  805568:	dfc00515 	stw	ra,20(sp)
  80556c:	df000415 	stw	fp,16(sp)
  805570:	dc000315 	stw	r16,12(sp)
  805574:	df000304 	addi	fp,sp,12
  805578:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80557c:	00bffa04 	movi	r2,-24
  805580:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  805584:	e03ffe15 	stw	zero,-8(fp)
  805588:	00002006 	br	80560c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80558c:	e13ffe17 	ldw	r4,-8(fp)
  805590:	04002034 	movhi	r16,128
  805594:	8418c804 	addi	r16,r16,25376
  805598:	01400304 	movi	r5,12
  80559c:	08030a00 	call	8030a0 <__mulsi3>
  8055a0:	1405883a 	add	r2,r2,r16
  8055a4:	10800017 	ldw	r2,0(r2)
  8055a8:	1004c03a 	cmpne	r2,r2,zero
  8055ac:	1000141e 	bne	r2,zero,805600 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  8055b0:	e13ffe17 	ldw	r4,-8(fp)
  8055b4:	04002034 	movhi	r16,128
  8055b8:	8418c804 	addi	r16,r16,25376
  8055bc:	01400304 	movi	r5,12
  8055c0:	08030a00 	call	8030a0 <__mulsi3>
  8055c4:	1407883a 	add	r3,r2,r16
  8055c8:	e0bfff17 	ldw	r2,-4(fp)
  8055cc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8055d0:	00802034 	movhi	r2,128
  8055d4:	109d8504 	addi	r2,r2,30228
  8055d8:	10c00017 	ldw	r3,0(r2)
  8055dc:	e0bffe17 	ldw	r2,-8(fp)
  8055e0:	1880040e 	bge	r3,r2,8055f4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  8055e4:	00c02034 	movhi	r3,128
  8055e8:	18dd8504 	addi	r3,r3,30228
  8055ec:	e0bffe17 	ldw	r2,-8(fp)
  8055f0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8055f4:	e0bffe17 	ldw	r2,-8(fp)
  8055f8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8055fc:	00000606 	br	805618 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  805600:	e0bffe17 	ldw	r2,-8(fp)
  805604:	10800044 	addi	r2,r2,1
  805608:	e0bffe15 	stw	r2,-8(fp)
  80560c:	e0bffe17 	ldw	r2,-8(fp)
  805610:	10800810 	cmplti	r2,r2,32
  805614:	103fdd1e 	bne	r2,zero,80558c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  805618:	e0bffd17 	ldw	r2,-12(fp)
}
  80561c:	e037883a 	mov	sp,fp
  805620:	dfc00217 	ldw	ra,8(sp)
  805624:	df000117 	ldw	fp,4(sp)
  805628:	dc000017 	ldw	r16,0(sp)
  80562c:	dec00304 	addi	sp,sp,12
  805630:	f800283a 	ret

00805634 <atexit>:
  805634:	200b883a 	mov	r5,r4
  805638:	000d883a 	mov	r6,zero
  80563c:	0009883a 	mov	r4,zero
  805640:	000f883a 	mov	r7,zero
  805644:	08056f41 	jmpi	8056f4 <__register_exitproc>

00805648 <exit>:
  805648:	defffe04 	addi	sp,sp,-8
  80564c:	000b883a 	mov	r5,zero
  805650:	dc000015 	stw	r16,0(sp)
  805654:	dfc00115 	stw	ra,4(sp)
  805658:	2021883a 	mov	r16,r4
  80565c:	080582c0 	call	80582c <__call_exitprocs>
  805660:	00802034 	movhi	r2,128
  805664:	109d7e04 	addi	r2,r2,30200
  805668:	11000017 	ldw	r4,0(r2)
  80566c:	20800f17 	ldw	r2,60(r4)
  805670:	10000126 	beq	r2,zero,805678 <exit+0x30>
  805674:	103ee83a 	callr	r2
  805678:	8009883a 	mov	r4,r16
  80567c:	0805a1c0 	call	805a1c <_exit>

00805680 <memcmp>:
  805680:	00c000c4 	movi	r3,3
  805684:	1980032e 	bgeu	r3,r6,805694 <memcmp+0x14>
  805688:	2144b03a 	or	r2,r4,r5
  80568c:	10c4703a 	and	r2,r2,r3
  805690:	10000f26 	beq	r2,zero,8056d0 <memcmp+0x50>
  805694:	31ffffc4 	addi	r7,r6,-1
  805698:	3000061e 	bne	r6,zero,8056b4 <memcmp+0x34>
  80569c:	00000a06 	br	8056c8 <memcmp+0x48>
  8056a0:	39ffffc4 	addi	r7,r7,-1
  8056a4:	00bfffc4 	movi	r2,-1
  8056a8:	21000044 	addi	r4,r4,1
  8056ac:	29400044 	addi	r5,r5,1
  8056b0:	38800526 	beq	r7,r2,8056c8 <memcmp+0x48>
  8056b4:	20c00003 	ldbu	r3,0(r4)
  8056b8:	28800003 	ldbu	r2,0(r5)
  8056bc:	18bff826 	beq	r3,r2,8056a0 <memcmp+0x20>
  8056c0:	1885c83a 	sub	r2,r3,r2
  8056c4:	f800283a 	ret
  8056c8:	0005883a 	mov	r2,zero
  8056cc:	f800283a 	ret
  8056d0:	180f883a 	mov	r7,r3
  8056d4:	20c00017 	ldw	r3,0(r4)
  8056d8:	28800017 	ldw	r2,0(r5)
  8056dc:	18bfed1e 	bne	r3,r2,805694 <memcmp+0x14>
  8056e0:	31bfff04 	addi	r6,r6,-4
  8056e4:	21000104 	addi	r4,r4,4
  8056e8:	29400104 	addi	r5,r5,4
  8056ec:	39bff936 	bltu	r7,r6,8056d4 <memcmp+0x54>
  8056f0:	003fe806 	br	805694 <memcmp+0x14>

008056f4 <__register_exitproc>:
  8056f4:	defffa04 	addi	sp,sp,-24
  8056f8:	00802034 	movhi	r2,128
  8056fc:	109d7e04 	addi	r2,r2,30200
  805700:	dc000015 	stw	r16,0(sp)
  805704:	14000017 	ldw	r16,0(r2)
  805708:	dd000415 	stw	r20,16(sp)
  80570c:	2829883a 	mov	r20,r5
  805710:	81405217 	ldw	r5,328(r16)
  805714:	dcc00315 	stw	r19,12(sp)
  805718:	dc800215 	stw	r18,8(sp)
  80571c:	dc400115 	stw	r17,4(sp)
  805720:	dfc00515 	stw	ra,20(sp)
  805724:	2023883a 	mov	r17,r4
  805728:	3027883a 	mov	r19,r6
  80572c:	3825883a 	mov	r18,r7
  805730:	28002526 	beq	r5,zero,8057c8 <__register_exitproc+0xd4>
  805734:	29000117 	ldw	r4,4(r5)
  805738:	008007c4 	movi	r2,31
  80573c:	11002716 	blt	r2,r4,8057dc <__register_exitproc+0xe8>
  805740:	8800101e 	bne	r17,zero,805784 <__register_exitproc+0x90>
  805744:	2105883a 	add	r2,r4,r4
  805748:	1085883a 	add	r2,r2,r2
  80574c:	20c00044 	addi	r3,r4,1
  805750:	1145883a 	add	r2,r2,r5
  805754:	0009883a 	mov	r4,zero
  805758:	15000215 	stw	r20,8(r2)
  80575c:	28c00115 	stw	r3,4(r5)
  805760:	2005883a 	mov	r2,r4
  805764:	dfc00517 	ldw	ra,20(sp)
  805768:	dd000417 	ldw	r20,16(sp)
  80576c:	dcc00317 	ldw	r19,12(sp)
  805770:	dc800217 	ldw	r18,8(sp)
  805774:	dc400117 	ldw	r17,4(sp)
  805778:	dc000017 	ldw	r16,0(sp)
  80577c:	dec00604 	addi	sp,sp,24
  805780:	f800283a 	ret
  805784:	29802204 	addi	r6,r5,136
  805788:	00800044 	movi	r2,1
  80578c:	110e983a 	sll	r7,r2,r4
  805790:	30c04017 	ldw	r3,256(r6)
  805794:	2105883a 	add	r2,r4,r4
  805798:	1085883a 	add	r2,r2,r2
  80579c:	1185883a 	add	r2,r2,r6
  8057a0:	19c6b03a 	or	r3,r3,r7
  8057a4:	14802015 	stw	r18,128(r2)
  8057a8:	14c00015 	stw	r19,0(r2)
  8057ac:	00800084 	movi	r2,2
  8057b0:	30c04015 	stw	r3,256(r6)
  8057b4:	88bfe31e 	bne	r17,r2,805744 <__register_exitproc+0x50>
  8057b8:	30804117 	ldw	r2,260(r6)
  8057bc:	11c4b03a 	or	r2,r2,r7
  8057c0:	30804115 	stw	r2,260(r6)
  8057c4:	003fdf06 	br	805744 <__register_exitproc+0x50>
  8057c8:	00802074 	movhi	r2,129
  8057cc:	10a4b704 	addi	r2,r2,-27940
  8057d0:	100b883a 	mov	r5,r2
  8057d4:	80805215 	stw	r2,328(r16)
  8057d8:	003fd606 	br	805734 <__register_exitproc+0x40>
  8057dc:	00800034 	movhi	r2,0
  8057e0:	10800004 	addi	r2,r2,0
  8057e4:	1000021e 	bne	r2,zero,8057f0 <__register_exitproc+0xfc>
  8057e8:	013fffc4 	movi	r4,-1
  8057ec:	003fdc06 	br	805760 <__register_exitproc+0x6c>
  8057f0:	01006404 	movi	r4,400
  8057f4:	103ee83a 	callr	r2
  8057f8:	1007883a 	mov	r3,r2
  8057fc:	103ffa26 	beq	r2,zero,8057e8 <__register_exitproc+0xf4>
  805800:	80805217 	ldw	r2,328(r16)
  805804:	180b883a 	mov	r5,r3
  805808:	18000115 	stw	zero,4(r3)
  80580c:	18800015 	stw	r2,0(r3)
  805810:	80c05215 	stw	r3,328(r16)
  805814:	18006215 	stw	zero,392(r3)
  805818:	18006315 	stw	zero,396(r3)
  80581c:	0009883a 	mov	r4,zero
  805820:	883fc826 	beq	r17,zero,805744 <__register_exitproc+0x50>
  805824:	003fd706 	br	805784 <__register_exitproc+0x90>

00805828 <register_fini>:
  805828:	f800283a 	ret

0080582c <__call_exitprocs>:
  80582c:	00802034 	movhi	r2,128
  805830:	109d7e04 	addi	r2,r2,30200
  805834:	10800017 	ldw	r2,0(r2)
  805838:	defff304 	addi	sp,sp,-52
  80583c:	df000b15 	stw	fp,44(sp)
  805840:	d8800115 	stw	r2,4(sp)
  805844:	00800034 	movhi	r2,0
  805848:	10800004 	addi	r2,r2,0
  80584c:	1005003a 	cmpeq	r2,r2,zero
  805850:	d8800215 	stw	r2,8(sp)
  805854:	d8800117 	ldw	r2,4(sp)
  805858:	dd400815 	stw	r21,32(sp)
  80585c:	dd000715 	stw	r20,28(sp)
  805860:	10805204 	addi	r2,r2,328
  805864:	dfc00c15 	stw	ra,48(sp)
  805868:	ddc00a15 	stw	r23,40(sp)
  80586c:	dd800915 	stw	r22,36(sp)
  805870:	dcc00615 	stw	r19,24(sp)
  805874:	dc800515 	stw	r18,20(sp)
  805878:	dc400415 	stw	r17,16(sp)
  80587c:	dc000315 	stw	r16,12(sp)
  805880:	282b883a 	mov	r21,r5
  805884:	2039883a 	mov	fp,r4
  805888:	d8800015 	stw	r2,0(sp)
  80588c:	2829003a 	cmpeq	r20,r5,zero
  805890:	d8800117 	ldw	r2,4(sp)
  805894:	14405217 	ldw	r17,328(r2)
  805898:	88001026 	beq	r17,zero,8058dc <__call_exitprocs+0xb0>
  80589c:	ddc00017 	ldw	r23,0(sp)
  8058a0:	88800117 	ldw	r2,4(r17)
  8058a4:	8c802204 	addi	r18,r17,136
  8058a8:	143fffc4 	addi	r16,r2,-1
  8058ac:	80000916 	blt	r16,zero,8058d4 <__call_exitprocs+0xa8>
  8058b0:	05bfffc4 	movi	r22,-1
  8058b4:	a000151e 	bne	r20,zero,80590c <__call_exitprocs+0xe0>
  8058b8:	8409883a 	add	r4,r16,r16
  8058bc:	2105883a 	add	r2,r4,r4
  8058c0:	1485883a 	add	r2,r2,r18
  8058c4:	10c02017 	ldw	r3,128(r2)
  8058c8:	a8c01126 	beq	r21,r3,805910 <__call_exitprocs+0xe4>
  8058cc:	843fffc4 	addi	r16,r16,-1
  8058d0:	85bff81e 	bne	r16,r22,8058b4 <__call_exitprocs+0x88>
  8058d4:	d8800217 	ldw	r2,8(sp)
  8058d8:	10003126 	beq	r2,zero,8059a0 <__call_exitprocs+0x174>
  8058dc:	dfc00c17 	ldw	ra,48(sp)
  8058e0:	df000b17 	ldw	fp,44(sp)
  8058e4:	ddc00a17 	ldw	r23,40(sp)
  8058e8:	dd800917 	ldw	r22,36(sp)
  8058ec:	dd400817 	ldw	r21,32(sp)
  8058f0:	dd000717 	ldw	r20,28(sp)
  8058f4:	dcc00617 	ldw	r19,24(sp)
  8058f8:	dc800517 	ldw	r18,20(sp)
  8058fc:	dc400417 	ldw	r17,16(sp)
  805900:	dc000317 	ldw	r16,12(sp)
  805904:	dec00d04 	addi	sp,sp,52
  805908:	f800283a 	ret
  80590c:	8409883a 	add	r4,r16,r16
  805910:	88c00117 	ldw	r3,4(r17)
  805914:	2105883a 	add	r2,r4,r4
  805918:	1445883a 	add	r2,r2,r17
  80591c:	18ffffc4 	addi	r3,r3,-1
  805920:	11800217 	ldw	r6,8(r2)
  805924:	1c001526 	beq	r3,r16,80597c <__call_exitprocs+0x150>
  805928:	10000215 	stw	zero,8(r2)
  80592c:	303fe726 	beq	r6,zero,8058cc <__call_exitprocs+0xa0>
  805930:	00c00044 	movi	r3,1
  805934:	1c06983a 	sll	r3,r3,r16
  805938:	90804017 	ldw	r2,256(r18)
  80593c:	8cc00117 	ldw	r19,4(r17)
  805940:	1884703a 	and	r2,r3,r2
  805944:	10001426 	beq	r2,zero,805998 <__call_exitprocs+0x16c>
  805948:	90804117 	ldw	r2,260(r18)
  80594c:	1884703a 	and	r2,r3,r2
  805950:	10000c1e 	bne	r2,zero,805984 <__call_exitprocs+0x158>
  805954:	2105883a 	add	r2,r4,r4
  805958:	1485883a 	add	r2,r2,r18
  80595c:	11400017 	ldw	r5,0(r2)
  805960:	e009883a 	mov	r4,fp
  805964:	303ee83a 	callr	r6
  805968:	88800117 	ldw	r2,4(r17)
  80596c:	98bfc81e 	bne	r19,r2,805890 <__call_exitprocs+0x64>
  805970:	b8800017 	ldw	r2,0(r23)
  805974:	147fd526 	beq	r2,r17,8058cc <__call_exitprocs+0xa0>
  805978:	003fc506 	br	805890 <__call_exitprocs+0x64>
  80597c:	8c000115 	stw	r16,4(r17)
  805980:	003fea06 	br	80592c <__call_exitprocs+0x100>
  805984:	2105883a 	add	r2,r4,r4
  805988:	1485883a 	add	r2,r2,r18
  80598c:	11000017 	ldw	r4,0(r2)
  805990:	303ee83a 	callr	r6
  805994:	003ff406 	br	805968 <__call_exitprocs+0x13c>
  805998:	303ee83a 	callr	r6
  80599c:	003ff206 	br	805968 <__call_exitprocs+0x13c>
  8059a0:	88800117 	ldw	r2,4(r17)
  8059a4:	1000081e 	bne	r2,zero,8059c8 <__call_exitprocs+0x19c>
  8059a8:	89000017 	ldw	r4,0(r17)
  8059ac:	20000726 	beq	r4,zero,8059cc <__call_exitprocs+0x1a0>
  8059b0:	b9000015 	stw	r4,0(r23)
  8059b4:	8809883a 	mov	r4,r17
  8059b8:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLER-0x800000>
  8059bc:	bc400017 	ldw	r17,0(r23)
  8059c0:	883fb71e 	bne	r17,zero,8058a0 <__call_exitprocs+0x74>
  8059c4:	003fc506 	br	8058dc <__call_exitprocs+0xb0>
  8059c8:	89000017 	ldw	r4,0(r17)
  8059cc:	882f883a 	mov	r23,r17
  8059d0:	2023883a 	mov	r17,r4
  8059d4:	883fb21e 	bne	r17,zero,8058a0 <__call_exitprocs+0x74>
  8059d8:	003fc006 	br	8058dc <__call_exitprocs+0xb0>

008059dc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8059dc:	defffd04 	addi	sp,sp,-12
  8059e0:	df000215 	stw	fp,8(sp)
  8059e4:	df000204 	addi	fp,sp,8
  8059e8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  8059ec:	e0bfff17 	ldw	r2,-4(fp)
  8059f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8059f4:	e0bffe17 	ldw	r2,-8(fp)
  8059f8:	1005003a 	cmpeq	r2,r2,zero
  8059fc:	1000021e 	bne	r2,zero,805a08 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  805a00:	002af070 	cmpltui	zero,zero,43969
  805a04:	00000106 	br	805a0c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  805a08:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  805a0c:	e037883a 	mov	sp,fp
  805a10:	df000017 	ldw	fp,0(sp)
  805a14:	dec00104 	addi	sp,sp,4
  805a18:	f800283a 	ret

00805a1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  805a1c:	defffd04 	addi	sp,sp,-12
  805a20:	dfc00215 	stw	ra,8(sp)
  805a24:	df000115 	stw	fp,4(sp)
  805a28:	df000104 	addi	fp,sp,4
  805a2c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  805a30:	e13fff17 	ldw	r4,-4(fp)
  805a34:	08059dc0 	call	8059dc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  805a38:	003fff06 	br	805a38 <_exit+0x1c>
  805a3c:	00805828 	cmpgeui	r2,zero,352
